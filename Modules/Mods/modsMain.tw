:: A break from adventuring [downtime-mod] {"position":"6200,1200","size":"100,100"}
/* Begin by calculating how many days this can actually go on for */
/* We'll figure out what the limiting factor will be out of all the possibilities, and record what to "blame" for later narration */
<<set _actualDays = $downtime_daysCap>>
<<set _downtimeEndReason = "cap">>

<<if setup.downtime_isEating()>>
	<<set _eatingDays = setup.downtime_getEatingDaysPossible($gld)>>

	<<if _eatingDays < _actualDays>>
		<<set _actualDays = _eatingDays>>
		<<set _downtimeEndReason = "eat">>
	<</if>>
<</if>>

<<set _enteredDays = setup.downtime_getIntendedDays()>>
<<if _enteredDays < _actualDays>>
	<<set _actualDays = _enteredDays>>
	<<set _downtimeEndReason = "intended">>
<</if>>

<<if setup.downtime_isTraining()>>
	/* Training has to be worked out a bit differently, because other options could increase / decrease the available fat */
	<<set _trainingDays = setup.downtime_getTrainingDaysPossible($fat)>>
	
	<<if _trainingDays < _actualDays>>
		<<set _actualDays = _trainingDays>>
		
		/* Prevent days being lower than 0, as training days can reach that if there's not enough calories incoming */
		<<if _actualDays < 0>>
			<<set _actualDays = 0>>
		<</if>>
		
		<<set _downtimeEndReason = "train">>
	<</if>>
<</if>>

/* Work out the changes that WILL happen, but don't make them happen yet */
<<set _statChanges = {
	strength: 0,
	agility: 0,
	endurance: 0,
	intelligence: 0,
	stomach: 0,
	fat: 0,
	gold: 0,
}>>

/* Training */
<<if setup.downtime_isTraining()>>
	<<set _fatSpentOnTraining = _actualDays * setup.downtime_getTrainingFatPerDay()>>
	<<set _trainingResults = setup.downtime_calculateTrainingResults(_fatSpentOnTraining, $downtime_optionsSelected.training)>>
	
	<<set _statChanges.strength += _trainingResults.strength>>
	<<set _statChanges.endurance += _trainingResults.endurance>>
	<<set _statChanges.agility += _trainingResults.agility>>
	<<set _statChanges.intelligence += _trainingResults.intelligence>>

	<<set _statChanges.fat -= _fatSpentOnTraining>>
<</if>>

/* Eating */
/* Fat levels were change regardless of eating, but we'll do them here anyways */
<<set _statChanges.fat += setup.downtime_getDailyCalories() * _actualDays>>


<<if setup.downtime_isStomachTraining() and _actualDays >= 1>> /* Additional clause to ensure the player needs to be able to afford a full day's worth of stuffing to start out on the stuffing training */
	/* Stomach training works weirdly, so we will actually be changing one aspect (the stomachStretch counter) right now while calculating what happens */
	<<set _minutesStretched = $downtime_stretchPerDay * _actualDays>>
	<<set _stretchCalcResults = setup.downtime_calculateStomachStretch(_minutesStretched, $status.stomachStretch)>>
	
	<<set _increases = _stretchCalcResults[0]>>
	<<set _newStomachStretch = _stretchCalcResults[1]>>
	
	<<set _statChanges.stomach += _increases>>
	<<set $status.stomachStretch = _newStomachStretch>>
<</if>>

/* Misc */
/* expenses */
<<set _statChanges.gold -= setup.downtime_getDailyEatCost() * _actualDays>>

/* NARRATE */

/* Prepare some things for narration */
<<set _workingOut = false>>
<<set _studying = false>>
<<if $downtime_optionsSelected.training.intelligence == true>>
	<<set _studying = true>>
<</if>>

<<if $downtime_optionsSelected.training.strength == true or $downtime_optionsSelected.training.agility == true>>
	<<set _workingOut = true>>
<</if>>

<<set _eatingCategory = "none">>
<<if $downtime_optionsSelected.eating == "normal">>
	<<set _eatingCategory = "modest">>
<</if>>

<<if typeof $downtime_optionsSelected.eating === "number">>
	<<if $downtime_optionsSelected.eating == 0>>
		<<set _eatingCategory = "none">>
	<<elseif $downtime_optionsSelected.eating <= 50>>
		<<set _eatingCategory = "modest">>
	<<elseif $downtime_optionsSelected.eating <= 100>>
		<<set _eatingCategory = "indulgent">>
	<<elseif $downtime_optionsSelected.eating > 100>>
		<<set _eatingCategory = "extreme">>
	<</if>>
<</if>>

<<set _isGainingWeight = false>>
<<if _statChanges.fat > 0>>
	<<set _isGainingWeight = true>>
<</if>>

<<set _bedStatus = "bed">>
<<if setup.weight() > 400>>
	<<set _bedStatus = "your creaking bed">>
<</if>>

<<if _actualDays < 2>>
	<<if _downtimeEndReason != "intended">>
		<<if _downtimeEndReason == "train">>
			<<set _plans = "">>
			<<set _problem = "">>
			
			<<if _workingOut == true and _studying == true>>
				<<set _plans = "of daily visits to the training grounds and the library, to hone both your body and mind">>
				<<set _problem = "The exercise proves to be far more draining than you originally thought, which makes it hard to focus on your studies">>
			<<elseif _workingOut == true and _studying == false>>
				<<set _plans = "for an in-depth daily workout routine">>
				<<set _problem = "The exercise proves to be far more draining than you originally thought, and you find yourself wishing the effort was going towards more adventurous pursuits instead">>
			<<elseif _studying == true and _workingOut == false>>
				<<set _plans = "for many study topics to explore nose-deep in books at the library">>
				<<set _problem = "The thought of another mind-numbing minute pouring through musty tomes is almost too much to bear, and you yearn for a bit more excitement">>
			<</if>>
			You put together plans _plans, but are soon hit with quite the reality check. Scarcely a day goes by and you already exhausted with it all. _problem. You end up cutting your plans short - you're not sure you could take any more training.
		<<else>> /* Must be eat */
			While you had planned for a longer break, your budget has other plans. It's barely been a day before you're reaching in to your coin purse to pay for another snack, only to find it empty. You end up cutting your plans short - you're going to need to make some gold if you want to be able to afford to feed your appetite.
			
			/* cut because I wrote these basic ones not realising I'd already had a decent generic one above
			<<if _eatingCategory == "modest">>
				Even your more modest-sized diet isn't enough to sustain your planned days of rest and relaxation. Your gold runs out with scarcely a day going by.
			<<elseif _eatingCategory == "indulgent">>
				Your plans for days of pleasant indulgence are brought short by the unpleasant reality of your less than sizeable coin purse. You barely manage to scrape together enough gold for a day's indulgence, though enjoy yourself while it lasts.
			<<elseif _eatingCategory == "extreme">>
				Your plans of blissful days spent wantonly gorging on all the food your heart desires and then some are abruptly yanked back into reality by your budget, or lack thereof. Hardly a day's worth of feasting goes by before your gold supply runs dry, and you're left having to seek more funds if you want to experience such a good time.
			<</if>>
			*/
		<</if>>
	
	<<else>>

		Deciding that a day off is just what you need, 
		
		<<if setup.downtime_isTraining()>>
			you set your sights on taking some time off to better yourself. 
			<<if _workingOut == true and _studying == true>>
				Morning takes you to the training grounds, where you work up a sweat working out, then you cool off in the afternoon at the library, brushing up on your knowledge. 
			<<elseif _workingOut == true and _studying == false>>
				You spend the day at the training grounds getting a good workout. It's tiring work, but you can already feel yourself growing just that bit fitter from your day's dedication. 
			<<elseif _studying == true and _workingOut == false>>
				The library is where you choose to spend your day, studying up on various topics. Even though it's just a day spent studying, you feel smarter than you were this morning. 
			<</if>>
		<<else>>
			you seize the opportunity to take things easy for the day. Lazing around, practising your hobbies, and enjoying the slow life in the comfortable safety of the city. 
		<</if>>
		
		
		<<if _eatingCategory == "none">>
			While the temptation to indulge in food is all around you, you opt to tighten your belt and purse strings and resist the call of food for the time being.
		<<elseif _eatingCategory == "modest">>
			You do your best to only eat a comfortable amount of food, resisting the urge to join in with the scenes of overindulgence unfolding around you.
		<<elseif _eatingCategory == "indulgent">>
			An evening of indulgence calls to you, and you join the many other furs in the restaurant merrily eating more than their fill. You leave with a belly comfortably full.
		<<elseif _eatingCategory == "extreme">>
			You end the day with a feast far beyond your abilities, glutting yourself on a feast of flavors until you're so stuffed it feels like you could burst if you breathed wrong. Lying back in _bedStatus, you do your best to soothe your painfully stuffed gut as you drift off into a pleasant food coma.
		<</if>>
	<</if>>
<<else>>
	/* Beginning */
	/* (skipping because I hate writing) */
	
	/* What gets up to */
	<<if setup.downtime_isTraining()>>
		Settling back into city life comes easy to you, though you resolve to spend your time in training rather than allowing yourself to be lulled into the easy, lazy comfort the lifestyle tries to pull you towards. 
		
		<<if _workingOut == true and _studying == true>>
			Your efforts are split between the training grounds and the library, working up a sweat while you hone your body one moment, while honing your mind in the moments of rest. Each day you can feel your abilities improving, little by little, and that satisfaction is all the motivation you need to keep up your efforts. 
		<<elseif _workingOut == true>>
			<<if $downtime_optionsSelected.training.strength == true and $downtime_optionsSelected.training.agility == true>>
				You immerse yourself fitness training, putting your body through a mix of regimes that neglect no aspects - training strength, agility, and endurance. You end each day aching from the effort, but the way you can feel yourself improving just that little with each personal best bested makes it all worth it. 
			<<elseif $downtime_optionsSelected.training.strength == true>>
				You spend much of your time around musclebound furs, training your muscles so hard that come the evening you can barely lift your limbs. Despite how weak you feel by the end of a gruelling workout session you can tell you're getting stronger from your efforts, which drives you on to bench even greater weights. 
			<<else>> /* agility only */
				You spend most of your time on runs, $p.feet pounding along well-worn tracks until you feel like you can't take another step. You can feel yourself making steady progress, managing to beat your personal best times and distances more often than not with each passing day. 
			<</if>>
		<<else>> /* studying */
			You spend your days in quiet contemplation in the library, pouring through books as you study through all the topics you had planned. There's a great satisfaction to be had at seeing concepts you struggled with slowly unravel into something you understand, and the prospect of unpacking more nuggets of wisdom keeps you going. 
		<</if>>
		
		<<if _eatingCategory == "indulgent">>
			You reward yourself for your hard work with an indulgent meal as you unwind at the end of each day, as well as with plenty of snacks throughout your training. 
		<<elseif _eatingCategory == "extreme">>
			It's all hungry work, and you reward yourself at the end of each day by unleashing your voracious appetite on a feast as grand as you can handle. The sheer gluttony is a training in its own right as you force your stomach to cope with as much food as it can possibly bear. 
		<</if>>
		
		<<if _isGainingWeight == true>>
			In fact, your generous self-rewards are causing you to undo any weight loss that could've resulted from your hard work. 
		<</if>>
		
	<<else>>
		It doesn't take long for city life to pull you back in to its comfortable embrace of idyllic simplicity. You relish the opportunity to rest, take the weight off your feet, and settle in to a peaceful time of relaxation.
		<<if _eatingCategory == "none">>
			When you aren't taking it easy, you're finding opportunities to enjoy your hobbies and catch up with old friends, who seem to be larger each time you see them.
		<<elseif _eatingCategory == "modest">>
			When you aren't taking it easy, you're finding opportunities to enjoy your hobbies and catch up with old friends, who indulge a lot more liberally than you allow yourself to whenever you meet over a meal.
		<<elseif _eatingCategory == "indulgent">>
			When you aren't taking it easy, you're finding opportunities to enjoy your hobbies and catch up with old friends. As with most of the citizens, your friends seem to be just as lax about restraining their appetites as you are. Every meeting over some food or drinks leaves everyone present with a pleasantly full belly.
		<<elseif _eatingCategory == "extreme">>
			Much of your daily life revolves around food - sitting at the restaurant gorging on a buffet of delicious flavors to the very limits of your body, waddling back home nursing your painfully stuffed gut in your $p.hands, and sleeping off the monumental meal to prepare your body for the next feast.
		<</if>>

	<</if>>
	
	
	/* Ending */
	<br>
	
	<<if _downtimeEndReason == "intended">>
		All-in-all, your break is a satisfying experience, with you getting done everything you wanted to. Freshened and invigorated, you can't wait to return to your adventuring, ready for anything.
		
	<<elseif _downtimeEndReason == "eat">>
		<<if _eatingCategory == "indulgent" >>
			Food flows freely as you allow yourself to indulge your appetite here and there on treats that catch your fancy, though matching this flow of food into your belly runs the stream of gold leaving your coin purse. After one final indulgence, you're clean out of money, your appetite bringing your break to a close earlier than you intended.
		<<elseif _eatingCategory == "extreme" >>
			The extreme amount of food you're cramming down your gullet each day carries an equally sizeable price tag. The only thing that doesn't feel heavier about you after each of your monumental meals is your coin purse, which grows lighter at a rapid pace. Your hefty appetite ends up outpacing your budget, and you're forced to end your break early, having glutted on everything you could possibly afford.
		<<elseif _eatingCategory == "modest" >>
			Even your more modest budgeting of food isn't enough to see you all the way through your planned break, so you have to end things earlier than anticipated.
		<</if>>
	
	<<elseif _downtimeEndReason == "train">>
		/* Being lazy for the time being and not writing a combo for exercise + studying */
		<<if _workingOut == true>>
			Eventually your regular training regime starts to wear on you, and it feels like you're not making any more progress. Rather than continue the draining efforts, you decide it'd be for the best to cut your training short.
		<<else>> /* studying */
			After a while holed up in the library, it feels like you've learned everything you're willing to from pouring over books for now, and it would be better to get out into the world for some $p.hands-on experience. So you end your study break early.
		<</if>>
	
	<<elseif _downtimeEndReason == "cap">>
		With each peaceable day that passes in the comfort of your homely corner of the city, you can't help but feel an <i>itch</i> at the back of your mind, growing with each passing day. Tonight you lay awake in _bedStatus, restless as you reflect on the routine you've settled into. The thought of carrying on for even one more day feels almost unbearable - it isn't until you decide to cut your plans short that you finally manage to drift off to sleep. Come morning, you're up and ready for more exciting ways to pass the time.
	<</if>>
	
<</if>>

<hr>

/* UPDATE TIME + RELATED */
/* Reset player to a neutral state */
<<set $mana = $maxMana>> /* We'll give the player a free top-up (even though it should cost fat), as mana rechages to max far quicker than a single day */
<<set $sta = 100>>
<<set $ate = 0>>
<<set $inf = 0>>
<<set $infMass = 0>>

/* Store calories before resetting them */
<<set _statChanges.fat += $cal>>
<<set $cal = 0>>

<<removeStatus>>
<<updateStats>>

<<set $hea = $maxHea>>

/* First, we jump to the end of the day that downtime is being started */
<<set $day += 1>>
/* Then we jump the number of days based on the downtime, leaving off at the start of the day after the downtime */
<<set $day += Math.ceil(_actualDays)>>

<<set $hour = 9>>
<<set $tensMinute = 0>>
<<set $onesMinute = 0>>

/* Reset daily quests */
<<run setup.downtime_resetDailyQuests()>>

<<doTime 0>> /* Will cause all the other minutiae like AM/PM, time of day, etc. to get fixed */

/* PROVIDE THE STAT CHANGES */
<<if _statChanges.gold != 0>>
	<<doGld _statChanges.gold>>
<</if>>
<<if _statChanges.fat != 0>>
	<<changeStats "fat" setup.downtime_roundToDecimalPlace(_statChanges.fat,3)>>
<</if>>
<<if _statChanges.strength != 0>>
	<<changeStats "str" setup.downtime_roundToDecimalPlace(_statChanges.strength,2)>>
<</if>>
<<if _statChanges.agility != 0>>
	<<changeStats "agi" setup.downtime_roundToDecimalPlace(_statChanges.agility,2)>>
<</if>>
<<if _statChanges.endurance != 0>>
	<<changeStats "end" setup.downtime_roundToDecimalPlace(_statChanges.endurance,2)>>
<</if>>
<<if _statChanges.intelligence != 0>>
	<<changeStats "int" setup.downtime_roundToDecimalPlace(_statChanges.intelligence,2)>>
<</if>>
<<if _statChanges.stomach != 0>>
	<<changeStats "sto" _statChanges.stomach>>
<</if>>

<<action "c" "next" "Return to adventuring" "Your House">><</action>>


:: Beachside chef's taste-test [feeder-expansion] {"position":"6500,1000","size":"100,100"}
<<switch $eventCounterA>>
	<<case 0>>
		<<set _hasFood = 0>>
		<<if setup.numOwned($feeder_mealMeat) > 0>>
			<<set _hasFood += 1>>
		<</if>>
		<<if setup.numOwned($feeder_mealVeg) > 0>>
			<<set _hasFood += 1>>
		<</if>>
		<<if setup.numOwned($feeder_mealDessert) > 0>>
			<<set _hasFood += 1>>
		<</if>>
		
		<p>The $npc1.species grins, rubbing $npc1.his $npc1.hands together with anticipation. "Well then, let's see what ya got!" </p>
		
		<<if _hasFood > 0 and _hasFood < 3>> /* Player has brought some food, but not all of it */
			<<if _hasFood == 1>>
				<p>You carefully lay out the plateload of food you brought on the counter, then take a seat on one of the stools. The $npc1.species continues to look at you expectantly, then when $npc1.he realises you're done, $npc1.his smile wavers a bit. "That all ya brought? Not much of meal, that!" $npc1.he says. "Bulk it up with a bit of variety, an' I'll try it out all in one go." </p>
			<<else>>
				<p>You carefully lay out the couple plateloads of food you brought on the counter, then take a seat on one of the stools. The $npc1.species continues to look at you expectantly, then when $npc1.he realises you're done, $npc1.his smile wavers a bit. "That all ya brought? Not much of meal, that!" $npc1.he says. "Bulk it up with a bit of variety, an' I'll try it out all in one go." </p>
			<</if>>
			<p>"Don' worry about lil old me, I can handle it!" $npc1.he chuckles, slapping $npc1.his ample belly. </p>
			
			<<action "c" "next" "Okay" "Beachside chef's taste-test">>
				<<set $eventCounterA = "ending">>
			<</action>>
		<<elseif _hasFood == 0>> /* Player brought no food */
			<p>You've... got nothing. The $npc1.species sees you standing there sheepishly, and $npc1.he chuckles. "Way to get a $npc1.guy's hopes up, heh!" $npc1.he says, waving $npc1.his hand dismissively. "Whenever ya ready's fine, just bring it all together in one go." </p>
			
			<<action "c" "next" "Okay" "Beachside chef's taste-test">>
				<<set $eventCounterA = "ending">>
			<</action>>
		<<else>> /* Player brought all the necessary food */
			<p>You carefully lay out the selection of your best food on the counter, then take a seat on one of the stools. </p>
			
			<<removeItem $feeder_mealMeat 1>>
			<<removeItem $feeder_mealVeg 1>>
			<<removeItem $feeder_mealDessert 1>>
			
			<p>$npc1.He gives them all a once over with a scrutinising glance, sizing up the selection, then gives an approving nod. "Not bad, not bad. Though the proof of the puddin' is in the eatin'!" </p>
			
			<<action "c" "next" "Next" "Beachside chef's taste-test">>
				<<set $eventCounterA += 1>>
			<</action>>
		<</if>>
	<<case 1>>
		<p>Licking $npc1.his chops, the $npc1.species digs in with gusto, alternating mouthfuls of veggies and meats. It feels slightly awkward to be sitting there watching $npc1.him eat - you kind of wish you'd asked $npc1.him to make you something first so $npc1.he wouldn't be the only one eating. $npc1.He tries to fill the silence with the occasional //mmm//, or //that's good//, as well as some feedback and questions about how you prepared this or that. </p>
		<p>After what feels like forever, though in reality must only been a handful of minutes given how quickly $npc1.he eats, $npc1.he's mopping up cream with one last piece of cake. $npc1.He drops it into his maw and smiles, wiping $npc1.his mouth on his apron like a napkin. Then, $npc1.he looks to you. </p>
		
		<<action "c" "next" "The verdict..." "Beachside chef's taste-test">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<case 2>>
		<p>"That was good!" $npc1.he says, patting his ample belly. "You've definitely got promise, tha's for sure." $npc1.He gives you a strong clap on the arm as $npc1.he gets up and ambles over to the side of the bar, scooping some gold coins out of a box. $npc1.He drops them into you hand with a wink. "For ya troubles. Seems only fair." </p>
		<<questReward $feeder_questRaccoonCook>>
		
		<p>$npc1.He returns to $npc1.his prep work, delicately rolling up some sushi rolls while the question of whether $npc1.he's willing to share $npc1.his techniques lingers in the air. $npc1.He finishes making a few rolls while $npc1.he stares off at the gently glittering sea, pondering. Then $npc1.he tips $npc1.his head to see you still sat at the bar watching with anticipation, and $npc1.he smirks. "'Suppose it couldn't hurt to share some of my secrets to a fellow chef, //but//," $npc1.he says, waggling a finger. "Ya gotta demonstrate to me that you can handle it. Don't wanna teach someone just for 'em to make 'emself burst from their breakfast, do I? Finish a feast of my menu, all in one go, and I'll know ya can be trusted." </p>
		<<getQuest $feeder_questRaccoonFeast>>
		
		<<action "c" "next" "Next" "Beachside chef's taste-test">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<default>>
		<p>"Now... in the spirit of sharin', fancy somethin' of mine? Ya still gotta pay, though. Heh!" </p>
		<<if $eventCounterB == "beach">>
			<<vendor "beach raccoon">>
			<<store>>
			<<action "c" "beach" "Done" "Goodbye beach vendor">><</action>>
		<<else>>
			<<vendor "ocean raccoon">>
			<<store>>
			<<action "c" "ocean" "Done" "Goodbye ocean vendor">><</action>>
		<</if>>
<</switch>>


:: Check Larder [feeder-expansion] {"position":"6600,400","size":"100,100"}
<<feeder_getProvisionCount "all">>
<<set _totalCount = $feeder_provisionCount>>
<<if _totalCount == 0>>
The larder is pitifully bereft of any ingredients. Not even cobwebs occupy the empty space on each shelf.
<<elseif _totalCount < 4>>
There's only a very small handful of ingredients stored in your larder. It's barely even enough to make a meal, and doesn't really lend itself to many options...
<<elseif _totalCount < 16>>
Your larder is decently well-stocked with a small variety of food. There's enough ingredients there for a week or so of meals - or one day, if if you felt the urge to cook up one massive feast.
<<elseif _totalCount < 56>>
Your larder boasts a wealth and variety of foods and ingredients.<<if $sto > _totalCount * 5>> A normal person could get by on this collection for a few weeks, but you reckon you could manage it all in one gluttonous binge if the whim took you...<<else>> It's enough to get by for a few weeks.<</if>>
<<else>>
Your larder is overflowing with ingredients just begging to be made into a scrumptious feast. Every shelf is so loaded with food that you'd struggle to find room for more, but you're sure you'll find space somewhere if needs must...
<</if>>
<br><br>
<<include "feeder storage info">>
<hr>
Select any of your items to scrap for ingredients:<br>
<<feeder_larderProvisionsOptions>>

<<action "c" "leave" "Done" "Kitchen">><</action>>


:: Cooking up some grub! [feeder-expansion] {"position":"6500,400","size":"100,100"}
With the fire in your stove heating up and your range of cooking utensils at your disposal, you're ready to cook up something tasty.
<br><br>
<<include "feeder storage info">>
<hr>
<<feeder_crafting>>
<<action "c" "leave" "Done" "Kitchen">><</action>>


:: Core Species - Vanilla Patch [fixes-and-edits] {"position":"6800,1200","size":"100,100"}
/* This one doesn't actually do much, because the base game species (with Fixes and Edits additions) are loaded by default - don't need to overwrite things with the exact same details! */
<<set $options.coreSpeciesBase = true>> /* TODO - don't know if going to be using this? */


:: Core Species Mod Options [mod-support fixes-and-edits] {"position":"6200,1800","size":"200,100"}
/* Add any Core Species Mods options here */
/* The player will be presented with this dropdown during game setup */
<<listbox "$coreSpeciesPassage" autoselect>>
	<<option "Base game species" "Core Species - Vanilla Patch">>
    <<option "Pokemod Core" "pokemod core patch core species">>
<</listbox>>


:: Creatorium [feeder-expansion] {"position":"6700,600","size":"100,100"}
<<createFixedNPC "creatoriumTeacher">>

<p>You arrive in the Creatorium at what you assume to be a <<if $daytime == "morning">>breakfast<<elseif $daytime == "day">>lunch<<else>>dinner<</if>> break - every seat filled with portly students munching on food. $npc1.Article $npc1.species in an ostentatiously bejewelled robe walks between them, inspecting their food and giving the occasional taste-test alongside feedback, which eventually clues you in that all this food is the product of a creation magic lesson.</p>

The $npc1.species lingers by an apprentice, who grins sheepishly as they present the hock of bread they've somehow created. "Focus on making one component at a time," $npc1.he advises, before walking over to you.<br>
"Here to devote yourself to learning the vast wonders that creation magic can bestow upon you, or are you just here for the //the popular spells//?" $npc1.he asks, casting a tired sideways glance at the students stuffing their faces behind $npc1.him.
<hr>
<<set $eventCounterB = 0>>
<<icon "talk">><<popup "Talk" "Creatorium teacher says">>

<<feeder_vendor "Creatorium">>
<<action "c" "spells" "Learn spells" "Learn spells from Creatorium">><</action>>

<<action "s" "leave" "Leave" "Study hall">><<set $travel = 1>><</action>>


:: Creatorium teacher says [feeder-expansion] {"position":"6900,600","size":"100,100"}
<<setPassageTitle "Talk to the creatorium teacher">>

<<switch $eventCounterB>>

<<case 0>>
"My name's $npc1.Name, and I'm sure I could grace your presence with a smidgen of my //precious// time. The misjudgements of my recent past are what have led me to teaching the //riff-raff// here the secrets of creation at this... //fine// establishment. The guildmaster told me my art would prove popular, but oh at what cost..."
<<set $eventCounterB++>>

<<case 1>>
"Fine works of art, delicate and complex machinery, wealth beyond all imagining - the path of creation, with a proper application of mastery, can yield a mage anything of their wildest fantasies! And yet all these students seem to be interested in is how to conjure ham sandwiches, or chocolate cake, or whatever //basic foodstuffs// seem to be popular in the moment..."
<<set $eventCounterB++>>

<<case 2>>
"Ever been to the capital? Not that you look the sort. The exquisite statuary at the centrepiece of the main plaza? One of my creations, willed into form by my skill, sharp intellect, and refined tastes. And that foxy hero who has been quite the talk around these parts? Don't think he would've lived long enough to boast of his exploits to every wench who catches his eye, if he hadn't had the prudence to entrust me with creating his armor! Ah, my talents are wasted here..."
<<set $eventCounterB++>>

<<default>>
"Since the recent //abundance// of food, newer food-based conjurations have somehow been flouting the previously accepted laws regarding the conservation of energy. It's rather amusing to see the academic fellows around here so riled up on the issue, so at least something interesting has come from this food magic obsession."

<<set $eventCounterB = 0>>
<</switch>>


:: Custom Spell Configurations [mod-support fixes-and-edits] {"position":"6500,1900","size":"200,100"}
<<set _spell = setup.getSpell($spellConfig.spell)>>
<<setPopupTitle "Configure: _spell.Name">>

<<switch _spell.id>>
	/* ICY SPELLS - START */
	<<case "icyspells_enlarge">>
    <<if not $spellConfig.init>>
			<<set $spellConfig.powerFactor = 0>>
			<<set $spellConfig.mode = "enlarge">>
			
			<<set $spellConfig.init = true>>
		<</if>>
		/* For now, we'll have fixed stages */
		<<set _enlargeUp = [
			/* RANK 1 */
			{cost: setup.getSpell("icyspells_enlarge").cost,
			power: 3/2,
			int: setup.getSpell("icyspells_enlarge").int},
			/* RANK 2 */
			{cost: setup.getSpell("icyspells_enlarge").cost*3,
			power: 4/2,
			int: setup.getSpell("icyspells_enlarge").int+20},
			/* RANK 3 */
			{cost: setup.getSpell("icyspells_enlarge").cost*6,
			power: 6/2,
			int: setup.getSpell("icyspells_enlarge").int+40},]>>

		<<set _enlargeDown = [
			/* RANK 1 */
			{cost: setup.getSpell("icyspells_enlarge").cost,
			power: 2/3,
			int: setup.getSpell("icyspells_enlarge").int},
			/* RANK 2 */
			{cost: setup.getSpell("icyspells_enlarge").cost*3,
			power: 2/4,
			int: setup.getSpell("icyspells_enlarge").int+20},
			/* RANK 3 */
			{cost: setup.getSpell("icyspells_enlarge").cost*6,
			power: 2/6,
			int: setup.getSpell("icyspells_enlarge").int+40},]>>

		''Rank <<=$spellConfig.powerFactor+1>>'' 
		
		/* Record currently selected tier */
		<<if $spellConfig.mode == "shrink">>
			<<set $spellConfig.tieredSpell = _enlargeDown[$spellConfig.powerFactor]>>
		<<else>>
			<<set $spellConfig.tieredSpell = _enlargeUp[$spellConfig.powerFactor]>>
		<</if>>

		/* Determine what options should be shown */
		/* PLUS OPTION */
		<<set _showPlus = false>>
		<<set _spellTable = _enlargeUp>>
		<<if $spellConfig.mode == "shrink">>
			<<set _spellTable = _enlargeDown>>
		<</if>>

		<<set _nextUp = _spellTable[$spellConfig.powerFactor + 1]>>

		<<if _nextUp and setup.canLearnSpell(_nextUp) and setup.canCastSpell(_nextUp)>>
			<<set _showPlus = true>>
		<</if>>

		<<if _showPlus>>
			<<link "[+]">>
				<<set $spellConfig.powerFactor += 1>>
				<<run Dialog.wiki(Story.get("Custom Spell Configurations").processText())>>
			<</link>> 
		<</if>>

		/*"&amp;nbsp;"*/

		/* MINUS OPTION */
		<<set _showMinus = false>>
		<<set _spellTable = _enlargeDown>>
		<<if $spellConfig.mode == "shrink">>
			<<set _spellTable = _enlargeDown>>
		<</if>>

		<<set _nextDown = _spellTable[$spellConfig.powerFactor - 1]>>

		<<if _nextDown and setup.canLearnSpell(_nextDown) and setup.canCastSpell(_nextDown)>>
			<<set _showMinus = true>>
		<</if>>

		<<if _showMinus>>
			<<link "[-]">>
				<<set $spellConfig.powerFactor -= 1>>
				<<run Dialog.wiki(Story.get("Custom Spell Configurations").processText())>>
			<</link>>
		<</if>>

		<br>
		/* Print the correct costs */
		<<if $spellConfig.mode == "enlarge">>
			<<=setup.getSpellCosts(_enlargeUp[$spellConfig.powerFactor]).join(", ")>>
		<<else>>
			<<=setup.getSpellCosts(_enlargeDown[$spellConfig.powerFactor]).join(", ")>>
		<</if>>
		<br><br>
		/* Mode selection - Triggering stuff on radio buttons is a pain, so we'll just be using links here :p */
		Select a mode: 
		<<if $spellConfig.mode == "enlarge">>
			GROW | <<link "SHRINK">>
				<<set $spellConfig.mode = "shrink">>
				<<set $spellConfig.powerFactor = 0>> /* reset power factor in case costs / requirements are different */
				<<run Dialog.wiki(Story.get("Custom Spell Configurations").processText())>>
			<</link>>
		<<else>>
			<<link "GROW">>
				<<set $spellConfig.mode = "enlarge">>
				<<set $spellConfig.powerFactor = 0>> /* reset power factor in case costs / requirements are different */
				<<run Dialog.wiki(Story.get("Custom Spell Configurations").processText())>>
			<</link>> | SHRINK
		<</if>>

		/* setup.getSpellCosts() */
  
	<<case "icyspells_ward">>
		<<set $spellConfig.init = true>>
		<<set $spellConfig.extraMana = 0>>
		
		Enter the extra mana you'd like to invest in the spell. Each point of mana will increase the ward's strength by <<=setup.tuning("icyspells_wardReinforceRate")>> points.<br>
		<<numberbox "$spellConfig.extraMana" 0>>
	/* ICY SPELLS - END */
	<<default>>
		''Error in "Custom Spell Logic" - $spellCast.Name missing entry''
<</switch>>

/* Always display the option to cast the spell at the end */
<hr>
<div style="text-align: center;">[ <<link "Cast">>
    <<set $spellCast = $spellConfig.spell>>
    <<run Dialog.close()>>
    
    <<if $inCombat >>
    	<<set $action = "Cast">>
        <<run Engine.play("Combat")>>
    <<else>>
    	<<script>>
				Dialog.setup("cast spell");
				Dialog.wiki(Story.get("cast spell").processText());
				Dialog.open();
			<</script>>
    <</if>>
<</link>> ]</div>


:: Custom Spell Logic [mod-support fixes-and-edits] {"position":"6500,1800","size":"200,100"}
/* Spells tagged with a `type` of `"custom"` that don't have their own `castPassage` or `castFunction` will end up looking here for their logic. */
/* Add your spell and it's logic to the entries here, above the DEFAULT */

<<switch $spellCast.id>>
	/* ICY SPELLS - START */
	<<case "icyspells_levitate">>
		/* TODO: Implement spell configuring */
		<<if $status.levitateTime <= 0>> /* Spell isn't already active */
			$spellCast.cast
			
			<<set $status.levitate = setup.tuning("icyspells_levitateBaseStrength")>>
			<<set $status.levitateTime = setup.tuning("icyspells_levitateBaseLength")>>
		<<else>>
			You renew the strength of the energy keeping your body aloft.
			<<set $status.levitateTime = setup.tuning("icyspells_levitateBaseLength")>>
		<</if>>
		
		<<run setup.consumeSpellCosts($spellCast)>>
        <<updateDescriptions>>
	
	<<case "icyspells_enlarge">>
		<<set _power = 3/2>>
		<<set _mode = "enlarge">>
		<<set _costData = $spellCast>>
		
		<<if $spellConfig.init>> /* The spell cast was configured! */
			<<set _power = $spellConfig.tieredSpell.power>>
			<<set _mode = $spellConfig.mode>>
			<<set _costData = $spellConfig.tieredSpell>>
		<</if>>
		
		<<set _change = "growing">>
		
		<<if _power < $status.enlarge>> /* shrinking */
			Energy crackles through your body which shrinks to a more diminutive size. 
		<<elseif _power > $status.enlarge>> /* growing */
			Energy crackles through your body as it starts to grow larger and taller. 
		<<elseif _power == $status.enlarge and $status.enlargeTime >=0 >> /* spell is already active, so renew length */
			<<if _power > 1>>
				You renew the power keeping you in your enlarged form. 
			<<else>>
				You renew the power keeping you in your shrunken form. 
			<</if>>
		<</if>>
		
		<<set $status.enlarge = _power>>
		<<set $status.enlargeTime = setup.tuning("icyspells_enlargeBaseLength")>>
		
		<<run setup.consumeSpellCosts(_costData)>>
		
		/* Update stats, in a way that won't defeat the player if they happen to shrink small enough their stomach will have troubles */
		<<set _wasAlive = $alive>>
		
		<<updateStats>> /* The stat changes are all handled here */
		
		<<if _wasAlive and not $alive>> /* Player was KO'd by fullness... honestly could do a better check for this, but whatever xP */
			<<set _failPassage = "As your body shrinks, you feel a growing fullness in your stomach. It seems that while your stomach is shrinking alongside your body, the contents of it aren't. The sensation in your gut grows concerningly tighter and tighter, the $p.fur on your belly creaking as it reaches an eye-watering strain. Just as you reach the point of exploding, the shrinking around your belly halts. While you watch the rest of your body continue growing smaller, your belly maintains its size, becoming more proportionally mismatched as the remaining seconds of shifting pass. It seems like the effect will hold off on shrinking your stomach any further, for now... ">>
			<<stomachResizeRescue _failPassage>>
		<</if>>
	
   <<case "icyspells_ignite">>
			/* For whatever reason I've decided I want the burning to always be a standardised type, so instead weaknesses and resistances are used for success rates */
			<<set _successChance = setup.tuning("icyspells_igniteChanceBase")>>
			
			<<if setup.enemyHasWeakness($spellCast.dType, $e)>>
				<<set _successChance = setup.tuning("icyspells_igniteChanceWeakness")>>
			<<elseif setup.enemyHasResistance($spellCast.dType, $e)>>
				<<set _successChance = setup.tuning("icyspells_igniteChanceResistance")>>
			<</if>>
			
			<<if random(1,100) <= Math.round(_successChance * 100)>> /* Spell succeeded */
				/* Narrate the effect */
				<<if $e.burnTime > 0>> /* The enemy was already burning */
					You shoot a flare of flame from you fingertips, fuelling the flames even more. 
				<<else>>
					Like striking a match, your foe begins to burn in a flare of flames. 
				<</if>>
				
				/* Get the damage */
				<<set $dmg = setup.xdy($spellCast.damage, $spellCast.dRange)>>
				<<set $dmg += setup.getPlayerSpellBonusDamage()>>
				
				/* Modify it to the spell's burn amount */
				<<set $dmg *= $spellCast.power>>
				
				/* Then add it to the existing burn damage... */
				<<set $dmg += $e.burn>>
				
				/* TODO: Maybe cap the damage? */
				
				/* Finally, modify it so it's applied at full damage (the burn buff uses a fraction of damage for burn damage) */
				<<set $dmg /= setup.tuning("burnProcDamageModifier")>>
				
				/* Now BURN*/
				<<eBuff "burn" $spellCast.time>>
				
				/* Reset damage in case anything else is planning on using it for things - wouldn't want this insanely high number to confuse things! */
				<<set $dmg = 0>>
			<<else>>
				<<if setup.enemyHasResistance($spellCast.dType, $e)>>
					You shoot a flare of flame from your fingertips, but it fails to ignite your heat-resistant foe. 
				<<else>>
					You shoot a flare of flame from your fingertips, but it doesn't quite ignite your foe.
				<</if>>
			<</if>>
			
			<<run setup.consumeSpellCosts($spellCast)>>
	
	<<case "icyspells_lesserWard" "icyspells_ward">> /* Both use the same spell for simplicity
		/* Establish base power */
		<<set _power = setup.xdy($spellCast.damage, $spellCast.dRange)>>
		<<set _power += setup.getPlayerSpellBonusDamage()>>
		
		/* Add bonus power from extra mana spent when configuring the non-lesser version of the spell */
		<<if $spellConfig.init>>
			<<set _bonusPower = $spellConfig.extraMana>>
			<<set _bonusPower = Math.clamp(_bonusPower, 0, variables().mana)>>
			/* Could further cap if planning on implementing a max mana % limit per cast */
			
			<<set _power += _bonusPower * setup.tuning("icyspells_wardReinforceRate")>>
		<</if>>
		
		/* Describe the spell */
		<<if $icyspells_ward > 0>> /* Reinforcing */
			You direct your magic towards your wards, reinforcing those that are waning and patching up gaps in their protection.
		<<else>>
			$spellCast.cast
			<<if $spellConfig.init >> The wards thrum with power as you focus even more energy into them.<</if>>
		<</if>>
		
		<<set _power = Math.round(_power)>>
		
		/* Functional stuff */
		<<tempBuff "icyspells_ward" _power $spellCast.power>>
		<<run setup.consumeSpellCosts($spellCast)>>
	
	<<case "icyspells_meditate">>
		/* Do the standard stuff */
		$spellCast.cast
		
		/* Mana is set to not regenerate from the rest, so we'll need to handle that */
		<<run setup.consumeSpellCosts($spellCast)>>
		<<set _postCastMana = $mana>>
		
		/* Do the actual effect stuff */
		<<doTime $spellCast.time>>
		<<stamina $spellCast.stamina>>
		<<health $end*$spellCast.enduranceMult>>
		<<digest $spellCast.bonusDigest>>
		
		<<set $mana = Math.min(_postCastMana, $mana)>>
		<<set $mana = Math.clamp($mana, 0, $maxMana)>>
		/* does anything need to be run to update these values? */
		
		<<updateClock>>
		
	<<case "icyspells_grease">>
		/* Do the standard stuff */
		$spellCast.cast
		<<run setup.consumeSpellCosts($spellCast)>>
		
        /* most of the actual effect is handled elsewhere */
		//<li>(Enemy greased)</li>//
		<<set $e.icyspells_greased = 1>>
	
	<<case "icyspells_explode">>
		/* Do standard stuff */
		<<if $e.burnTime > 0>>
			A dense orb of swirling energy builds up at your fingertips. You flick it forwards, sending it arching through the air. When it collides with your opponent it explodes outwards into a vortex of flames. The rush of energy fans the already burning flames, bursting with intensity in a brilliant flash. 
		<<else>>
			A dense orb of swirling energy builds up at your fingertips. You flick it forwards, sending it arching through the air. When it collides with your opponent it explodes outwards into a vortex of flames. 
		<</if>>
		<<run setup.consumeSpellCosts($spellCast)>>
		
		/* Do the damage stuff */
		<<set $dmg = setup.xdy($spellCast.damage, $spellCast.dRange)>>
		<<set $dmg += setup.getPlayerSpellBonusDamage()>>
		
		/* Specifically don't want this spell to trigger the burn effect of grease, so instead we'll have the option of boosting that damage */
		<<if $e.icyspells_greased > 0>>
			<<set $dmg *= $spellCast.greaseMult>>
		<</if>>
		
		/* Boost by all the burning stacks */
		<<if $e.burnTime > 0>>
			<<set $dmg += $e.burn * $e.burnTime>>
		<</if>>
		
		<<set _damageTypeMultiplier = setup.getEnemyDamageTypeMultiplier($spellCast.dType, $e)>>
		<<set $dmg = Math.round($dmg * _damageTypeMultiplier)>>
		
		/* Manually remove grease now (after it's contributed to damage effectiveness) */
		<<if $e.icyspells_greased > 0>>
			<<set $e.icyspells_greased = 0>>
		<</if>>
		
		/* End burning */
		<<if $e.burnTime > 0>>
			<<set $e.burn = 0>>
			<<set $e.burnTime = 0>>
		<</if>>
		
		<<reportEffectiveness $spellCast.dType "enemy">>
		<<eDamage $dmg>>
	
	<<case "icyspells_heatwave">>
		/* Do standard stuff */
		<<if $e.burnTime > 0>>
			Oppressive waves of heat radiate from your palms as you thrust them forwards at your foe. They languish beneath the combined heat of the waves and their burning body. 
		<<else>>
			Oppressive waves of heat radiate from your palms as you thrust them forwards at your foe. Small embers start to ignite across their form. 
		<</if>>
		<<run setup.consumeSpellCosts($spellCast)>>
		
		/* Do damage / start burn */
		<<if $e.burnTime > 0>>
			<<eDamage $e.burn>>
			<<set $e.burnTime += $spellCast.extendTime>>
		<<else>>
			<<set $dmg = setup.xdy($spellCast.damage, $spellCast.dRange)>>
			<<set $dmg += setup.getPlayerSpellBonusDamage()>>
			<<set _damageTypeMultiplier = setup.getEnemyDamageTypeMultiplier($spellCast.dType, $e)>>
			<<set $dmg = Math.round($dmg * _damageTypeMultiplier)>>
			
			<<eBuff "burn" $spellCast.time>>
		<</if>>

	/* ICY SPELLS - END */
	
	
	
	
	/* Add spells ABOVE here */
	<<default>>
		''Error in "Custom Spell Logic" - $spellCast.Name missing entry''
<</switch>>


:: Enter your basement [feeder-expansion] {"position":"6400,200","size":"100,100"}
/* Not strictly necessary as a passage, but whatever*/
<p>With a sense of apprehension you unlock the basement door and creep inside. The rough stairway down is slick with food stains, a patch of slippery sriracha strawberry sauce heats your $p.feet as you tread in and almost slip on it. Your $p.hands are almost white with how tightly you're clutching the hand rail, each step bringing you closer to the still yet unseen monster of your creation lurking somewhere in the dim light. As you take the final step you narrowly avoid squashing an unfortunate $rat.species underfoot. It's lying on its back with a spherical gut bulging out bigger than it is, letting out a few strained squeaks as it languidly tries and fails to scurry away. An unlucky - or lucky, depending on how they see it - victim of your living feast. </p>
<p>While you're distracted by the $rat.species you almost don't notice the tendril of food shoot out from the poorly lit corner of the room. It splatters onto the floor a pace or two away, evidently you're just out of its reach, reforming and retracting away back into the monstrous mound of living food, as other tendrils pull it from the shadows. It unsteadily shifts its way towards you with a single intent - to have its mad combination of flavors devoured by you! </p>

<hr>
<<setEnemy $feeder_foodBoss>>
<<set $e.special = "basement">> /* Let the fight know this is the basement version. */
<<set $e.runnable = true>>
<<startCombat>>


:: General Mod Toggles [mod-support fixes-and-edits] {"position":"5800,1800","size":"100,100"}
/* Add the option(s) to enable or disable mods here! */
/* This passage will be automatically included as part of the Mod Options menu, and the Mod Setup passage that appears at the start of the game */
/* Might do something fancy some day to automatically make these, but this'll do for now */
<ul>
<li><label><<checkbox "$options.feeder_expansionEnabled" false true autocheck>> ''Feeder expansion'' - Adds the ability to feed enemies in combat, as well as a basic cooking system, spells to create food, and a few basic quests to enhance both.</label></li>
<li><label><<checkbox "$options.downtimeEnabled" false true autocheck>> ''Downtime mod'' - Adds downtime options to quickly eat / train</label></li>
<li><label><<checkbox "$options.icyspells_enabled" false true autocheck>> ''Spellbook selection'' - Adds a selection of new spells</label></li>
</ul>


:: Human Species Add [Human] {"position":"7100,300","size":"100,100"}


:: Kitchen [feeder-expansion] {"position":"6500,500","size":"100,100"}
<<if setup.questCompleted($feeder_questRaccoonFeast) == true and setup.questCompleted($feeder_questWitchSpice) == true and setup.questStarted($feeder_questUltimateCreation) == false>> /* Start ultimate creation quest if meet the requirements */
	<p>As you $walk into your humble kitchen, your thoughts - as they often are nowadays - are of food. With your growing proficiency in the culinary arts, it feels like so many delectable paths have been opening up to you - taste sensations you never knew you were capable of creating. It makes you wonder how much more you're missing out on. How many recipes //are// there that you've yet to learn or taste the fruits of? How many more still are yet to be thought up, because nobody's dared to pioneer them? </p>
	<p>Your $waist belly grumbles hungrily as you spend a few lazy moments daydreaming about food. Then, inspiration strikes!</p>
	<p>All of a sudden your mind is racing with the most delicious idea. You hastily start writing down plans - ideas and timings for the most astounding recipe. //Nobody// would have dared to conceive something like this! </p>
	
	<<doTime 180>>
	
	<p>After several frenzied hours of writing non-stop, a crazed multi-page long recipe sits before you. You wince slightly as you flex your aching wrist, before gathering up all the pages and embracing them close to your chest. The anticipation of bringing this creation into the world is almost too much to bear, but a lot of preparation is required first... </p>
	
	<<getItem $feeder_ultimateRecipe>>
	<<getQuest $feeder_questUltimateCreation>>
	
	<<action "c" "next" "Next" "Kitchen">><</action>>
<<else>> /* Standard Kitchen */
	<p>You're standing in your kitchen. The room's slightly cramped, but it's got everything you need to cook up some food when the mood takes you. There's a larder in the corner where you keep stock of all your food and ingredients, and a rustic wood-burning stove where you put those ingredients to good use. </p>

	/* Reset selected crafting option. One of the least hacky ways I could think to do this... */
	<<set $feeder_selectedRecipe = null>>

	<<action "n" "restaurant" "Cook food" "Cooking up some grub!">><</action>>
	<<action "ne" "inventory" "Check ingredients stock" "Check Larder">><</action>>
	<<action "s" "return" "Main room" "Your House">><</action>>

	/* While the monster is active, add some extra narration, as well as the enter basement option. */
	<<if $feeder_ultimateMonsterAlive == true>>
		<p>The thick scent of a mighty feast wafts into the room through the locked door to the basement in the corner of the room. Occasionally there's the wet thumps of the monster you created shifting around down there, its frustration growing as its desire to be eaten goes unanswered. </p>
		<<action "nw" "leave" "Enter the basement" "Enter your basement">><</action>>
	<</if>>
<</if>>


:: Learn spells from Creatorium [feeder-expansion] {"position":"6800,600","size":"100,100"}
<<teach>>

<<action "c" "leave" "Leave" "Creatorium">><</action>>


:: Mod Options [fixes-and-edits] {"position":"6900,1200","size":"100,100"}
/* Popup menu that's displayed by an option in "Options" */
<<include "manual mod patch option">>
<hr>
<b><u>Configure Mod Settings</u></b><br>
<i>(Settings for mods you don't have enabled will still be shown here)</i>
<<include "Mod Settings">>
<hr>
<div id="modOptionsSpeciesMods">
<b><u>Enable / Disable Mods</u></b><br>
<<include "Species Mod Toggles">>
</div>
<div id="modOptionsGeneralMods">
<<include "General Mod Toggles">>
</div>


:: Mod Settings [mod-support] {"position":"5900,1800","size":"100,100"}
/* Place any settings for your mods here! They will appear in the Mod Options menu */
/* For enabling / disabling mods, use `General Mod Toggles` or `Species Mod Toggles` instead */
/* If your mods are complicated enough, you could instead link to a dedicated menu that holds all your settings */
/* TODO:
- Make it so only active mods show?
- Put settings in alongside their mod toggles?
*/


:: Mod Setup [fixes-and-edits intro] {"position":"6700,1200","size":"100,100"}
/* This passage is displayed during the start of game process, to enable / disable mods */

/* Let's enable some mods from the pack by default :3 */
<<set $options.feeder_expansionEnabled = true>>
<<set $options.downtimeEnabled = true>>
<<set $options.icyspells_enabled = true>>

<<action "c" "next" "What's your name">>
    /* Run patch so core species will be available later at the species editing stage */
    <<include "mods patch and update">>
<</action>>
<p>
<b><u>Mod Setup</u></b><br>
Select what mods you would like to have enabled. Most can be enabled and disabled later on during gameplay.
</p>
<hr>
<p>
<b><u>Core Species</u></b><br>
<<include "Core Species Mod Options">> Select the style of species you want to have available in-game. Unlike most options, this one isn't intended to be changed after this point.
</p>
<p>
<div id="setupSpeciesMods">
<b><u>Additional Species Mods</u></b><br>
Additional species can be added or removed at any time.
<<include "Species Mod Toggles">>
</div>
</p>
<p>
<div id="setupGeneralMods">
<b><u>Other Mods</u></b><br>
<<include "General Mod Toggles">>
</div>
</p>
<hr>
<p>
<b><u>Configure Mod Settings</u></b><br>
<i>(Settings for mods you don't have enabled will still be shown here)</i>
<<include "Mod Settings">>
</p>


:: Modding Support - README [fixes-and-edits mod-support] {"position":"5800,1500","size":"200,100"}
(This is very much in development, and also suffered a *slight* setback when I accidentally deleted everything)


=========
	PATCHING
=========
The concept of patchers exist as an attempt to help minimise the number of edits required to be made to the base game passages, and to help in updating mods or introducing them to existing saves. A patcher is essentially just a passage designed to set up any variables a mod may need, as well as alter existing variables - it won't eliminate the need for core edits, but will at least cover those scenarios.

== WHEN PATCHING OCCURS ==
Patches will run whenever:
- A fresh save has started. This means all fresh games will have your patches ready at the get-go, no need to hard edit things in (well, things that can be patched, anyway).
- Character creation finishes. This one is here just in case you want to conditionally want to patch something about the once you know the mod is active, before the player experiences anything in the world.
- A save is loaded. This helps automatically update old saves to newer mod versions.
- Patches are manually run through the options menu.

== PATCH RESETS ==
The following aspects of the game are always completely reverted back to default when a patch process runs, and so edits or additions to them made by patches should be done *every time* your patcher runs:
- Species
- NPCs
- Enemies
- Spells

In the future, more aspects will likely be added to this list.

== MAKING A PATCHER ==
At its most basic, a patcher is just a passage where you make any necessary modifications.

= Writing the passage =
Just write in all the variable declarations or variable changes you want to make inside the passage. That's basically it. You could do something smart and track mod versions so you don't have to apply the patches all the time, but there's not really any reason for it, and in fact it could harm you if you accidentally include a patch for an element that *should* be patched every run (see: patch resets) in a section that's only run once.

You can utilise one of the mod support features to inform the player that a mod has been updated when they load a save from an older version of the mod. Use this once when your mod is updating:
```
<<set setup.modUpdated = true>> /* Flag that an update has happened */
<<set setup.modUpdatedList.push("Your mod name")>> /* Add to list of updated mods */
```

- Recommended Setup -
Here's how I would recommend setting up a patch passage:
- At the top of the file, use a temporary variable to track the current mod release version. Whenever you update the mod, increase that version. Also keep track of the save's version through use of a global variable. Include a check to compare those two variables, and when they don't match you can trigger the mod updated message, and update the global variable to reflect this new version.
- I'd honestly not bother trying to split up what gets patched at what version - just allow everything to run every time the patch passage is run. Unless you're doing something crazy, there shouldn't be any performance impact, and even if there is it only effects starting / loading a game.
- If your patch passage gets too long to be manageable, split it up into multiple passages. In the main patch passage, `<<include>>` the others.

Example setup:
```
<<set _modVersion = 1>> /* Manually update this hardcoded value each time you make a new version of the mod */

<<if $myMod_saveVersion < _modVersion>> /* Check to see if the mod has been updated since the last save */
	<<set setup.modUpdated = true>> /* Flag that an update has happened */
	<<set setup.modUpdatedList.push("Your mod name")>> /* Add to list of updated mods */
	
	/* (If you absolutely need to do something when changing between versions in a save, you could add checks for what version it's being updated from, and perform special things here) */
	
	/* Either write out what needs patching here, or include passages containing them if that's too long and you like neatness */
	<<include "my mod patch enemies">>
	<<include "my mod patch npcs">>
	
	/* Update the recorded version in the save, so this doesn't happen again */
	<<set $myMod_saveVersion = _modVersion>>
<</if>>
```

*(Note that actually none of my mods thus far use this setup, because I've only recently figured this all out.)*

= Making it used =
To make it so your patcher is actually run, find the passage `mods patch and update` and include your passage there (using the `<<include>>` macro). That's all that's necessary - now your patch will be automatically run whenever patching occurs.

Example: `<<include "icyibis patch and update">>`

== USEFUL THINGS ==
- `setup.registerSpecies(object, id)` - Add / update a species. Properties in `object` are merged on top of the existing species, or used as the species object in the case of it being a new species. `id` is the identifier for the species - if it's missing, then the `id` property inside `object` will be used instead.
- `setup.getSpeciesData(species)` - Returns the species object of the given species. For most cases `species` should be the string ID for the species you want. Useful in scenarios where you want to make passages core species agnostic e.g. `"I'm so hungry I could eat a <<=setup.getSpeciesData("horse").species>>!"`
- `setup.registerNPC(id, object)` - Add / update an NPC. Properties in `object` are merged on top of the existing NPC, or used as the NPC object in the case of it being a new NPC.
- `setup.registerSpell(object, id)` - Add / update a spell. Properties in `object` are merged on top of the existing spell, or used as the spell object in the case of it being a new spell.

=======
	TUNING
=======
Tunings are variables used to govern how game mechanics work, like outlining how many points can be spent on stats during character creation, or how much food gets digested per minute. They aren't intended to be changed during gameplay, however there is the option to set tuning values on a per-save basis, so options can be used to configure the values.

For example, the player's maximum height is required to be known in several places - rather than hardcoding a value in each place it's used, we can use a tuning variable for it instead. That way, it's much easier to later change the values if we want to.

== TUNING FUNCTIONS ==

- `setup.getTuningValue(id)` - Gets the value of a tuning variable. Prioritises fetching per-save tuning variables, defaulting to the global version if one isn't found. You can also use `setup.tuning(id)` as a shortcut.
- `setup.registerTuning(id, value)` - Adds a global tuning variable (or overwrites an existing one with that id). You can also use `setup.tune(id, value)` as a shortcut.
- `setup.registerSaveTuning(id, value)` - Adds a per-save version of a tuning variable (or overwrites and existing per-save variable with that id). When fetching a tuning variable's value, per-save tuning variables are prioritised over the global versions. You can also use `setup.tuneSave(id, value)` as a shortcut.
- `setup.unregisterSaveTuning(id)` - Deletes a per-save tuning variable.

*(Note: tuning is very much early in implementation and very few things are actually hooked up to it at the moment)*

==============
	SETUP LOWDOWN
==============

- Most executable functions can be found in the `widgets` passages.
- Definitions for most *things* (like items, species, quests) are defined in their own dedicated passages with the names either mentioning `variables`, `objects`, or `enemies`.

==============
	MISC/UNSORTED
==============

- `<<setPassageTitle "New title">>` - Place within a passage to change the title that's displayed. Useful in situations where you need to be able to adapt certain sections of it based on variables (such as mention of a species name).
- `<<setPopupTitle "New title">>` - As `setPassageTitle`, but intended for when the passage is viewed as a popup.

== Making Statuses ==
- Widgets / removeStatus: Set it to its default values.
- player status: Add a description for the status being active.
- time widgets / eventTime: Track the status duration for expiry, and narrate the expiry when it's over.

Optional:
- status effects: If the status has a per-turn effect in combat, add the effect here.


:: Plan some downtime [downtime-mod] {"position":"6100,1200","size":"100,100"}
/* Set options to their defaults once this screen is entered */
<<set $downtime_optionsSelected = {
	training: {
    	strength: false,
        agility: false,
        intelligence: false,
    },
    eating: 100,
    diet: "mixed",
    days: 1,
}>>

/* Begin the actual text */
<p>Despite your yearning for adventure, the call of an easy life at home does sound appealling. Perhaps a break wouldn't hurt, if only for a little while...<br>
<br>
Use the options below to set what you want to do in your downtime.</p>
<hr>

<p><u><b>Train</b></u><br>
Hone your skills during your free time. Your attention will be split evenly across all the activities you choose.
<ul>
  <li><label><<checkbox "$downtime_optionsSelected.training.strength" false true autocheck>> Lift weights</label></li>
  <li><label><<checkbox "$downtime_optionsSelected.training.agility" false true autocheck>> Run track</label></li>
  <li><label><<checkbox "$downtime_optionsSelected.training.intelligence" false true autocheck>> Study</label></li>
</ul>
</p>

<p><u><b>Eat</b></u><br>
Plan the level of indulgence you wish to enjoy in your downtime
<ul>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 0 autocheck>> Go hungry</label></li>
</ul>
In normal terms:
<ul>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" "normal" autocheck>> Eat a normal amount</label></li>
</ul>
Accounting for your stomach size:
<ul>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 25 autocheck>> Fast</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 50 autocheck>> Eat modestly</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 75 autocheck>> Splurge a little</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 100 autocheck>> Overindulge</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.eating" 130 autocheck>> Push your limits (stomach will grow)</label></li>
</ul>
</p>

<p><u><b>Diet</b></u><br>
Plan what sort of diet you'll stick to.
<ul>
	<li><label><<radiobutton "$downtime_optionsSelected.diet" "healthy" autocheck>> Healthy</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.diet" "mixed" autocheck>> Mixed</label></li>
	<li><label><<radiobutton "$downtime_optionsSelected.diet" "fattening" autocheck>> Fattening</label></li>
</ul>
</p>

<p><u><b>Time</b></u><br>
Decide how many days you want to take a break from adventuring for. If you run out of gold (if eating), or fat (if training), your break will end earlier than planned.</p>
<p><label>Days to spend: <<numberbox "$downtime_optionsSelected.days" 1>></label> (<<link "Preview costs and results">><<script>>
	Dialog.setup("Downtime forecast...");
	Dialog.wiki(Story.get("downtime forecast").processText());
	Dialog.open();
<</script>><</link>>)</p>

<<action "w" "yes" "Enjoy some downtime" "A break from adventuring">><</action>>
<<action "e" "no" "Keep adventuring" "Your House">><</action>>


:: Pokemod [pokemod] {"position":"7000,800","size":"200,100"}
Pokemod Core is a core species mod that replaces the core species with the closest Pokemon equivalents. Pokemod Plus adds additional species.

(I just made this as a passage to look more organised)


:: Questioning the beachside chef [feeder-expansion] {"position":"6400,1000","size":"100,100"}
<p>The $npc1.species chuckles loudly, slapping $npc1.his belly a couple of times. "I betcha'd like to know!" </p>
<p>$npc1.He settles down and sighs, grabbing up $npc1.his knives ready for cooking, before noticing you're still looking at $npc1.him expectantly. "Wait, are ya serious?" </p>
<p>You nod. </p>
<p>"Well, I can't exactly go 'round givin' out my secret techniques to jus' about anyone, can I?" $npc1.He says, casually chatting as $npc1.he tops, tails, guts, and slices a fish in several flashes of expert knifemanship. "Though it is flatterin' for a fellow chef to take an interest!"</p>
<p>In one fluid motion $npc1.he empties the chopped fish into a sizzling pot of oil, sets aside the chopping board, and leans over on the counter. "'Course, it'd be pretty rude of me to turn ya away without givin' you a shake. Tell ya what, why don't you bring me a spread so I can see whatcha got? Nothin' fancy mind, jus' some good ol' regular meals. I'm not promisin' anything, mind you!"</p>
<p>"Deal?" $npc1.he asks, wiping $npc1.his $npc1.hand on $npc1.his apron before holding it out to you. You shake on it, $npc1.his firm and slightly fishy grasp squeezing your $p.hand tightly. "Atta $p.boy! Be nice to have someone else cook for //me// for a change. Heh!"</p>

<<getQuest $feeder_questRaccoonCook>>

<p>The $npc1.species goes back to prepping up some more seafood, adding a pinch of spices to the sizzling pot. "While ya here, fancy buyin' anythin'?</p>
<<if $eventCounterB == "beach">>
	<<vendor "beach raccoon">>
	<<store>>
	<<action "c" "beach" "Done" "Goodbye beach vendor">><</action>>
<<else>>
	<<vendor "ocean raccoon">>
	<<store>>
	<<action "c" "ocean" "Done" "Goodbye ocean vendor">><</action>>
<</if>>


:: Recreating your ultimate creation! [feeder-expansion cutscene] {"position":"6600,200","size":"100,100"}
/* This passage should be given the `cutscene` tag! */

<<if $feeder_ultimateMonsterAlive != true>> /* Setting up the encounter, and presenting the player with a choice */
	<p>With a perhaps misplaced sense of nostalgia, you find yourself thinking back on the living food abomination you accidentally created with a fondness. Ah, all that passion and freedom, breaking all the rules of gastronomy; a hard day's work rewarded with the taste of exotic flavor combinations! Your mouth waters at the memories. Perhaps it's time enjoy that experience once again... </p>
	<p>Digging out the old recipe, your pour through your notes with growing anticipation. Soon, every surface of your kitchen is covered once more in mixing bowls and pots and various ingredients in different states of preparation. You move between them in a maddened frenzy, chopping here, mixing there, cooking up a storm. </p>
	<p>The hours pass by without you noticing, that is until the last piece is put in place and you're finally hit by the exhausted ache of your body. You step back, wiping sweat from your brow with the back of your $p.hand, smearing food on your forehead in the process, and take a moment to bask in the glory of your creation. The towering monument of culinary hubris stands as tall as you, a multi-tiered mound of forbidden food fusions, glistening with toppings of creams, sauces, and every sort of topping you'd see on a pizza. </p>
	<p>All that's left is the final touch, though this time you have the foresight to move the feast into the basement first in case things go awry. It's an exhausting and messy task, but after a few minutes and spillages you manage to heave it down the stairs, placing it in the center of the room. You crack the spectrum gem in your $p.hand, sprinkling a generous dusting of the rainbow glitter across the whole feast, having to stand on your toes to reach the top. The mound shudders once, then again twice more. Its movements start to become slowly more fluid as if the abomination is just waking up from a deep slumber. </p>
	<p>While the creation still stirs into life, you still have the option to leave before it can try to stop you. </p>

	<<set $feeder_ultimateMonsterAlive = true>>
	
	<<action "w" "attack" "Fight" "Recreating your ultimate creation!">>
		<<set $eventCounterA = "fight">>
	<</action>>
	<<action "e" "leave" "Leave" "Kitchen">>
		<<addPretext "You hurry off up the stairs just as the abomination starts reaching out foody tendrils towards you. Slamming the basement door shut, you lock that meal up to be enjoyed at a later date. ">>
	<</action>>
	
<<else>> /* Player has made their choice */
	<<if $eventCounterA == "fight">>
		<p>Licking your lips, you prepare to enjoy the reward to all your hard work. </p>
		<hr>
		
		<<setEnemy $feeder_foodBoss>>
		<<set $e.special = "basement">> /* Let the fight know this is the basement version. */
		<<set $e.runnable = true>>
		<<startCombat>>
	<<else>>
		/* No other options atm */
	<</if>>
<</if>>


:: Search the Cupboards [feeder-expansion] {"position":"6500,800","size":"100,100"}
/* (Cupboards are option in witch's kitchen to find the black spice) */
<p>Snubbing the delicious-looking food, you begin digging through the cupboards for anything valuable...</p>
<p>In place of ingredients, most of the cupboards are filled completely full with walls of desserts and confectioneries. Every time you open a door, you're assaulted by a fresh mouthwatering assortment of sights and scents. A few contain non-food items like cutlery, plates, and cooking utensils, though they're all made of candy, so you're not sure you can fully classify them as //non-food//.</p>
<p>After a while of searching, you open up what looks and smells to be a spice cupboard, with multiple containers set out in a gingerbread spice rack. The large shakers are made of peppermint - which you're not sure is the best way to store spices without tainting them - each with different colored swirls. Thinking they might be color-coded based on contents, you grab the one made up of black-and-white swirls and peak inside.</p>
<p>The powder inside is inky black, and you experimentally dab a bit on your tongue. Almost immediately your mouth is drooling, and you feel a strong urge to return to one of those dessert-filled cupboards. Yep, this is the highly-appetizing spice the witch's notes talked about alright.</p>
<<getItem $feeder_addictiveSpice>>
<<questReward $feeder_questWitchSpice>>
<li>You can now cook ''appetizing meals''.</li>
You smile to yourself as you open up your pack, and almost drop the shaker on the floor as a voice startles you from behind.
<br><br>
"Think you can just help yourself to whatever you feel like, hm?" the witch asks, grinning a wicked grin. "Well, I've got plenty more things you greedily little thing can have - open wide! Hee hee hee!"
<hr>
<<setEnemy $gingerbreadWitch>>
<<set $e.special = "no captive">>
<<startCombat>>


:: Seaside Feast [feeder-expansion] {"position":"6600,1000","size":"100,100"}
<<set _stage = $eventCounterA>>
<<set _location = $eventCounterB>>
<<set _quest = $quests[setup.questIndex($feeder_questRaccoonFeast)]>>

/* Used in descriptions later */
<<set _warmThing = "the sun">>
<<if $daytime == "night">>
	<<set _warmThing = "the toasty cooking flames">>
<</if>>

<<if _stage == "before" or _stage == 0>>
	<<if _location == "ocean">>
		<p>The $npc1.species winces through $npc1.his teeth. "Let's do this some other time on dry land, eh? Don't wanna find out ya sea legs aren't up to snuff halfway through a big feast." </p>
		<p>"Though while you're here, why not grab something for the road?" </p>
		<<vendor "ocean raccoon">>
		<<store>>
		<<action "c" "ocean" "Done" "Goodbye ocean vendor">><</action>>
	<<else>>
		<<if $gld < 100>> /* Player doesn't have enough gold (technically costs come to 110 but 100 is a nicer number :p) */
			<p>You plop yourself onto a stool, eager to prove yourself. You give the $npc1.species a look, and $npc1.he nods. </p>
			<p>"Ya ready, then?" $npc1.he chuckles grabbing $npc1.his knife and cutting board. You nod, and $npc1.he smiles, leaning over the counter with $npc1.his palm outstretched. "Well, there is the small matter o' payment... Don' wanna really have ta bring it up, but I can't afford to go outta pocket if ya can't finish it all, now can I?" </p>
			<p>Your gold clatters into $npc1.his $npc1.hand as you empty your whole coin purse, and $npc1.he takes a moment to count it all, $npc1.his smile turning to a polite grimace. "That's... not exactly enough to cover it, sorry," $npc1.he says, handing the gold back to you. "Come back when you've got the cash. Don't worry, I'm not goin' anywhere." </p>
			<<if $gld < 20>>
				<p>"I would ask if ya wanted to buy anything, but well..." </p>
				
				<<action "c" "beach" "Oh..." "Goodbye beach vendor">><</action>>
			<<else>>
				<p>"While ya here, maybe ya wanna buy something a lil smaller?" </p>
				
				<<vendor "beach raccoon">>
				<<store>>
				<<action "c" "beach" "Done" "Goodbye beach vendor">><</action>>
			<</if>>
		<<else>> /* Player has enough money */
			<p>You plop yourself onto a stool, eager to prove yourself. You give the $npc1.species a look, and $npc1.he nods. </p>
			<p>"Ya ready, then?" $npc1.he chuckles grabbing $npc1.his knife and cutting board. You nod, and $npc1.he smiles, leaning over the counter with $npc1.his palm outstretched. "Well, there is the small matter o' payment... Don' wanna really have ta bring it up, but I can't afford to go outta pocket if ya can't finish it all, can I?" </p>
			<p>Your gold clatters into $npc1.his $npc1.hand and $npc1.he takes a moment to count it all. "Looks good ta me!" </p>
			<<if _quest.triedAndFailed == true>> /* Player failed their previous attempt at this */
				<p>As $npc1.he sharpens $npc1.his knives $npc1.he gives you a wary glance. "Reckon ya can take it, this time? Don't really wanna see a repeat of last time..." </p>
			<<elseif $sto < 50 >> /* Way off the 133 requirement */
				<p>$npc1.He goes too and fro readying up ingredients, before giving you a once-over and wincing. "Ya really sure ya wanna go through with this, $p.buddy? This isn't some regular ol' feast..." </p>
			<<else>>
				<p>$npc1.He goes too and fro readying up ingredients, "Ya ready for this? Last chance to back down, if not." </p>
			<</if>>
			
			<<action "w" "yes" "Yes" "Seaside Feast">>
				<<set $eventCounterA = "start">><</action>>
			<<action "e" "no" "No" "Seaside Feast">>
			<<set $eventCounterA = "decline">><</action>>
		<</if>>
	<</if>>

<<elseif _stage == "decline">>
	<p>$npc1.He chuckles to $npc1.himself, "Fair enough! Can I get ya somethin' a lil less sizeable while ya here?" </p>
	
	<<vendor "beach raccoon">>
	<<store>>
	<<action "c" "beach" "Done" "Goodbye beach vendor">><</action>>

<<elseif _stage == "start">>
	<<doGld -100>>
	
	<p>In a blur of speed, flashes of knifemanship, and the hiss of sizzling oil, the $npc1.species gets to preparing all the dishes at once. You're content to sit and watch $npc1.his work closely, and in almost no time at all $npc1.he's bringing you the first serving. </p>
	<<if _quest.triedAndFailed == true>>
		<p>"Here's hopin' ya fare better than last time, eh?" </p>
	<</if>>
	
	<<set _quest.roundsLeft = ["rice", "shrimp", "calamari", "sushi"]>>
	<<set _quest.triedAndFailed = false>>
	
	<<action "c" "next" "It begins..." "Seaside Feast">>
		<<set $eventCounterA = "newDish">>
	<</action>>

<<elseif _stage == "newDish">>
	<<set _quest.currentDish = _quest.roundsLeft.pluck()>>
	
	/* Narrate each dish */
	<<switch _quest.currentDish>>
		<<case "rice">>
			<p>The $npc1.species sets down a steaming bowl of fluffy rice in front of you, delicately topping it with an herb garnish placed perfectly in the center. </p>
		<<case "shrimp">>
			<p>The $npc1.species lays out a ringed platter of jumbo, deep fried shrimp fresh from the pan. The golden-brown pieces of crispy seafood are arranged around a generously sized pot of dip in the middle. </p>
		<<case "calamari">>
			<p>Scooped straight out of the oil, the $npc1.species plates up the fried calamari, adds the creamy dipping sauce, then sets it down on the counter in front of you. </p>
		<<case "sushi">>
			<p>You watch the $npc1.species rolling up each sushi roll with surprising dexterity before $npc1.he seasons them with seeds and sauce, then dishes them up to you. </p>
	<</switch>>
	
	<<action "c" "food" "Eat!" "Seaside Feast">>
		<<set $eventCounterA = "eat">>
	<</action>>
	<<action "n" "surrender" "Give up" "Seaside Feast">>
		<<set $eventCounterA = "quit">>
	<</action>>

<<elseif _stage == "eat">>
	/* Narrate each dish */
	/* (currently using item eat for now) */
	
	<<switch _quest.currentDish>>
		<<case "rice">>
			<<set _item = $riceBowl>>
			<p>_item.itemUse</p>
			
			<<consume _item.eat _item.calories>> 
		<<case "shrimp">>
			<<set _item = $tempuraShrimp>>
			<p>_item.itemUse</p>
			
			<<consume _item.eat _item.calories>> 
		<<case "calamari">>
			<<set _item = $calamari>>
			<p>_item.itemUse</p>
			
			<<consume _item.eat _item.calories>> 
		<<case "sushi">>
			<<set _item = $sushiRoll>>
			<p>_item.itemUse</p>
			
			<<consume _item.eat _item.calories>> 
	<</switch>>
	
	<<if $alive>>
		<<if _quest.roundsLeft.length > 0>>
			<<action "c" "next" "Another!" "Seaside Feast">>
				<<set $eventCounterA = "newDish">>
			<</action>>
			<<action "n" "surrender" "Give up" "Seaside Feast">>
				<<set $eventCounterA = "quit">>
			<</action>>
		<<else>> /* That was the last dish */
			<<action "c" "next" "Another...?" "Seaside Feast">>
				<<set $eventCounterA = "victory">>
			<</action>>
		<</if>>
	<</if>> /* being dead is already handled later */

<<elseif _stage == "victory">>
	<p>Finishing the rest of a delicious mouthful, you let out a satisfied //UURP//. You wipe your mouth clean with the back of your $p.hand while glancing over to the $npc1.species, ready for whatever's next. Though instead of preparing another tasty dish of deceptively filling food, $npc1.he's stood casually leaning on the counter, watching you with a grin. </p>
	<p>"That's the last of it - good job!" $npc1.he says, patting your $waist belly rather strongly. "To tell ya the truth, I wasn' really expectin' ya to pull through. A promise is a promise though, and since ya proved ya can handle it I'll let ya in on what ya want to know..." </p>
	
	<<action "c" "next" "Next" "The art of the heft">>
		<<set $eventCounterA = 0>>
	<</action>>

<<elseif _stage == "quit">>
	<<if _quest.roundsLeft.length == 3>> /* Player quit early (either before eating or after one course) */
		<p>Your stomach is tied up in knots from nerves, and you're not sure how well you can eat in this state. You wave to the busy$npc1.species to get $npc1.his attention and tell $npc1.him you want to stop now. </p>
		<p>"Throwin' in the towel already?" $npc1.he shrugs. "Fair enough, though since I've already started cookin' I can't give ya yer gold back." </p>
	<<else>>
		<p>Unsure of how many more especially filling morsels you can manage, and a little nervous, you decide to stop while you still can. The $npc1.species's flurry of cooking calms down to a stop, and $npc1.he comes to rest on the counter. $npc1.He shrugs $npc1.his broad shoulders - if $npc1.he's disappointed, $npc1.he isn't really showing it. </p>
		
		<<if _quest.roundsLeft.length == 0>>
			<p>"Really? Ya were so close, too. Well, better to know ya limits. Can't say a lotta people these days do," $npc1.he says with a light chuckle. </p>
		<<else>>
			<p>"Good to know when ya've had enough, I s'pose," $npc1.he says, starting to clear up. </p>
		<</if>>
		
		<p>"Come on back any time ya wanna have another go," $npc1.he adds. "I'll be waitin'." </p>
		<p>You lean back in your stool and pat your $waist belly contently, happy to rest for a bit before you go. Between the nice fullness of your stomach, the warmth of _warmThing, and the gentle rushing of the waves, you almost nod off to sleep. Eventually you manage to haul yourself to your feet, yawning sleepily. </p>
	<</if>>
	
	<<set _quest.triedAndFailed = true>>
	
	<<action "c" "leave" "Leave" "Goodbye beach vendor">><</action>>
<</if>>

<<if !$alive>>
	<p>The feast is proving all too much. Breathing heavily, you rub your rock solid gut as you psyche yourself up to carry on. One more bite - surely you can manage that! You force yourself to swallow one more mouthful, failing to account for just how extra filling the $npc1.species's cooking is. You were struggling with just a mouthful before, so when that food hits your overstuffed belly feeling like you ate an entire meal, you're completely overwhelmed. Groaning, you roll back in your seat with your $waist belly clutched in both $p.hands, praying you don't explode. </p>
	<p>The $npc1.species notices you've had more than enough and sets aside your plate, chuckling. "Well $p.buddy, ya gave it a good shot," $npc1.he says, giving your overstuffed gut a couple of friendly pats a bit too hard for your liking. "Come back again when ya a bit better prepared to handle it." </p>
	<p>Unable to budge from your seat, you sit where you are, groaning. With the warmth of _warmThing on your $p.fur and the soft //hiss// of waves rolling in and out, you find your eyes sleepily drifting shut... </p>
	
	<<set _quest.triedAndFailed = true>>
	<<defeated "overeating">>
<</if>>


:: Species Editor [fixes-and-edits intro] {"position":"7200,1200","size":"200,100"}
/* This section is included as part of the character generation species editor */
/* It's only included during the character generation form of species editing - not the when editing at the cabal */
<<setPassageTitle "Edit Species">>

<<set _editingSpecies = clone($species)>> /* Make a copy so we aren't actually editing the core species */

/* Set up some things */
<<set _editingSpecies = setup.validateSpecies(_editingSpecies)>>
<<set _editingSpecies.speciesStats = clone(_editingSpecies.speciesStats)>> /* not sure if this is covered by the initial clone or not, so will do this just to be safe */

<<if $eventCounterB == "charGen">> /* Only display the species stat editor during character generation, not during Cabal editing */
	<<include "species editor - stats">>
	<hr>
<</if>>

<<include "species editor - terms">>

<<if $eventCounterB == "charGen" or $eventCounterB == "cabal">>
	<<action "sw" "spells" "Save species" "species editor - save" true>>
		<<setPopupTitle "Save species">>
	<</action>>
	<<action "se" "spells" "Load species" "species editor - load" true>>
		<<setPopupTitle "Load species">>
	<</action>>
<</if>>

/* Display actions */
<<if $eventCounterB == "charGen">>
	<<action "c" "next" "Done" "Begin your journey">>
		<<applyPlayerSpecies _editingSpecies true>>
	<</action>>
<<else>> /* Assume cabal editing */
	<<action "c" "next" "Confirm changes" "Change your body">>
		<<applyPlayerSpecies _editingSpecies false>>
		<<set $eventCounterA = "species selected">>
	<</action>>
<</if>>


:: Species Mod Toggles [mod-support fixes-and-edits] {"position":"6200,1900","size":"200,100"}
/* Mod toggles, but exclusively for species-based mods */
<ul>
<li><label><<checkbox "$options.pokemodPlusEnabled" false true autocheck>> ''Pokemod Plus'' - Adds additional popular pokemon as species. Intended to be used in addition to Pokemod Core, but can be used separately.</label></li>
<li><label><<checkbox "$options.humans" false true autocheck>> ''Humans'' - Adds additional human based species.</label></li>
/* ADD ENTRIES ABOVE HERE */
</ul>


:: Species Modding - README [mod-support] {"position":"6200,1700","size":"200,100"}
There are two formats a species mod can take, a core mod, or an addon mod.

- Core Mod: Core mods overwrite the existing selection of species in the core game. There can only be one core mod active in a game at a time. You'll need a species to replace every single one of the base species (actually, that's not true - any species not changed will default to the base game one). Ideally, mods wouldn't have to be in this format, but this way ensures better compatibility with the core game and other mods.

- Addon Mod: Addon mods add extra species options ontop of whatever is already available. Any number can be active / inactive at a time, and they can also be freely toggled at any time. Ideally all species mods should take this form, the only exception being "total conversion" style species mods, which should be core.

================
	MAKING A CORE MOD
================
The core (heh) of a core species mod is made up of a core species patch passage that makes the  species changes, and a manual entry to the `Core Species Mod Options` passage to make it available as an option.

While they have a special selection method, you can also treat core species mods as regular mods, too - just make additional normal patchers as you would for any mod. This might be necessary if you want to change things such as NPC or enemy names to fit your species changes or the like.

== MAKING A CORE SPECIES PATCH ==
Create a passage that'll be used to patch in your core species edits.

At the start, enable your mod's option, for example: `<<set $options.pokemodCoreEnabled = true>>`.

After that, use `setup.registerSpecies()` to make changes to any of the game's core species. Anything you provide will be overlaid on top of the existing species, this means that it'll replace the values of properties that are already there, or introduce new ones if the species didn't originally have it.

An example for one species could look like this:
```
<<run setup.registerSpecies({
	id: "dolphin",
	species: "palafin",
	furBack: "blue", furBelly: "white", furHead: "blue",
	
	speciesStats: [7,5,5,5,3,3],
	
	waterType: true,
})>>
```
In this example, the dolphin species will be modified, with its `species`, `furBack`, `furBelly`, `furHead`, and `speciesStats` being replaced with these new values. Meanwhile a new, previously not existing, property - `waterType` - will also be added to the dolphin.

== ADDING THE OPTION ==
Find the `Core Species Mod Options` passage, and add the option for selecting your core species mod. The option consists of the display name, and the name of the core species patch passage for the mod.

An example would look like:
```
<<option "Pokemod Core" "pokemod core patch core species">>
```

===================
	MAKING AN ADDON MOD
===================
The 2 main steps for adding an addon mod are:
- Adding the species to the list
- Adding the option to select them

== ADDING TO THE SPECIES LIST ==
Within your patch passage, register your species using the specialised `setup.registerSpecies()` function. So long as your mod is enabled, the species will automatically occur wherever needed - for example as random species if it's part of one of the random tables (like `carnivore`), or in the start of game species selector if it's not got `noPlayer`.

An example would look like:
```
<<run setup.registerSpecies({
	id: "insectmod_butterfly",
	option: "insectSpeciesEnabled",
	/* etc */
})>>
```

== ADDING THE OPTION ==
Find the `Species Mod Toggles` passage, and add in a checkbox for toggling your species. This will automatically be included in the start of game screen, and the species mods section of the options menu. The recieverName value should be the option that governs the species mod.

An example would look like:
```
<li><label><<checkbox "$options.pokemodBonusEnabled" false true autocheck>> ''Pokemod Bonus'' - Adds additional popular pokemon as species. Intended to be used in addition to Pokemod Core</label></li>
```

=================
	DEFINING A SPECIES
=================
Since there's been some new properties added to species for this system, it's probably a good idea to both go over those additions, and explain the base game species formats, too.

== NEW ADDITIONS ==
These new elements have been added on via Fixes and Edits.

= Technical =
- `option` (optional) - The species will only be available when the given option is true. Format should be the string name of the option. Example: For your species to be available when `$options.mySpeciesMod` is `true`, then `option` should be `"mySpeciesMod"`.
- `noPlayer` (optional) - The species won't be available as an option for the player to use.
- `noRandom` (optional) - The species won't be available as a random option in when doing random all. Note: This flag isn't checked when doing normal randomisation of random `carnivore`s, `herbivore`s, or `dinosaur`s, because those flags are specifically for opting-in to being included in the random tables!
- `core` (optional) - Species is part of the core base game species. You shouldn't include this in mod-added species.

= Randomisation =
Think of these labels more as identifiers for *general* creatures. For example, use the `carnivore` tag to label carnivore species that you might expect to generally find around the place (would fit in the random table), rather than strictly as a label for their diet (for example dolphins are carnivorous, but you wouldn't give them the `carnivore` tag since you wouldn't expect them to be around outside of the sea, if that makes sense...).
- `herbivore` (optional) - If set to true, this species will be an option when the game makes a random herbivore NPC.
- `carnivore` (optional) - If set to true, this species will be an option when the game makes a random carnivore NPC.
- `dinosaur` (optional) - If set to true, this species will be an option when the game makes a random dinosaur NPC.
- `aquatic` (optional) - If set to true, this species will be an option when the game makes a random aquatic NPC.
- `dragon` (optional) - If set to true, this species will be an option when the game makes a random dragon NPC. Which I think is never.
- `flying` (optional) - If set to true, this species will be an option when the game makes a random flying NPC. Which I think is never.

= Misc =
- `adjective` - An animal adjective used to describe the species, like "bovine", "feline", etc. I prefer to keep to the more general terms rather than the specific ones, e.g. a tiger is "feline" rather than "tigrine", though end up using the specific forms when I don't know the general ones.
- `plural` (optional) - The plural form of the species. If not included, it'll just add an "s" onto the end of what's given for `species`.

== ORIGINAL ==
Most of the original properties are self-explanatory and/or explained by the species editor enough that I'll only cover the ones that are a bit more complex:
- `speciesStats` - The array of stat bonuses that player characters of this species have. The order is Strength, Agility, Endurance, Intelligence, Stomach, then Fat. The rule is that the bonuses (excluding fat) should total 25 points, distributed as you see fit - it's fairly arbitrarily done, so I suggest basing values off of a similar species from the core game. Fat is added as a small flavourful bonus (it doesn't count towards the 25 points), but is again done very arbitrarily.
- `speciesHeight` - The starting height for the species in inches. The gameplay limits for the heights in the game are 48 and 144, however you won't find any of the base species with sizes in this range. I suggest using the more modest values of a similar species that already exists, for both ease of creating and also for gameplay purposes - if one of the stats is already maxed out to one of the extremes, it robs the player for an opportunity to play out scenarios of growing/shrinking.


:: Spell Modding - README [mod-support] {"position":"6500,1700","size":"200,100"}
==============
	DEFINING SPELLS
==============

== SPELL PROPERTIES ==
= Technical =
- `id` - The unique identifier for the spell.
- `option` (optional) - The spell will only be available when the given option is true. Format should be the string name of the option. Example: For your species to be available when `$options.mySpellMod` is `true`, then `option` should be `"mySpellMod"`.
- `core` (optional) - Spell is a base game spell. You shouldn't include this in mod-added species.
- `unique` (optional) - When true, the spell will be stored in the player's spellbook as a spell object, rather than an ID. This allows you to store information that would be saved alongside the spell. I wouldn't recommend doing this, as it makes updating the spell a bit of a hassle - if you want to track spell-related variables, use global variables for that.

= Usability =
General usability:
- `ooc` (optional) - The spell can be used outside of combat.
- `combat` (optional) - The spell can be used inside of combat. Note that the game originally would allow any spell to be cast during combat - with these changes it's now necessary to include this flag.

Special usability:
- `availableCheck` - String of a setup function that'll be run to check if the player can cast the spell in the current circumstances - return `true` to allow, and `false` to deny. Bypasses `ooc` and `combat` checks. Example: If your function is `setup.myCheckFunction`, then you should use the value `"myCheckFunction"`.

= Costs =
The resource costs for casting the spell. If the player can't afford the listed costs, they won't be able to cast the spell. Costs will be deducted automatic upon casting the spell, unless the spell's `type` is `custom` - the custom cast logic will have to do that itself via `setup.consumeSpellCosts(spell)`.

- `cost` (optional) - The mana cost to cast the spell.
- `healthCost` (optional) - The cost in health to cast the spell.
- `staminaCost` (optional) - The cost in stamina to cast the spell. It's a percent, that's then reduced by the player's endurance stat like all other exertions in the game. Write it in terms of percent - for an ability that uses ten percent of the stamina bar, the value would be `10`.
- `staminaFixedCost` (optional) - As `staminaCost` except it doesn't get reduced by the player's stats - the cost is always a fixed percent.
- `goldCost` (optional) - The cost in gold to cast the spell.

= Custom Cast Logic =
A spell with a `type` of `"custom"` will use custom logic for its casting. Custom spells are required to narrate the spell casting and consume the casting resources themselves - these won't be done automatically.

- `castPassage` (optional) - Name of passage to include when casting the spell. Use that passage to handle the logic of casting the spell.
- `castFunction` (optional) - Name of setup function to run when casting the spell. Use that function to handle the logic of casting the spell.

If a spell has neither of these properties, the game will fall back to running the "Custom Spell Logic" passage - if not using these properties, you must include your logic in that passage.

= Empower =


:: The art of the heft [feeder-expansion cutscene] {"position":"6700,1000","size":"100,100"}
/* This passage should be given the `cutscene` tag! */

<<switch $eventCounterA>>
	<<case 0>>
		<p>Offering a strong arm, the $npc1.species helps heft you up off your stool and beckons you follow $npc1.him behind the counter. You plod along behind $npc1.him, your excitedness at learning new cooking techniques helping to balance out your lethargy from the heavy feast digesting in your gut. </p>
		<p>$npc1.He guides you around $npc1.his humble setup, lazily munching on a few mouthfuls of $npc1.his own goods as $npc1.he does so. $npc1.He sets you out a copy of $npc1.his utensils so you can follow along as $npc1.he happily explains $npc1.his cooking techniques. </p>
		<p>//"Now, I know it ain't exactly part of the cookin', but any self-respectin' chef needs good tools! Keep ya knives nice n' sharp and..."// </p>

	<<case 1>>
		<<doTime 60>>
		
		<p>//"Now everyone knows when ya batterin' yer go powder mix, then wash, but why stop at jus' the one pass? Double the layerin', double the tastin', I always say. 'Course you could go fer even more but..."// </p>
	<<case 2>>
		<<doTime 60>>
		
		<p>//"Really not hard to get real big, quality ingredients nowadays. Don't settle for anythin' but the best n' freshest. Yer'll be trippin' over 'em if ya go lookin' for 'em anyway. When I'm not catchin' my own, I head t'..."// </p>
	<<case 2>>
		<<doTime 60>>
		
		<p>//"Ya'd be surprised how much ya can manage to pack int' a single meal, but ya gotta be careful. Don't want someone up 'n explodin' from one bite, do we? So make sure..."// </p>
	<<case 3>>
		<<doTime 60>>
		
		<p>//"... aaaand, that's that! Phew! Go on then, show me what yer learned."// </p>
	<<default>> /* Final */
		<<doTime 60>>
		<p>Sweating under the sizzling heat of the flame, you toil away at your own seafood dish. You put absolutely everything you've learned in the past few hours into practice - prepwork, cooking, and attitude. You can feel the $npc1.species watching you over your shoulder as you work, finally clapping you hard on the back once you finish dishing up. </p>
		<p>$npc1.He takes it from you, and your body swells with anticipation as $npc1.he takes a bite. "Wew!" $npc1.he exclaims, thumping his sizeable gut. "Yer got the fillin' part down, that's fer sure!" </p>
		<p>"Here ya go, it's only fair ya get to enjoy the fruits of ya labor," $npc1.he says, returning the dish to you with a wink. </p>
		
		<<getItem $feeder_mealMeatHefty>> /* player gets the item they made for practice */
		
		<p>"Yer a good student, or I'm a good teacher. Heh! 'm surprised ya picked things up so fast..." with a big yawn, $npc1.he settles down onto one of the stools. "Now that's done, I think I deserve a good nap. Been a pleasure to work with a fellow chef - maybe next time you'll be the one teachin' me something, eh?" </p>
		
		<<questReward $feeder_questRaccoonFeast>>
		<li>You can now cook ''hefty meals''.</li>
		
		<<set $eventCounterA = "done">>
<</switch>>

/* Give options */
<<if $eventCounterA == "done">>
	<<action "c" "leave" "Thanks for the insights!" "Goodbye beach vendor">><</action>>
<<else>>
	<<set _affirmation = either("Uh huh...", "Oh of course...", "Makes sense...", "I see...", "I'd never have thought of that...", "Interesting...")>>
	
	<<action "c" "next" _affirmation "The art of the heft">>
		<<set $eventCounterA += 1>>
	<</action>>
<</if>>


:: To Go Counter [feeder-expansion] {"position":"6500,600","size":"100,100"}
A few portly furs-on-the-go come and go from a counter in the corner of the room, where a tired waitress is constantly handing overly neatly-packaged boxes of food.

<<store>>
<<action "c" "leave" "Done" "Restaurant">><</action>>
/* Can't be named using the normal feeder expansion formatting because the passage names are displayed to the player! */


:: Your ultimate creation! [feeder-expansion cutscene] {"position":"6500,200","size":"100,100"}
/* This passage should be given the `cutscene` tag! */

<<set _stage = $eventCounterA>>
<<set _quest = $quests[setup.questIndex($feeder_questUltimateCreation)]>>

<<switch _stage>>
	<<case 0>> /* First */
		<p>Reading through your lengthy recipe, you begin unpacking all the utensils and ingredients you're going to need. Soon every surface of the kitchen around you is covered in things, spilling out over onto the floor as well. With every one of the instruments with which to create your masterpiece assembled, your heart is racing with excitement. You almost don't know where to get started, and after quickly checking and then re-checking your convoluted notes, you get working on what you //think// is the first step. </p>
		
		<<action "c" "next" "Next" "Your ultimate creation!">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<case 1>>
		<<doTime 60>>
		
		<p>The kitchen is filled with activity and a cacophony of mouthwatering scents. Pans packed to overflowing with mostly meats sizzle away, trays of baked goods are swapped for others inside the roaring oven, and partly-prepped goods litter the sides. The first few parts of your masterpiece are already being assembled on the table, though there's still a lot to go before your vision is realised. </p>
		
		<<action "c" "next" "Next" "Your ultimate creation!">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<case 2>>
		<<doTime 60>>
		
		<p>The heat is almost unbearable, but what great artist doesn't suffer for their art? You finish the first and biggest layer of what will be your multi-tiered masterpiece, troweling out a few bowls of blueberry barbecue sauce to serve as an //inspired// filling between layers. </p>
		
		<<action "c" "next" "Next" "Your ultimate creation!">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<case 3>>
		<<doTime 60>>
		
		<p>Another layer finished now. You make sure to leave a big cavity in the middle of the chocolate battered fish ring, so you can pour in the heavy pot of beetroot custard. You can vividly picture the awe and delight the diner will have on their face when they happen upon //that// foodtastic bomb mid-meal. It's truly genius! </p>
		
		<<action "c" "next" "Next" "Your ultimate creation!">>
			<<set $eventCounterA += 1>>
		<</action>>
	
	<<case 4>> /* last of the normal progression */
		<<doTime 60>>
		
		<p>With the final few layers of the towering feast complete, all that's left is the decorating. It takes pipe after pipe of frosting to contain the whole thing, and even more random assortments of toppings to decorate it with. You get creative with both the ingredients and the patterning, pasting on so many toppings is such wonderful combinations that the whole masterpiece is buried beneath a layer of toppings in multiple collections of colorful configurations. Then, with a lot of stretching and standing on tiptoes, you just about manage to gently place the singular cherry on top. </p>
		<p>With an exhausted sigh, you take a step back to admire the fruits of your labor. The grand feast - your magnum opus - towers up taller than you. Every layer, upwards and inwards, an indescribable combination of foods, flavors, and textures, unbound by those restrictive rules of //convention//. It's a mouthwatering sight to behold, and mouths will water the world over once you unleash it to the public! But first, there's one last thing that needs to be done... </p>
		
		<<removeItem $feeder_ultimateRecipe>>
		
		<<action "c" "spectrumGem" "The finishing touch..." "Your ultimate creation!">>
			<<set $eventCounterA = "penultimate">>
		<</action>>
	
	<<case "penultimate">> /* last passage before combat starts */
		<p>You crack the spectrum gem in your $p.hand, sprinkling a generous dusting of the rainbow glitter across the whole feast. The glittering rainbow of sparkling toppings truly completes the masterpiece - what wonders that'll do for the mouthfeel! As you bask in the glory of your creation, you can feel yourself almost welling up. While you wonder what you're going to do next, the whole tower shudders. All you can do is watch wide-eyed as it shudders again, tendrils of food extending out of it and slapping down on the table as it starts to move on its own accord. </p>
		<p>''//IT'S ALIVE!//'' </p>
		
		<<action "c" "attack" "Uh oh..." "Your ultimate creation!">>
			<<set $eventCounterA = "final">> /* will trigger `default` */
		<</action>>
	
	<<default>> /* final */
		<p>With one great swipe of a foody tendril, the abomination sends bowls and cutlery smashing to the ground, before throwing itself off the table towards you. You're frozen to the spot at the sight of what you've created, as it splats onto the kitchen floor, slowly dragging itself ever closer. Before you can regain your wits, the writhing abomination of food has blocked off your exit. The pile leans over forwards, pointing its peak and a number of tendrils towards one destination: your mouth. </p>
		
		<hr>
		<<set $feeder_ultimateMonsterAlive = true>>
		<<setEnemy $feeder_foodBoss>>
		<<set $e.special = "kitchen">> /* Let the fight know this is the kitchen version, rather than the basement version. */
		<<startCombat>>
<</switch>>


:: downtime forecast [downtime-mod] {"position":"6100,1100","size":"100,100"}
<<set _intendedDays = $downtime_optionsSelected.days>>
<<if _intendedDays < 1>>
	<<set _intendedDays = 1>>
<</if>>

<<set _eatCostDaily = setup.downtime_getDailyEatCost()>>
<<set _eatCostTotal = _eatCostDaily * _intendedDays>>

<<set _dailyCalories = setup.downtime_getDailyCalories()>>
<<set _dailyFatLossToTraining = 0>>

<<if setup.downtime_isTraining()>>
	<<set _dailyFatLossToTraining = setup.downtime_getTrainingFatPerDay()>>
<</if>>

<<set _dailyFatChange = _dailyCalories - _dailyFatLossToTraining>>
<<set _totalFatChange = _dailyFatChange * _intendedDays>>

<<set _dailyTrainingResults = setup.downtime_calculateTrainingResults(setup.downtime_getTrainingFatPerDay(), $downtime_optionsSelected.training)>> /* Will just multiply the values when it comes time to display them... */
<<set _dailyStomach = 0>>
<<if setup.downtime_isStomachTraining()>>
	<<set _stretchCalcResults = setup.downtime_calculateStomachStretch($downtime_stretchPerDay, $status.stomachStretch)>>
	<<set _dailyStomach = _stretchCalcResults[0]>>
<</if>>

<<set _totalStomach = 0>> /* Need to fully calculate this rather than merely multiplying _dailyStomach */
<<if setup.downtime_isStomachTraining()>>
	<<set _stretchCalcResults = setup.downtime_calculateStomachStretch($downtime_stretchPerDay * _intendedDays, $status.stomachStretch)>>
	<<set _totalStomach = _stretchCalcResults[0]>>
<</if>>

<u><b>Per Day</b></u><br>
<ul>
<<if _eatCostDaily != 0>>
	<li>Gold Cost: <<print _eatCostDaily>></li>
<</if>>

<li>Fat Change: <<print setup.downtime_roundToDecimalPlace(_dailyFatChange, 3)>></li> /* There's always going to be fat change */

<<if _dailyTrainingResults.strength > 0>>
	<li>Strength: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.strength, 2)>></li>
<</if>>
<<if _dailyTrainingResults.agility > 0>>
	<li>Agility: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.agility, 2)>></li>
<</if>>
<<if _dailyTrainingResults.endurance > 0>>
	<li>Endurance: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.endurance, 2)>></li>
<</if>>
<<if _dailyTrainingResults.intelligence > 0>>
	<li>Intelligence: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.intelligence, 2)>></li>
<</if>>
<<if _dailyStomach > 0>>
	<li>Stomach: _dailyStomach</li>
<</if>>
</ul>

<u><b>In Total</b></u><br>
<i>(Information assumes that everything goes to plan)</i>
<ul>
<<if _eatCostTotal != 0>>
	<li>Gold Cost: _eatCostTotal</li>
<</if>>

<li>Fat Change: <<print setup.downtime_roundToDecimalPlace(_totalFatChange, 3)>></li>

<<if _dailyTrainingResults.strength > 0>>
	<li>Strength: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.strength * _intendedDays, 2)>></li>
<</if>>
<<if _dailyTrainingResults.agility > 0>>
	<li>Agility: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.agility * _intendedDays, 2)>></li>
<</if>>
<<if _dailyTrainingResults.endurance > 0>>
	<li>Endurance: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.endurance * _intendedDays, 2)>></li>
<</if>>
<<if _dailyTrainingResults.intelligence > 0>>
	<li>Intelligence: <<print setup.downtime_roundToDecimalPlace(_dailyTrainingResults.intelligence * _intendedDays, 2)>></li>
<</if>>
<<if _totalStomach > 0>>
	<li>Stomach: _totalStomach</li>
<</if>>
</ul>


:: downtime patch and update [downtime-mod] {"position":"6000,1200","size":"100,100"}
<<set _PATCHVERSION = 1>> /* Update this to reflect most recent version */

<<if $downtimeVersion == null>>
	<<set $downtimeVersion = 0>>
<</if>>

<<if $downtimeVersion < _PATCHVERSION >>
	<<set setup.modUpdated = true>>
	<<set setup.modUpdatedList.push("Downtime")>>
    
    /* Version 1 Patch */
    <<if $downtimeVersion < 1>>
    	/*nothing lol*/
        <<set $downtimeVersion = 1>>
    <</if>>
<</if>>
<<include "downtime tuning">>


:: downtime tuning [downtime-mod] {"position":"6000,1300","size":"100,100"}
/* TODO:
- Some of these values will need to be edited if/when adding tuning for base game values
*/

/* TRAINING*/
/* Minutes spent on training for each day in downtime */
/* With normal endurance + exercise it usually works out to 1:1 minutes spent working out vs resting. 8 total hours dedicated to training per day seems reasonable, which works out to 4 hours actually spent training. However, studying doesn't have the stamina restrictions, so we bump up the training time a bit to try and meet in the middle. */
<<set $downtime_trainMinutes = 360>>

/* Rate fat is lost per minute of training */
<<set $downtime_trainFatLoss = 0.1>> /* 0.1 matches in-game conversions */

/* Amount main stat increases per minute of training */
<<set $downtime_trainPrimaryRate = 0.01>> /* 0.01 matches in-game training rates */

/* Amount secondary stat increases per minute of training (Endurance, when running track or lifting weights) */
<<set $downtime_trainSecondaryRate = 0.0033>> /* 0.0033 mostly matches in-game training rates */

/* EATING */
/* Gold cost for each unit of Eat */
<<set $downtime_eatCost = 0.5>> /* 0.5 roughly matches best items and restaurant costs */

/* Daily eat volumes for any of the non-scaled eat options */
<<set $downtime_fixedEatAmounts = {
	normal: 20,
}>>

/* Calorie values per Eat for each diet option */
<<set $downtime_dietCalories = {
	healthy: 0.5,
	mixed: 0.625,
	fattening: 0.75
}>>

/* MISC */
/* Limit to how long one length of downtime can go on for, as a safety cap in case something goes wrong */
<<set $downtime_daysCap = 28>>

/* Amount of fat lost per minute due to metabolism */
<<set $downtime_metabolismRate = 0.004>> /* loss of 0.004 matches base game rates */

/* Values used by the basegame stretch calculations */
<<set $downtime_stretchMinutes = 500>>
<<set $downtime_stretchCap = 120>>

/* Number of minutes per day that stomach is counted as stretched out for per day. */
/* In normal gameplay it takes ~10 hours for maxed stomach to drop below 100%. Since it's easy to keep yourself manually topped up, we'll throw in a couple bonus hours to simulate a dedicated player doing that */
<<set $downtime_stretchPerDay = 720>>


:: feeder crafting objects [feeder-expansion] {"position":"6300,500","size":"100,100"}
/*
quests: [] //variables of quests to check. Only available when all provided quests are completed
keyItems: [] // Requires all quest items to be possessed
items: {
	"itemId": amount // Requires items of given amount to craft. `itemId` should be the items variable
}

name // Name to use for item. If not provided, will default to using item's name
description // description to use for the item. If not provided, will use item's description

passage // completion moves to passage

itemId // Adds item on completion
amount // number of items to give. Optional, defaults to 1

time // how long it takes to craft. defaults to 15 minutes

noSubstitutions // If true, player can't use `other` ingredients as substitutions for ingredients

icon
*/

/* Standard meals */
<<set $feeder_craftMealMeat = {
	provisions: {
		meat: 2
	},
	itemId: "$feeder_mealMeat",
}>>
<<set $feeder_craftMealVeg = {
	provisions: {
		veg: 2
	},
	itemId: "$feeder_mealVeg",
}>>
<<set $feeder_craftMealDessert = {
	provisions: {
		dessert: 2
	},
	itemId: "$feeder_mealDessert",
}>>

/* High-calorie meals */
<<set $feeder_craftMealMeatCalorific = {
	provisions: {
		meat: 2
	},
	items: {
		"$sManaPotion": 1
	},
	description: "A meaty meal marinaded in magical mana potion to make it heavier on the calories. Fat translates to mana, so it makes sense that it works the other way, right?",
	itemId: "$feeder_mealMeatCalorific",
}>>
<<set $feeder_craftMealVegCalorific = {
	provisions: {
		veg: 2
	},
	items: {
		"$sManaPotion": 1
	},
	description: "A veggie variety glazed with mana potion to make it heavier on the calories. Fat translates to mana, so it makes sense that it works the other way, right?",
	itemId: "$feeder_mealVegCalorific",
}>>
<<set $feeder_craftMealDessertCalorific = {
	provisions: {
		dessert: 2
	},
	items: {
		"$sManaPotion": 1
	},
	description: "A selection of desserts with mana potion mixed into the cream and batter to make it heavier on the calories. Fat translates to mana, so it makes sense that it works the other way, right?",
	itemId: "$feeder_mealDessertCalorific",
}>>

/* Low-calorie meals */
<<set $feeder_craftMealMeatLowCal = {
	provisions: {
		meat: 2
	},
	items: {
		"$dietPill": 1
	},
	description: "A meaty meal no more calorific than a salad thanks to a dose of diet pill mixed in. You're pretty sure this isn't how low-calorie food is normally made, but this way doesn't compromise on the taste!",
	itemId: "$feeder_mealMeatLowCal",
}>>
<<set $feeder_craftMealVegLowCal = {
	provisions: {
		veg: 2
	},
	items: {
		"$dietPill": 1
	},
	description: "A veggie meal no more calorific than a salad thanks to a dose of diet pill mixed in. You're pretty sure this isn't how low-calorie food is normally made, but this way doesn't compromise on the taste!",
	itemId: "$feeder_mealVegLowCal",
}>>
<<set $feeder_craftMealDessertLowCal = {
	provisions: {
		dessert: 2
	},
	items: {
		"$dietPill": 1
	},
	description: "A selection of desserts no more calorific than a salad thanks to a dose of diet pill mixed in. You're pretty sure this isn't how low-calorie food is normally made, but this way doesn't compromise on the taste!",
	itemId: "$feeder_mealDessertLowCal",
}>>

/* Addictive */
<<set $feeder_craftMealMeatAddictive = {
	provisions: {
		meat: 3
	},
	keyItems: ["$feeder_addictiveSpice"],
	description: "An utterly irresistible meaty meal, thanks to an added pinch of craving-inducing spice.",
	itemId: "$feeder_mealMeatAddictive",
}>>
<<set $feeder_craftMealVegAddictive = {
	provisions: {
		veg: 3
	},
	keyItems: ["$feeder_addictiveSpice"],
	description: "An utterly irresistible veggie meal, thanks to an added pinch of craving-inducing spice.",
	itemId: "$feeder_mealVegAddictive",
}>>
<<set $feeder_craftMealDessertAddictive = {
	provisions: {
		dessert: 3
	},
	keyItems: ["$feeder_addictiveSpice"],
	description: "An utterly irresistible selection of desserts, thanks to an added pinch of craving-inducing spice.",
	itemId: "$feeder_mealDessertAddictive",
}>>

/* Hefty */
<<set $feeder_craftMealMeatHefty = {
	provisions: {
		meat: 6
	},
	itemId: "$feeder_mealMeatHefty",
	quests: ["$feeder_questRaccoonFeast"],
}>>
<<set $feeder_craftMealVegHefty = {
	provisions: {
		veg: 6
	},
	itemId: "$feeder_mealVegHefty",
	quests: ["$feeder_questRaccoonFeast"],
}>>
<<set $feeder_craftMealDessertHefty = {
	provisions: {
		dessert: 6
	},
	itemId: "$feeder_mealDessertHefty",
	quests: ["$feeder_questRaccoonFeast"],
}>>

/* Omni */
<<set $feeder_craftMealMeatOmni = {
	provisions: {
		meat: 6
	},
	items: {
		"$lManaPotion": 1
	},
	quests: ["$feeder_questUltimateCreation"],
	keyItems: ["$feeder_addictiveSpice"],
	itemId: "$feeder_mealMeatOmni",
}>>
<<set $feeder_craftMealVegOmni = {
	provisions: {
		veg: 6
	},
	items: {
		"$lManaPotion": 1
	},
	quests: ["$feeder_questUltimateCreation"],
	keyItems: ["$feeder_addictiveSpice"],
	itemId: "$feeder_mealVegOmni",
}>>
<<set $feeder_craftMealDessertOmni = {
	provisions: {
		dessert: 6
	},
	items: {
		"$lManaPotion": 1
	},
	quests: ["$feeder_questUltimateCreation"],
	keyItems: ["$feeder_addictiveSpice"],
	itemId: "$feeder_mealDessertOmni",
}>>

/* Quest / Special */
<<set $feeder_craftUltimateRecipe = {
	name: "Your magnum opus!",
	description: "Your mind runs wild with crazy ideas - blends of meat, veggie, and desserts. The ultimate meal. People the world over will speak in awe of the feast you're about to create!",
	provisions: {
		meat: 30,
		veg: 30,
		dessert: 30,
		other: 30,
	},
	items: {
		"$spectrumGem": 1
	},
	keyItems: ["$feeder_ultimateRecipe"],
	passage: "Your ultimate creation!",
	time: 0, /* Time is handled by the narration */
	noSubstitutions: true,
}>>
<<set $feeder_craftFoodBoss = {
	name: "Food Monstrosity",
	description: "Create another monstrous melding of meat, veggies, and desserts, only this time on purpose. Maybe you've developed a taste for it...?",
	provisions: {
		meat: 30,
		veg: 30,
		dessert: 30,
		other: 30,
	},
	items: {
		"$spectrumGem": 1
	},
	quests: ["$feeder_questUltimateCreation"],
	passage: "Recreating your ultimate creation!",
	time: 240,
	noSubstitutions: true,
}>>


<<set $feeder_craftOptions = [$feeder_craftMealMeat, $feeder_craftMealVeg, $feeder_craftMealDessert, $feeder_craftMealMeatCalorific, $feeder_craftMealVegCalorific, $feeder_craftMealDessertCalorific, $feeder_craftMealMeatLowCal, $feeder_craftMealVegLowCal, $feeder_craftMealDessertLowCal, $feeder_craftMealMeatAddictive, $feeder_craftMealVegAddictive, $feeder_craftMealDessertAddictive, $feeder_craftMealMeatHefty, $feeder_craftMealVegHefty, $feeder_craftMealDessertHefty, $feeder_craftMealMeatOmni, $feeder_craftMealVegOmni, $feeder_craftMealDessertOmni]>>


:: feeder enemies [feeder-expansion] {"position":"6100,400","size":"100,100"}
<<set $feeder_foodBoss = {
  Name: "Food abomination",
  name: "food abomination",
  Article: "The",
  article: "the",
  str: 30,
  agi: 30,
  int: 30,
  def: 6,
  maxhea: 600,
  lvl: 16,
  gld: 0,
  xp: 150,
  gender: "thing",
  item: "",
  itemChance: 0,
  damageResistance: ["bashing", "slashing", "piercing"],
  damageWeakness: [],

  voreable: true,
	weight: 6969420, /* Value not actually used, but is required for the Devour option to be available... even if it doesn't do anything that Wait doesn't already do... */
  runnable: false,

  ai: "feeder food boss ai",
	
	special: "kitchen",
	amountFed: 0,
	addictiveAdvantage: false,
	onlyBasicAttack: false,
	justAte: false,
	
	feedable: true,

}>>


:: feeder food boss ai [feeder-expansion] {"position":"6300,200","size":"100,100"}
<<set _weirdFood = either("beef and ale cheesecake", "sweet and sour waffles", "carrot cream", "jellied broccoli", "deep-fried cabbage", "whipped garlic cream", "vanilla mash potato")>>

/* The boss re-uses a lot of numbers for its attacks, so we'll declare them here for ease of adjusting if rebalancing is needed */
<<set _minStandardFeed = 10>>
<<set _maxStandardFeed = 30>>

<<switch $aiAction>>

/*===Description===*/
<<case "description">>
Your opponent is a large, living mound of food - a feast of flavour fusions that just shouldn't exist. It lurches around slowly, pulling itself along the ground with sloppy tendrils of food as it approaches you, desperate to be eaten.

/*===Attack actions===*/
<<case "attack">>
	<<set _foodStyle = either("calorific", "addictive", "hefty")>>
	<<set _random = random(1,3)>>
	
	/* Calculate if would use a special attack */
	<<set _specialAttackChance = 100-(($agi+$int+$dodge)-($e.agi+$e.int))>>
	<<if _specialAttackChance < 25>><<set _specialAttackChance = 25>><</if>> /* Since players always have a 25% chance of failing a dodge */
	
	<<if $e.addictiveAdvantage == true>>
		<<set _specialAttackChance += 75>>
	<</if>>
	
	<<set _cram = 0>>
	<<set _cramMult = 1>> /* Used for Hefty food to make it more filling while still only using a normal amount of resources */
	<<set _calorieMult = 0.75>>
	
	<<set $e.justAte = false>>
	
	<<if $grapple > 0>>
		<<if _foodStyle == "calorific">>
			<li>Calorific Feed</li>
		<<elseif _foodStyle == "addictive">>
			<li>Appetizing Feed</li>
		<<else>>
			<li>Hefty Feed</li>
		<</if>>
		
		The abomination funnels its form into your mouth with surprising force. Your cheeks bulge out as you're forced to gulp down huge mouthfuls of _weirdFood. 
		<<switch _foodStyle>>
			<<case "calorific">>
				Your body starts feeling all slow and lethargic from all the calories that must've been packed into those particular mouthfuls...
				
				<<tempBuff "str" -2>>
				<<tempBuff "agi" -2>>
				<<tempBuff "int" -2>>
				
				<<set _cram = random(_minStandardFeed, _maxStandardFeed)>>
				<<set _calorieMult = 1.5>>
				
			<<case "addictive">>
				Something about the food awakens an aching craving for more, and you can't help but indulge it. 
				
				<<set _cram = random(_minStandardFeed, _maxStandardFeed) * 1.3>>
				<<set $e.addictiveAdvantage = true>>
			<<case "hefty">>
				There's something about the food that makes it unbelievably filling. You can feel your stomach swelling larger and heavier faster than food enters your mouth!
				
				<<set _cram = random(_minStandardFeed, _maxStandardFeed)>>
				<<set _cramMult = 3>>
		<</switch>>
	<<else>>
		<<if _random == 1 and $e.onlyBasicAttack == false and _specialAttackChance >= 33>> /* Decide if it'll make a grapple attack */
			<li>Grab</li>
			The mound of food leans back, then throws itself at you. 
			<<if setup.skillTest(_specialAttackChance, 0)>> /* special check for the attack. In this case the enemy succeeds at attacking */
				<<if $e.addictiveAdvantage == true>>
					Mind still addled by intense cravings for more, you welcome the food with open arms and open mouth. It crashes into you, climbing its bulk up your body and towards your drooling mouth. 
				<<else>>
					You're too slow to get out of the way in time, and it slams into you, knocking you off your feet. While you're still reeling from the blow, it's pulling its bulk on top of you, binding your limbs with sticky food tendrils. Soon your vision is eclipsed by food - food that's all sliding straight towards your mouth. 
				<</if>>
				
				<<set $grapple = $e.str * 3>>
			<<else>> /* player succeeds at avoiding */
				<<if $e.addictiveAdvantage == true>>
					Your hungry desire to indulge in more of the feast almost has you stand there and welcome it, but you manage to suppress the urges enough to stagger out of the way.
					
				<<else>>
					You dodge out the way in time and the feast splats against the wall, leaving a messy impression of its silhouette behind.
				<</if>>
			<</if>>
			
			<<set $e.addictiveAdvantage = false>>
			
		<<elseif _random == 2 and $e.onlyBasicAttack == false and _specialAttackChance >= 33>>/* Decide if it'll make a power attack */
			<<if _foodStyle == "calorific">>
				<li>Calorific Food Blast</li>
			<<elseif _foodStyle == "addictive">>
				<li>Appetizing Food Blast</li>
			<<else>>
				<li>Hefty Food Blast</li>
			<</if>>
			The pile of food bulks out like it means business, then starts swinging around and around, building up to a powerful attack. 
			<<if setup.skillTest(_specialAttackChance, 0)>> /* attack succeeds */
					<<if $e.addictiveAdvantage == true>>
						Overwhelmed by your burning desire for more food, you just stand there and take it, mouth wide. A huge chunk of food detaches from the creature, shooting straight into your hungry mouth. The surge of food only spends an unsatisfying brief moment on your taste buds before the momentum carries the stream careening straight into your stomach. 
					<<else>>
						A huge chunk of food detaches from its tip and careens through the air in a blur. The blast of food strikes you square in the mouth with such a force that the jet surges down your throat without so much as a gulp on your part. It feels like you've just been punched in the gut from the inside as the food smashes into your stomach. You barely even get a taste of whatever it was. 
					<</if>>
					<<set $e.addictiveAdvantage = false>>
					
					<<switch _foodStyle>>
						<<case "calorific">>
							As you start to recover from the impact, your body begins to feel tired and sluggish from all the calories that the boulder of food must've been packed with. 
							
							<<tempBuff "str" -2>>
							<<tempBuff "agi" -2>>
							<<tempBuff "int" -2>>
							
							<<set _cram = random(_minStandardFeed, _maxStandardFeed) * 2>>
							<<set _calorieMult = 1.5>>
							
						<<case "addictive">>
							What little you can taste of the food has you hungrily yearning for more. 
							
							<<set _cram = random(_minStandardFeed, _maxStandardFeed) * 2>>
							<<set $e.addictiveAdvantage = true>>
						<<case "hefty">>
							Even accounting for the size of that big boulder of food, there's no way you should be feeling as full as you are. 
							
							<<set _cram = random(_minStandardFeed, _maxStandardFeed) * 2>>
							<<set _cramMult = 3>>
					<</switch>>
					
			<<else>> /* attack fails */
				<<if $e.addictiveAdvantage == true>>
					A massive wad of food flings off of the creature and despite your burning desire for it to enter your mouth, you manage to force yourself to duck just in time. The projectile boulder of food explodes against the wall behind you, redecorating it with a wide coating of _weirdFood. 
				<<else>>
					A massive wad of food flings off of the creature, and you only just manage to duck in time. The projectile boulder of food explodes against the wall behind you, redecorating it with a wide coating of _weirdFood. 
				<</if>>
				
				<<set $e.addictiveAdvantage = false>>
			<</if>>
		<<else>> /* Make a basic attack */
			<<if _foodStyle == "calorific">>
				<li>Calorific Feed</li>
			<<elseif _foodStyle == "addictive">>
				<li>Appetizing Feed</li>
			<<else>>
				<li>Hefty Feed</li>
			<</if>>
			
			/* Make it so if addicted, eat more */
			<<set _cramBonus = 1>>
			<<if $e.addictiveAdvantage == true>>
				<<set _cramBonus = 1.5>>
			<</if>>
			
			<<if $e.addictiveAdvantage == true>>
				The abomination makes an unrelenting charge, hurling its delicious self and many lasing tendrils of food towards your drooling mouth. You know you should resist, but your cravings just can't say no to a bucketload of _weirdFood!
			<<else>>
				The abomination makes an unrelenting charge, throwing itself and so many lashing tendrils of freaky foods at you that you just can't avoid food being crammed down your throat. 
			<</if>>

			<<switch _foodStyle>>
				<<case "calorific">>
					All the calories hit you like a rock, and you find yourself feeling sleepier as your body struggles to digest it. 
					
					<<tempBuff "str" -2>>
					<<tempBuff "agi" -2>>
					<<tempBuff "int" -2>>
					
					<<set _cram = random(_minStandardFeed, _maxStandardFeed) * _cramBonus>>
					<<set _calorieMult = 1.5>>
					
				<<case "addictive">>
					Something about the food awakens an aching craving for more, and you can't help but indulge it. 
					
					<<set _cram = random(_minStandardFeed, _maxStandardFeed) * _cramBonus>>
					<<set $e.addictiveAdvantage = true>>
				<<case "hefty">>
					There's something about the food that makes it unbelievably filling. You can feel your stomach swelling larger and heavier faster than food enters your mouth!
					
					<<set _cram = random(_minStandardFeed, _maxStandardFeed) * _cramBonus>>
					<<set _cramMult = 3>>
			<</switch>>
		<</if>>
	<</if>>
	
	/* Handle everything universal */
	<<if _cram > 0>>
		<<if _cram > $e.hea>> /* Cap the amount fed based on the creature's remaining supply! */
			<<set _cram = $e.hea>>
		<</if>>
		
		/* remove it from the enemy's resources */
		<<eDamage _cram>>
		
		/* Adjust fillingness for hefty foods */
		<<set _cram = _cram * _cramMult>>
		
		/* Now calculate calories */
		<<set _calories = _cram * _calorieMult>>
		
		<<consume _cram _calories>>
		<<set $e.justAte = true>>
		<<set $e.amountFed += _cram>>
	<</if>>
	
	<<set $e.onlyBasicAttack = false>>
	

/*===Vore actions===*/
<<case "vore">>
	<<set $e.onlyBasicAttack = true>>
	<<enemyAction "attack">>

/*===Grapple Escape===*/
<<case "grapple succeed">>
You manage to break free from your enemy's grasp! 
<<include "player attack">>


/*===Grapple Fail===*/
<<case "grapple fail">>
You struggle against your captor and loosen their grasp, but you can't quite break free. 
<<enemyAction "attack">>


/*===Run success===*/
<<case "run succeed">>
	/* Can only flee from the basement version, so no need to check */
	<li>Escaped!</li>
	<<if $e.amountFed > 0>>
		<<if $ful > 55>>
			Realising you're not prepared to meet your admittedly delicious end at the hands of your own monstrous creation, you make a break for the exit, clutching your $waist belly in your hands as you go. 
		<<else>>
			Realising you're not prepared to meet your admittedly delicious end at the hands of your own monstrous creation, you make a break for the exit. 
		<</if>>
		
		The monster slorps along the ground after you, dragging itself along with messy food appendages that leave splattered food stains behind it. 
		<<if setup.testImmobile() >>
			Its pursuit is glacially slow, but then again so are you. It's like a chase scene unfolding in slow motion as you $walk up the stairs, the mass of food following behind you, slowly gaining inch by inch. By the time you reach the door it's almost on you, 
			<<if $fat <= 200>>
				and you just manage to slip through the doorway in time. 
			<<elseif $fat <= 400>>
				and you just about manage to squeeze yourself through the doorway in time. 
			<<else>>
				and your $fatness figure gets jammed in the doorway as you try to squeeze through. Thankfully, with your lardy body plugging the door and your mouth being on the opposite side to the abomination, it can't exactly continue to feed you, so you have all the time in the world to yank yourself free. 
			<</if>>
			You slam the door shut, and there's a wet thump as the monster throws itself against the door. Sauce and cream leaks through underneath, but it looks like the door will hold. You make sure to bolt it and prop up a chair against it for good measure, though.
		<<else>>
			Thankfully it's slow enough to outpace, and you reach the door into the kitchen before it catches you. You slam the door shut, bolt it, and prop up a chair against it for good measure.
		<</if>>
	<<else>> /* player hasn't even eaten anything */
		Losing your nerve at the sight of the foodie abomination you've created, you hastily turn back and slam the door, bolting it shut and propping up a chair against the door for good measure. 
	<</if>>

	<<endCombat>>
	<hr>
	<<include "Kitchen">>


/*===Run Fail===*/
<<case "run fail">>
<li>Run failed!</li>
The mass of food lurches in front of you, blocking your escape route. It's not done with you yet!
<<enemyAction "attack">>


/*===Surrender===*/
<<case "submit">>
	<<include "feeder resolve feeder boss">>

/*===You lose===*/
<<case "defeat">>
	<<include "feeder resolve feeder boss">>


/*===You win!===*/
<<case "victory">>
	<<include "feeder resolve feeder boss">>

<<case "feed">>
	<<if $feeder_itemFed.effect == "Eat">>
		With a forceful thrust you cram your $feeder_itemFed.name into the mass of food. All that seems to happen is that the food gets incorporated into the monster's form, patching up its wounds and bulking it out with more supplies.
		<<eHealth $feeder_fedAmount>>
		Uh oh...
		<<feeder_tryRemoveFedItem>>
	<<else>> /* Some special item */
		$feeder_itemFed.Name in hand, you realise that it likely won't have any effect on the giant living mound of food. Noticing your hesitation, the abomination lurches towards you for another \"attack\"!
	<</if>>
	<<enemyAction "attack">>

<<default>>
''Error in enemy ai''
	
<</switch>>


:: feeder item objects [feeder-expansion] {"position":"6200,500","size":"100,100"}
<<set $feeder_mealMeat = {
	Article: "A",
	article: "a",
	Name: "Meaty menagerie",
	name: "meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of meats. ",
	itemUse: "You munch through the meat-packed meal, savouring the variety of meaty goodness. ",
	flavors: ["meat"]
}>>
<<set $feeder_mealVeg = {
	Article: "A",
	article: "a",
	Name: "Veggie variety",
	name: "veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of fruits, veggies, and the like. ",
	itemUse: "You munch through the veggie-packed meal, savouring the variety of veggie goodness. ",
	flavors: ["veg"]
}>>
<<set $feeder_mealDessert = {
	Article: "A",
	article: "a",
	Name: "Dessert diversity",
	name: "dessert diversity",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A tasty platter featuring a nice assortment of different desserts. ",
	itemUse: "You munch through the dessert-packed meal, savouring the variety of sweet-tasting goodness. ",
	flavors: ["dessert"]
}>>
<<set $feeder_mealMeatAddictive = {
	Article: "A",
	article: "a",
	Name: "Appetizing meaty menagerie",
	name: "appetizing meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A full meal packed with an irresistible assortment of meats. ",
	itemUse: "After tasting just a single bite of the meat-packed meal, your mouth is watering hungrily. You wolf down the rest of the meaty goodness in no time at all, left only with an empty plate and a craving for more. ",
	flavors: ["meat"],
	addictive: true,
}>>
<<set $feeder_mealVegAddictive = {
	Article: "A",
	article: "a",
	Name: "Appetizing veggie variety",
	name: "appetizing veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A full meal packed with an irresistible assortment of fruits, veggies, and the like. ",
	itemUse: "After tasting just a single bite of the veggie-packed meal, your mouth is watering hungrily. You wolf down the rest of the veggie goodness in no time at all, left only with an empty plate and a craving for more. ",
	flavors: ["veg"],
	addictive: true,
}>>
<<set $feeder_mealDessertAddictive = {
	Article: "A",
	article: "a",
	Name: "Appetizing dessert diversity",
	name: "appetizing dessert variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 7,
	heal: 20,
	description: "A full meal packed with an irresistible assortment of different desserts. ",
	itemUse: "After tasting just a single bite of the dessert-packed meal, your mouth is watering hungrily. You wolf down the rest of the sweet-tasting goodness in no time at all, left only with an empty plate and a craving for more. ",
	flavors: ["dessert"],
	addictive: true,
}>>
<<set $feeder_mealMeatCalorific = {
	Article: "A",
	article: "a",
	Name: "Calorie-packed meaty menagerie",
	name: "calorie-packed meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 15, /* Mana from a small mana potion would make meal 5 calories extra, though buying calorie optimal food for the same cost as a small mana potion would normally yield 9 calories extra. Let's roughly split the difference and make it so it's +8 (1.5 calories per 1 eat, which is double normal unhealthy food!) */
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of calorie-laden meats. ",
	itemUse: "You munch through the meat-packed meal, savouring the variety of meaty goodness. You can practically feel the extra weight piling on, but all those extra calories make the meal oh so more satisfying. ",
	flavors: ["meat"]
}>>
<<set $feeder_mealVegCalorific = {
	Article: "A",
	article: "a",
	Name: "Calorie-packed veggie variety",
	name: "calorie-packed veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 15,
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of calorie-laden fruits, veggies, and the like. ",
	itemUse: "You munch through the veggie-packed meal, savouring the variety of veggie goodness. You can practically feel the extra weight piling on, but all those extra calories make the meal oh so more satisfying. ",
	flavors: ["veg"]
}>>
<<set $feeder_mealDessertCalorific = {
	Article: "A",
	article: "a",
	Name: "Calorie-packed dessert diversity",
	name: "calorie-packed dessert diversity",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 10,
	eat: 10,
	calories: 15,
	heal: 20,
	description: "A tasty platter featuring a nice assortment of different calorie-laden desserts. ",
	itemUse: "You munch through the dessert-packed meal, savouring the variety of sweet-tasting goodness. You can practically feel the extra weight piling on, but all those extra calories make the meal oh so more satisfying. ",
	flavors: ["dessert"]
}>>
<<set $feeder_mealMeatHefty = {
	Article: "A",
	article: "a",
	Name: "Hefty meaty menagerie",
	name: "hefty meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 18,
	eat: 35,
	calories: 26,
	heal: 70,
	description: "A full meal packed with a deceptively dense assortment of mouthwatering meats. ",
	itemUse: "You munch through the meat-packed meal, savouring the variety of meaty goodness. By the point you're gulping down your last mouthful, you feel like you've gone to town on a whole buffet. ",
	flavors: ["meat"]
}>>
<<set $feeder_mealVegHefty = {
	Article: "A",
	article: "a",
	Name: "Hefty veggie variety",
	name: "hefty veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 18,
	eat: 35,
	calories: 26,
	heal: 70,
	description: "A full meal packed with a deceptively dense assortment of mouthwatering fruits, veggies, and the like. ",
	itemUse: "You munch through the veggie-packed meal, savouring the variety of veggie goodness. By the point you're gulping down your last mouthful, you feel like you've gone to town on a whole buffet. ",
	flavors: ["veg"]
}>>
<<set $feeder_mealDessertHefty = {
	Article: "A",
	article: "a",
	Name: "Hefty dessert diversity",
	name: "hefty dessert diversity",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 18,
	eat: 35,
	calories: 26,
	heal: 70,
	description: "A tasty platter featuring a deceptively dense assortment of different desserts. ",
	itemUse: "You munch through the dessert-packed meal, savouring the variety of sweet-tasting goodness. By the point you're gulping down your last mouthful, you feel like you've gone to town on a whole buffet. ",
	flavors: ["dessert"]
}>>
<<set $feeder_mealMeatOmni = {
	Article: "A",
	article: "a",
	Name: "Ultimate meaty menagerie",
	name: "ultimate meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 25,
	eat: 35,
	calories: 52,
	heal: 70,
	description: "The ultimate in culinary perfection - a mouthwatering meal packed full with so much meat and extra calories that you'll always be craving more. ",
	itemUse: "Just one bite and you're lost in blissful meaty goodness. The next thing you know, you've eaten the whole thing, stuffed, satisfied, and salivating for more. ",
	flavors: ["meat"],
	addictive: true,
}>>
<<set $feeder_mealVegOmni = {
	Article: "A",
	article: "a",
	Name: "Ultimate veggie variety",
	name: "ultimate veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 25,
	eat: 35,
	calories: 52,
	heal: 70,
	description: "The ultimate in culinary perfection - a mouthwatering meal packed full with so much veggie goodness and extra calories that you'll always be craving more. ",
	itemUse: "Just one bite and you're lost in blissful veggie goodness. The next thing you know, you've eaten the whole thing, stuffed, satisfied, and salivating for more. ",
	flavors: ["veg"],
	addictive: true,
}>>
<<set $feeder_mealDessertOmni = {
	Article: "A",
	article: "a",
	Name: "Ultimate dessert diversity",
	name: "ultimate dessert diversity",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 25,
	eat: 35,
	calories: 52,
	heal: 70,
	description: "The ultimate in culinary perfection - a mouthwatering meal packed full with so much desserty goodness and extra calories that you'll always be craving more. ",
	itemUse: "Just one bite and you're lost in blissful desserty goodness. The next thing you know, you've eaten the whole thing, stuffed, satisfied, and salivating for more. ",
	flavors: ["dessert"],
	addictive: true,
}>>
<<set $feeder_mealMeatLowCal = {
	Article: "A",
	article: "a",
	Name: "Low-calorie meaty menagerie",
	name: "low-calorie meaty menagerie",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 3,
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of meats, with the added bonus of being no more calorific than a salad! ",
	itemUse: "You munch through the meat-packed meal, savouring the variety of meaty goodness. It's surprising how good something can taste with so little calories. ",
	flavors: ["meat"]
}>>
<<set $feeder_mealVegLowCal = {
	Article: "A",
	article: "a",
	Name: "Low-calorie veggie variety",
	name: "low-calorie veggie variety",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 3,
	heal: 20,
	description: "A full meal packed with a mouthwatering assortment of fruits, veggies, and the like, with the added bonus of being no more calorific than a salad! ",
	itemUse: "You munch through the veggie-packed meal, savouring the variety of veggie goodness. It's surprising how good something can taste with so little calories. ",
	flavors: ["veg"]
}>>
<<set $feeder_mealDessertLowCal = {
	Article: "A",
	article: "a",
	Name: "Low-calorie dessert diversity",
	name: "low-calorie dessert diversity",
	effect: "Eat",
	type: "food",
	icon: "restaurant",
	consume: true,
	useable: true,
	value: 6,
	eat: 10,
	calories: 3,
	heal: 20,
	description: "A tasty platter featuring a nice assortment of different desserts, with the added bonus of being no more calorific than a salad! ",
	itemUse: "You munch through the dessert-packed meal, savouring the variety of sweet-tasting goodness. It's surprising how good something can taste with so little calories. ",
	flavors: ["dessert"]
}>>

<<set $feeder_addictiveSpice = {
	Article: "A",
	article: "a",
	Name: "Black spice shaker",
	name: "Black spice shaker",
	effect: "quest",
	description: "A hefty shaker filled with a strange, almost pitch black substance. Just a pinch is all it takes to make a meal nigh-addictive. ",
	quest: true,
	icon: "healthPotion",
}>>

<<set $feeder_witchDiaryNotes = {
	Article: "The",
	article: "the",
	Name: "Witch's notes",
	name: "witch's notes",
	effect: "quest",
	description: "Hastily-copied notes from a witch's diary. It includes formulae and arcane notes, mostly revolving around the creation of addictive, highly fattening foods through both magical and mundane applications. Further inspection might reveal new techniques to you, if you can make sense of any of it. ",
	itemUse: "You pour through the notes, hoping to glean any insights from the witch's research...",
	quest: true,
	icon: "spells",
}>>

<<set $feeder_ultimateRecipe = {
	Article: "Your",
	article: "your",
	Name: "Ultimate recipe",
	name: "ultimate recipe",
	effect: "quest",
	description: "A multi-page recipe of your own design, for the greatest meal ever conceived! The ingredients list takes up over a page on its own, and there are so many concurrent steps of frying, baking, grilling, and boiling that even a team of chefs would struggle to keep up.",
	quest: true,
}>>


:: feeder patch and update [feeder-expansion] {"position":"6000,700","size":"100,100"}
<<set _PATCHVERSION = 2>> /* Update this to reflect most recent version */

<<if $feeder_expansionVersion == null>>
	<<set $feeder_expansionVersion = 0>>
<</if>>

/* Trigger Patches */
/* Early always patch */
<<include "feeder spell objects">>

<<if $feeder_expansionVersion < _PATCHVERSION>>
	<<set setup.modUpdated = true>> /* Flag that an update has happened */
	<<set setup.modUpdatedList.push("Feeder expansion")>> /* Add to list of updated mods */
	
	/* Perform version 1 patch */
	<<if $feeder_expansionVersion < 1>>
		
		<<include "feeder patch items">>

		<<include "feeder tuning">>
		<<include "feeder crafting objects">>
		<<include "feeder quest objects">>
		<<include "feeder item objects">>
		<<include "feeder enemies">>
		<<include "feeder patch inventory">>
	
		<<set $feeder_expansionVersion = 1>>
	<</if>>
    <<if $feeder_expansionVersion < 2>>
    	/* Update our spells in the player's spellbook to the new format */
        <<run setup.patchOldSpellbook(["feeder_conjureMeatMeal", "feeder_conjureVegMeal", "feeder_conjureDessertMeal", "feeder_conjureMeatMealAddictive", "feeder_conjureVegMealAddictive", "feeder_conjureDessertMealAddictive", "feeder_conjureMeatMealHefty", "feeder_conjureVegMealHefty", "feeder_conjureDessertMealHefty", "feeder_conjureMeatMealCalorific", "feeder_conjureVegMealCalorific", "feeder_conjureDessertMealCalorific", "feeder_conjureMeatMealOmni", "feeder_conjureVegMealOmni", "feeder_conjureDessertMealOmni"])>>
        
        <<set $feeder_expansionVersion = 2>>
    <</if>>
<</if>>

/* ALWAYS PATCHERS */
<<include "feeder patch npcs">>
<<include "feeder patch enemies">>


:: feeder patch enemies [feeder-expansion] {"position":"6000,800","size":"100,100"}
/* Make sure to run this after any changes to the core enemies (including using the hotfix to refresh their stats!) */
/* FOREST */
<<set $fatWolf.feedable = true>>
<<set $fatWolf.sto = 20>>
<<set $fatWolf.flavorWeakness = ["meat"]>>

<<set $obeseBear.feedable = true>>
<<set $obeseBear.sto = 30>>
<<set $obeseBear.flavorWeakness = ["dessert", "honey"]>>

<<set $fruitDryad.feedable = true>>
<<set $fruitDryad.sto = 20>>
<<set $fruitDryad.flavorWeakness = ["veg"]>>

/* TODO: Write up special version so will work okay
<<set $gingerbreadWitch.feedable = true>>
<<set $gingerbreadWitch.sto = 150>>
<<set $gingerbreadWitch.flavorWeakness = ["meat"]>>
*/
<<set $storeRoomOwner.feedable = true>>
<<set $storeRoomOwner.sto = 50>>
<<set $storeRoomOwner.flavorWeakness = []>>

/* CITY */
/* Sure, it costs more money to feed these enemies to defeat, but maybe somebody wants to do it anyway? */
<<set $drunk.feedable = true>>
<<set $drunk.sto = 20>>
<<set $drunk.flavorWeakness = ["booze"]>>

<<set $thief.feedable = true>>
<<set $thief.sto = 20>>
<<set $thief.flavorWeakness = []>>

<<set $takeoutTerror.feedable = true>>
<<set $takeoutTerror.sto = 50>>
<<set $takeoutTerror.flavorWeakness = []>>

/* GRASSLAND */
<<set $bloatedLion.feedable = true>>
<<set $bloatedLion.sto = 25>>
<<set $bloatedLion.flavorWeakness = ["meat"]>>

<<set $gorgedCheetah.feedable = true>>
<<set $gorgedCheetah.sto = 20>>
<<set $gorgedCheetah.flavorWeakness = ["meat"]>>

<<set $expandedElephant.feedable = true>>
<<set $expandedElephant.sto = 500>>
<<set $expandedElephant.flavorWeakness = ["veg"]>>

<<set $wildling.feedable = true>>
<<set $wildling.sto = 20>>
<<set $wildling.flavorWeakness = []>>

<<set $wildlingRitualist.feedable = true>>
<<set $wildlingRitualist.sto = 20>>
<<set $wildlingRitualist.flavorWeakness = []>>

<<set $wildlingShaman.feedable = true>>
<<set $wildlingShaman.sto = 45>>
<<set $wildlingShaman.flavorWeakness = ["meat"]>>

/* TODO: Write up special version so will work okay
<<set $wildlingShamanBoss.feedable = true>>
<<set $wildlingShamanBoss.sto = 65>>
<<set $wildlingShamanBoss.flavorWeakness = ["meat"]>>
*/

<<set $lizardWizard.feedable = true>>
<<set $lizardWizard.sto = 50>>
<<set $lizardWizard.flavorWeakness = ["veg"]>>

/* HILLS */
<<set $milkMachine.feedable = true>> /*Special case*/

<<set $meatMonster.feedable = true>> /*Special case*/

/* BEACH */
/* TODO: Decide on hydra */

<<set $waterElemental.feedable = true>> /*Special case*/

<<set $sandSnake.feedable = true>>
<<set $sandSnake.sto = 120>> /* Snakes can eat a lot! This is generous for the player */
<<set $sandSnake.flavorWeakness = ["meat"]>>

<<set $bubbleOrca.feedable = true>>
<<set $bubbleOrca.sto = 30>> /* Big, but already quite full of air */
<<set $bubbleOrca.flavorWeakness = ["meat"]>>

<<set $sphericalShark.feedable = true>>
<<set $sphericalShark.sto = 50>>
<<set $sphericalShark.flavorWeakness = ["veg"]>>

/* MOUNTAIN */
<<set $thinFur.feedable = true>>
<<set $thinFur.sto = 150>>
<<set $thinFur.flavorWeakness = []>>

<<set $toughFur.feedable = true>>
<<set $toughFur.sto = 120>>
<<set $toughFur.flavorWeakness = []>>

<<set $magicalFur.feedable = true>>
<<set $magicalFur.sto = 50>>
<<set $magicalFur.flavorWeakness = []>>

<<set $muscleFur.feedable = true>>
<<set $muscleFur.sto = 70>>
<<set $muscleFur.flavorWeakness = []>>

<<set $feederAnt.feedable = true>>
<<set $feederAnt.sto = 500>>
<<set $feederAnt.flavorWeakness = ["veg"]>>

<<set $manticore.feedable = true>>
<<set $manticore.sto = 250>>
<<set $manticore.flavorWeakness = ["meat"]>>

<<set $fatWyvern.feedable = true>>
<<set $fatWyvern.sto = 150>>
<<set $fatWyvern.flavorWeakness = ["meat"]>>

/* The base Snookums/Smarty texts kinda fit okay into the mold of defeating by overstuffing */
<<set $snookums.feedable = true>>
<<set $snookums.sto = 200>>
<<set $snookums.flavorWeakness = ["dessert"]>>

<<set $smarty.feedable = true>>
<<set $smarty.sto = 50>>
<<set $smarty.flavorWeakness = []>>

/* JUNGLE */
<<set $anaconda.feedable = true>>
<<set $anaconda.sto = 350>>
<<set $anaconda.flavorWeakness = ["meat"]>>

<<set $fatJaguar.feedable = true>>
<<set $fatJaguar.sto = 75>>
<<set $fatJaguar.flavorWeakness = ["meat"]>>

<<set $gluttonSeparatist.feedable = true>>
<<set $gluttonSeparatist.sto = 75>>
<<set $gluttonSeparatist.flavorWeakness = ["dessert"]>>

<<set $shamanBossNormal.feedable = true>>
<<set $shamanBossNormal.sto = 120>>
<<set $shamanBossNormal.flavorWeakness = ["dessert"]>>

<<set $gluttonSeparatistBoss.feedable = true>>
<<set $gluttonSeparatistBoss.sto = 75>>
<<set $gluttonSeparatistBoss.flavorWeakness = ["dessert"]>>


:: feeder patch inventory [feeder-expansion] {"position":"6000,1000","size":"100,100"}
<<set _itemsToPatch = [ $ampleApple, $apple, $bagOfCandy, $beefStew, $bigSteak, $bloatedBlueberry, $boxOfDonuts, $breadLoaf,  $cake, $calamari, $cheese, $cheeseburger, $chili, $coconut, $cookies, $cupcake, $friedChicken, $giganticGrape, $grapes, $hamHock, $hamSandwich, $jambalaya, $meatballSub, $milkBottle, $milkJug, $orange, $outrageousOrange, $plentifulPeach, $riceBowl, $oats, $profusePumpkin, $ridiculousRaspberry, $sausage, $sizableStrawberry, $steak, $strawberries, $sushiRoll, $tempuraShrimp, $waterFlask, $waterJug, $watermelon, $whoppingWatermelon, $wine]>>

<<for _itemBlueprintIndex, _itemBlueprint range _itemsToPatch>>
	/* Check if player has a copy of that item in their inventory */
	<<set _inventoryIndex = setup.hasItem(_itemBlueprint)>>
	
	<<if _inventoryIndex >= 0>>
		/* Update consumability where necessary */
		<<if _itemBlueprint.consume != null and _itemBlueprint.consume == true>>
			<<set $inventory[_inventoryIndex].consume = true>>
		<</if>>
		
		/* Add provisions score */
		<<if _itemBlueprint.provisions != null>>
			<<set $inventory[_inventoryIndex].provisions = _itemBlueprint.provisions>> /* I THINK it's right to use the object as-is rather than cloning the one used by the item blueprint */
		<</if>>
		
		/* Add flavours */
		<<if _itemBlueprint.flavors != null>>
			<<set $inventory[_inventoryIndex].flavors = _itemBlueprint.flavors>>
		<</if>>
	<</if>>
<</for>>


:: feeder patch items [feeder-expansion] {"position":"6000,900","size":"100,100"}
/* EDITS TO EXISTING ITEMS */
/* (note: Add consumable to all edible items!) */
<<set $ampleApple.provisions = {veg: 1}>>
<<set $ampleApple.flavors = ["veg"]>>
<<set $ampleApple.consume = true>>

<<set $apple.provisions = {veg: 1}>>
<<set $apple.flavors = ["veg"]>>

<<set $bagOfCandy.provisions = {dessert: 1}>>
<<set $bagOfCandy.flavors = ["dessert"]>>

<<set $beefStew.provisions = {meat: 3}>>
<<set $beefStew.flavors = ["meat"]>>
<<set $beefStew.consume = true>>

<<set $bigSteak.provisions = {meat: 3}>>
<<set $bigSteak.flavors = ["meat"]>>
<<set $bigSteak.consume = true>>

<<set $bloatedBlueberry.provisions = {veg: 1}>>
<<set $bloatedBlueberry.flavors = ["veg"]>>

<<set $boxOfDonuts.provisions = {dessert: 1}>>
<<set $boxOfDonuts.flavors = ["dessert"]>>
<<set $boxOfDonuts.consume = true>>

<<set $breadLoaf.provisions = {other: 1}>>
<<set $breadLoaf.flavors = []>>
<<set $breadLoaf.consume = true>>

<<set $cake.provisions = {dessert: 1}>>
<<set $cake.flavors = ["dessert"]>>
<<set $cake.consume = true>>

<<set $calamari.provisions = {meat: 7}>>
<<set $calamari.flavors = ["meat"]>>
<<set $calamari.consume = true>>

<<set $cheese.provisions = {other: 2}>>
<<set $cheese.flavors = ["cheese"]>>

<<set $cheeseburger.provisions = {meat: 1}>>
<<set $cheeseburger.flavors = ["meat"]>>

<<set $chili.provisions = {meat: 2}>>
<<set $chili.flavors = ["meat", "spicy"]>>
<<set $chili.consume = true>>

<<set $coconut.provisions = {other: 1}>>
<<set $coconut.flavors = ["dessert", "milk"]>>

<<set $cookies.provisions = {dessert: 1}>>
<<set $cookies.flavors = ["dessert"]>>

<<set $cupcake.provisions = {dessert: 1}>>
<<set $cupcake.flavors = ["dessert"]>>

<<set $friedChicken.provisions = {meat: 2}>>
<<set $friedChicken.flavors = ["meat"]>>

<<set $giganticGrape.provisions = {veg: 1}>>
<<set $giganticGrape.flavors = ["veg"]>>
<<set $giganticGrape.consume = true>>

<<set $grapes.provisions = {veg: 1}>>
<<set $grapes.flavors = ["veg"]>>
<<set $grapes.consume = true>>

<<set $hamHock.provisions = {meat: 2}>>
<<set $hamHock.flavors = ["meat"]>>
<<set $hamHock.consume = true>>

<<set $hamSandwich.provisions = {meat: 2}>>
<<set $hamSandwich.flavors = ["meat"]>>
<<set $hamSandwich.consume = true>>

<<set $jambalaya.provisions = {meat: 1, other: 1}>>
<<set $jambalaya.flavors = ["meat"]>>
<<set $jambalaya.consume = true>>

<<set $meatballSub.provisions = {meat: 1}>>
<<set $meatballSub.flavors = ["meat"]>>
<<set $meatballSub.consume = true>>

<<set $milkBottle.provisions = {other: 1}>>
<<set $milkBottle.flavors = ["milk", "drink"]>>
<<set $milkBottle.consume = true>>

<<set $milkJug.provisions = {other: 1}>>
<<set $milkJug.flavors = ["milk", "drink"]>>
<<set $milkJug.consume = true>>

<<set $orange.provisions = {veg: 1}>>
<<set $orange.flavors = ["veg"]>>
<<set $orange.consume = true>>

<<set $outrageousOrange.provisions = {veg: 1}>>
<<set $outrageousOrange.flavors = ["veg"]>>
<<set $outrageousOrange.consume = true>>

<<set $plentifulPeach.provisions = {veg: 1}>>
<<set $plentifulPeach.flavors = ["veg"]>>
<<set $plentifulPeach.consume = true>>

<<set $riceBowl.provisions = {other: 5}>>
<<set $riceBowl.flavors = []>>
<<set $riceBowl.consume = true>>

<<set $oats.provisions = {other: 1}>>
<<set $oats.flavors = ["veg"]>>
<<set $oats.consume = true>>

<<set $profusePumpkin.provisions = {veg: 4}>>
<<set $profusePumpkin.flavors = ["veg"]>>
<<set $profusePumpkin.consume = true>>

<<set $ridiculousRaspberry.provisions = {veg: 1}>>
<<set $ridiculousRaspberry.flavors = ["veg"]>>
<<set $ridiculousRaspberry.consume = true>>

<<set $sausage.provisions = {meat: 1}>>
<<set $sausage.flavors = ["meat"]>>
<<set $sausage.consume = true>>

<<set $sizableStrawberry.provisions = {veg: 1}>>
<<set $sizableStrawberry.flavors = ["veg"]>>
<<set $sizableStrawberry.consume = true>>

<<set $steak.provisions = {meat: 1}>>
<<set $steak.flavors = ["meat"]>>
<<set $steak.consume = true>>

<<set $strawberries.provisions = {veg: 1}>>
<<set $strawberries.flavors = ["veg"]>>
<<set $strawberries.consume = true>>

<<set $sushiRoll.provisions = {meat: 5, other: 2}>>
<<set $sushiRoll.flavors = ["meat"]>>
<<set $sushiRoll.consume = true>>

<<set $tempuraShrimp.provisions = {meat: 8}>>
<<set $tempuraShrimp.flavors = ["meat"]>>
<<set $tempuraShrimp.consume = true>>

<<set $waterFlask.flavors = ["water", "drink"]>>
<<set $waterFlask.consume = true>>

<<set $waterJug.flavors = ["water", "drink"]>>
<<set $waterJug.consume = true>>

<<set $watermelon.provisions = {veg: 2}>>
<<set $watermelon.flavors = ["veg"]>>
<<set $watermelon.consume = true>>

<<set $whoppingWatermelon.provisions = {veg: 4}>>
<<set $whoppingWatermelon.flavors = ["veg"]>>
<<set $whoppingWatermelon.consume = true>>

<<set $wine.provisions = {other: 1}>>
<<set $wine.flavors = ["booze", "drink"]>>
<<set $wine.consume = true>>


:: feeder patch npcs [feeder-expansion fixes-and-edits] {"position":"5900,800","size":"100,100"}
<<run setup.registerNPC("creatoriumTeacher", {
	name: "Opal",
    gender: "female",
    species: "magpie",
    mname: "Onyx",
})>>


:: feeder quest objects [feeder-expansion] {"position":"6300,400","size":"100,100"}
<<set $feeder_questRaccoonCook = {
	name: "Culinary Sampler",
	description: "The chef running the beachside restaurant wants a sample of your cooking! Bring them 1 //meaty menagerie//, 1 //veggie variety//, and 1 //dessert diversity// to find out if you've got what it takes!",
	completed: false,
	xp: 50,
	gold: 40,
}>>

<<set $feeder_questRaccoonFeast = {
	name: "A Hefty Feast",
	description: "The chef at the beach has given you a wager - if you can finish their special feast, they'll let you in on their secret techniques to making hefty meals. You'll need to provide a payment up front of 100 gold any time you want to try.",
	completed: false,
	triedAndFailed: false,
	xp: 200,
}>>

<<set $feeder_questWitchSpice = {
	name: "Sourcing the Spice",
	description: "The witch's diary speaks of a special spice that can make any food incredibly appealing. Perhaps you could acquire some for yourself for your own cooking...",
	completed: false,
}>>

<<set $feeder_questUltimateCreation = {
	name: "A Magnum Opus Meal",
	description: "All your culinary advancements have led to this - the ultimate creation! Gather the ingredients - 30 of each ingredient type, as well as a spectrum gem - cook it up in your kitchen, and bask in the glory of the feast to end all feasts.",
	completed: false,
	xp: 400,
}>>


:: feeder read witch notes [feeder-expansion] {"position":"6600,800","size":"100,100"}
$feeder_witchDiaryNotes.itemUse
<br>

<<set _learnedSomething = false>>
<<set _knowsEverything = true>>

/* Check to start spice quest */
<<if setup.questStarted($feeder_questWitchSpice) == false>>
	Interposed between arcane research and complicated diagrams outlining correct spell circle usage for a number of tasks, you find the occasional food recipe. Unsurprisingly for the inhabitant of a house made of gingerbread, the vast majority of them are for desserts. Each of them sounds wonderfully decadent, your mouth watering as you make mental notes of which ones you'd like to try out. However there's one problem - each and every one of the recipes includes a nebulously-named ingredient referred to as //"black spice"//, to be added //"when serving guests"//. Puzzled, you flick through the notes until you happen on a passage of the witch's research on the spice. The //"black spice"// is a substance of magical origin with some very pronounced effects on the appetites of those who eat it. According to a list of experiments, even a small pinch of the spice is enough to make a food incredibly appetizing - greater amounts yielding frankly dangerous levels of gluttony (one test subject literally ate the witch out of house and home!). Maybe your cooking could do with a bit of that...
	<br>
	<<getQuest $feeder_questWitchSpice>>
	<br>
	
	<<set _learnedSomething = true>>
	<<set _knowsEverything = false>>
<</if>>

/* Check to see what spells the player should unlock, if they haven't already */
<<for _spell range $feeder_advancedMealSpells>>
	<<set _spell = setup.getSpell(_spell)>>
    <<capture _spell>>
    
    /* We'll continue to use that old janky widget for now, even though it really should be ported to javascript */
    <<if setup.knowsSpell(_spell) == false>> /* Yet to learn spell */
		<<feeder_meetsSpellRequirements _spell>>
		
		<<if $feeder_meetsSpellRequirements == true>>
			<<if _spell.learnText != null >>
				_spell.learnText
			<</if>>
			<<getSpell _spell>>
			<br>
			
			<<set _learnedSomething = true>>
		<<else>>
			<<set _knowsEverything = false>>
		<</if>>
	<</if>>
    <</capture>>
<</for>>

/* Add narration to the ending if failed to learn anything */
<<if _learnedSomething == false>>
	<<if _knowsEverything == true>>
		... however, it seems like you've learned everything there is to know from its insights.
	<<else>>
		... however, there's still a lot you can't comprehend. Perhaps after a bit more knowledge and experience you'll be able to make sense of it all.
	<</if>>
<</if>>


:: feeder read witch notes backup {"position":"6700,800","size":"100,100"}
$feeder_witchDiaryNotes.itemUse
<br>

<<set _learnedSomething = false>>
<<set _knowsEverything = true>>

/* Check to start spice quest */
<<if setup.questStarted($feeder_questWitchSpice) == false>>
	Interposed between arcane research and complicated diagrams outlining correct spell circle usage for a number of tasks, you find the occasional food recipe. Unsurprisingly for the inhabitant of a house made of gingerbread, the vast majority of them are for desserts. Each of them sounds wonderfully decadent, your mouth watering as you make mental notes of which ones you'd like to try out. However there's one problem - each and every one of the recipes includes a nebulously-named ingredient referred to as //"black spice"//, to be added //"when serving guests"//. Puzzled, you flick through the notes until you happen on a passage of the witch's research on the spice. The //"black spice"// is a substance of magical origin with some very pronounced effects on the appetites of those who eat it. According to a list of experiments, even a small pinch of the spice is enough to make a food incredibly appetizing - greater amounts yielding frankly dangerous levels of gluttony (one test subject literally ate the witch out of house and home!). Maybe your cooking could do with a bit of that...
	<br>
	<<getQuest $feeder_questWitchSpice>>
	<br>
	
	<<set _learnedSomething = true>>
	<<set _knowsEverything = false>>
<</if>>

/* Check to see what spells the player should unlock, if they haven't already */
<<for _spell range $feeder_advancedMealSpells>>
	<<if setup.hasSpell(_spell) == -1>> /* Yet to learn spell */
		<<feeder_meetsSpellRequirements _spell>>
		
		<<if $feeder_meetsSpellRequirements == true>>
			<<if _spell.learnText != null >>
				_spell.learnText
			<</if>>
			<<getSpell _spell>>
			<br>
			
			<<set _learnedSomething = true>>
		<<else>>
			<<set _knowsEverything = false>>
		<</if>>
	<</if>>
<</for>>

/* Add narration to the ending if failed to learn anything */
<<if _learnedSomething == false>>
	<<if _knowsEverything == true>>
		... however, it seems like you've learned everything there is to know from its insights.
	<<else>>
		... however, there's still a lot you can't comprehend. Perhaps after a bit more knowledge and experience you'll be able to make sense of it all.
	<</if>>
<</if>>


:: feeder resolve feeder boss [feeder-expansion] {"position":"6400,100","size":"100,100"}
<<set _weirdFood = either("beef and ale cheesecake", "sweet and sour waffles", "carrot cream", "jellied broccoli", "deep-fried cabbage", "whipped garlic cream", "vanilla mash potato")>>

<<if $alive and $e.hea > 0>> /* both player and enemy are still alive, so submit is happening (and maybe defeat, if the player somehow injured themselves) */
	<li>Submit</li>
	<<if $grapple > 0>>
		You decide to give up struggling and just enjoy the taste of your ill-conceived creation. The messy mass of food continues to funnel itself into your mouth - you can feel its sticky weight shifting up your body to try and get as close to there as possible in its eagerness to be eaten. All the added pressure does help speed up the churning flow of food, but there's still a limit on how quickly you can keep up. 
	<<else>>
		If there's anybody more deserving of feasting on the food-fusion beast you've created, it's the creator. It's time, you decide, to reap what you've sown. Dropping onto your knees, you throw your arms open wide and the abomination of food eagerly throws itself into your embrace. Grease and sauce and cream splatter over your $p.fur as it pulls itself up you, reaching a probing point into your $p.mouth. It plunges into your mouth, filling your cheeks to bursting with a questionable combination of food, and keeps pushing and pushing more regardless of whether you can keep up. 
	<</if>>
	
	<<findBursting>>
	<<set _leftUntilBurst = $toBurst>>
	<<if _leftUntilBurst >= $e.hea>> /* Player has enough stomach space left to devour the monster */
		<<consume $e.hea $e.hea>>
		<<set $e.hea = 0>>
		
		<br>A seemingly endless number of foods and easily ten times as many clashing flavors flow into you at a relentless rate. There's a loud upset churning from your stomach as it lets its displeasure at having to deal with such a mix of food be known, the incoming pressure pushing it ever outwards. It'll cope, you tell yourself, as you feel it swell to a $waist ball. 
		
	<<else>> /* Player doesn't have enough space */
		<<stuffToBursting>>
		
		<br>A seemingly endless number of foods and easily ten times as many clashing flavors flow into you at a relentless rate. There's a loud upset churning from your stomach as it lets its displeasure at having to deal with such a mix of food be known, the incoming pressure pushing it ever outwards. It'll cope, you tell yourself, just as a jolt of pain shoots through the $waist ball. 
	<</if>>
	<br>
<<else>>
	/* We cheat a bit here and give some extra narration of the creature almost besting the player (even if it should be dead / gone!) just so we can use the same narration later and it still make sense */
	
	The food abomination starts to shrink back and for a moment you think you've got it on the retreat. Then, ''wham!'' The mound of food shoots up, delivering an uppercut and a fistful of food straight to your $p.mouth! The blow sends you staggering back a few paces before you tumble onto your $fatness backside. As you scramble to get up the abomination throws itself upon you, forcing you back down and pinning you in a mess of grease, sauce, and cream. It plunges a tip into your mouth and just keeps pushing and pushing more of itself into your churning, rapidly swelling belly. 
<</if>>

/* ENDING */
/* Do victory if appropriate */
<<if $e.hea <= 0>> /* enemy defeated */
	<<set $feeder_ultimateMonsterAlive = false>>
	
	<br>
	
	/* Is it a pyrrhic victory? */
	<<if !$alive>>
		/* Should we end the quest here? */
		<<if setup.questCompleted($feeder_questUltimateCreation) == false>>
			Eventually the pressure of incoming food starts to let up, and less and less of your view of the world is obscured by food. Then with one last mouthful of _weirdFood, it stops. With a fading vision you peer beyond your $waist belly to see nothing but inanimate smears of food remain. 
			Your masterpiece, gone. The //unique// mess of flavors on your tongue and your viciously churning stomach tell you maybe that's for the best. Some culinary paths are best left unexplored...<br>You clutch at your painfully stuffed stomach as the churning only grows in intensity, until you pass out on the cold $e.special floor. 
		<<else>>
			Eventually the pressure of incoming food starts to let up, and less and less of your view of the world is obscured by food. Then with one last mouthful of _weirdFood, it stops. You glance down at the remaining smears of food, but none of it appears to be moving. Looks like you've won! It feels like you just ate an entire buffet at several differently-themed restaurants, and no amount of scraping you tongue seems to be getting rid of that //unique// blend of flavors. 
			<br>As you go to lift yourself off of the $e.special floor, it only just hits you how painfully stuffed you are. You double over onto your $waist belly, a vicious churning boiling away inside. The strained groans of your overstuffed belly are the last thing you hear before you black out. 
		<</if>>
	<<else>>
		/* Should we end the quest here? */
		<<if setup.questCompleted($feeder_questUltimateCreation) == false>>
			Eventually the pressure of incoming food starts to let up, and less and less of your view of the world is obscured by food. Then with one last mouthful of _weirdFood, it stops. You glance down at the remaining smears of food, but none of it appears to be moving. It's over... 
			<br>A sense of ambivalence washes over you as you feel all that remains of your masterpiece churning away in your $waist stomach, the //unique// taste of a mess of flavors still on your tongue. Perhaps some paths of culinary greatness are best left unexplored... 
		<<else>>
			Eventually the pressure of incoming food starts to let up, and less and less of your view of the world is obscured by food. Then with one last mouthful of _weirdFood, it stops. You glance down at the remaining smears of food, but none of it appears to be moving. Looks like you've won! You take a moment to catch your breath, lying there on the $e.special floor. It feels like you just ate an entire buffet at several differently-themed restaurants, and no amount of scraping you tongue seems to be getting rid of that //unique// blend of flavors. The churning in your belly isn't really settling, but one giant room-shaking ''BURP!'' puts an end to that. Ah, what a feast! 
		<</if>>
	<</if>>
	
	/* Do the reward for the quest now, assuming it's their first time beating the boss */
	<<if setup.questCompleted($feeder_questUltimateCreation) == false>>
		<<questReward $feeder_questUltimateCreation>>
		<li>You can now cook ''ultimate meals''.</li>
		<li>You can also now make more Food Abominations, but that might not be a great idea...</li>
	<</if>>
	
	/* Do standard rewards and ending */
	<<if $alive>>
		<<include "Victory">>
		<hr>
		
		<<if $e.special == "kitchen">>
			You spend some time cleaning up the messy aftermath of the fight. 
		<<else>>
			You spend a while cleaning up all the mess, before staggering upstairs into the kitchen. 
		<</if>>

		<<include "Kitchen">>
	<<else>>
		<li>__''Victory?''__</li>
		<<if $e.xp > 0>><<doXP $e.xp>><</if>>

		<<if $e.gld > 0>>
			<<set _randomGold = random(($e.gld*0.8), ($e.gld*1.2))>>
			<<doGld _randomGold>>
		<</if>>
		<hr>
		<<defeated "overeating">>
		
	<</if>>
<<else>> /* Failure */
	
	<br>
	
	<<if $e.special == "kitchen">> /* Final last push to lock it in the basement */
		Gulping down mouthful after mouthful, the pile of food continues pressing into you, and you feel your strength slowly ebbing away. Only when your $waist stomach is so painfully full you think you might burst do you realise how much is still left to go. You're not going to make it. The thought of passing out into a deep food coma sounds like a sweet release from this onslaught of unfitting foods, and your eyes start drifting shut while your churning stomach bulges painfully larger. But wait - when this monstrosity is done with you, it'll only go out seeking more victims. You can only imagine the sort of havoc your creation could cause if it got out. Or could imagine, if you weren't so mind-numbingly full that you can't even think straight. You've got to do something! 
		<br>Staggering to your feet, you can barely stand with the weight of your bolderlike belly weighing you down. You fall against the pile of food for support, which still all too happily crams mouthful after mouthful of questionable food down your throat. Through fading vision you spot the open door of the basement behind the abomination, and take that as your best shot. With one great heave you push the abomination back - the monster not caring so long as your $p.mouth is close. Choking on a fistful of sweet and sour waffles, you push again.	You stagger and almost slip on the slick of food stains its left on the floor, but thankfully its bulk pressing back at you props you upright. With your $p.mouth practically pressed to the creature, it has no trouble thrusting a few more extra large helpings into your screaming stomach. You can't do this... you feel like you're going to explode any minute. With the last of your strength, you give one last big push, swallowing one last large mouthful from the abomination before slamming the door shut on it. Groaning, you collapse onto the kitchen floor, before everything goes black. 
	<<else>>
		Gulping down mouthful after mouthful, the pile of food continues pressing into you, and you feel your strength slowly ebbing away. Only when your $waist stomach is so painfully full you think you might burst do you realise how much is still left to go. You're not going to make it. All you can see is food as your vision fades to black. 
	<</if>>
	
	<hr>
	<<defeated "overeating">>
<</if>>


<<endCombat>>


:: feeder spell objects [feeder-expansion] {"position":"6200,400","size":"100,100"}
/* COSTING - Design notes
1 Fat converts into 4 mana.
Meals give 7 fat, so cost should be... 7*4 = 28!
That's quite the cost for something that should be basic. How to get around this?
- Make special versions of conjured meals that are less fattening?
... This would work mechanically, but would be at odds with how conjured foods work in the narrative, where they just as fattening if not more than the real things.
- Just don't bother. Let people gain fat through this method if they want. It's not like there isn't already sources of infinite fat in the game.

Though now I think about it, the fact that meals also heal 20 on consumption puts it comparable to the spell "Heal" in terms of healing for a similar cost, with an added downside of requiring stomach space.
Let's just fudge the numbers so the mana cost is ~Fat yield * 3.

Eh, even at that cost it still feels too expensive, let's go with Fat Yield * 2? Even then, that might feel too expensive compared to other spells...
*/

<<run setup.registerSpell({
	Name: "Conjure meaty meal",
	name: "conjure meaty meal",	
	description: "Conjures up a tasty meal fit to satisfy any carnivore. ",
	cast: "With a wave of your hand, a meal comprised predominantly of meat assembles itself out of thin air. ",
	value: 20,
	level: 1,
	cost: 14,
	int: 30,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealMeat",
	amount: 1,
	
	id: "feeder_conjureMeatMeal",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure veggie meal",
	name: "conjure veggie meal",	
	description: "Conjures up a tasty meal fit to satisfy any herbivore. ",
	cast: "With a wave of your hand, a meal comprised predominantly of fruit and veggies assembles itself out of thin air. ",
	value: 20,
	level: 1,
	cost: 14,
	int: 30,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealVeg",
	amount: 1,
	
	id: "feeder_conjureVegMeal",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure desserty meal",
	name: "conjure desserty meal",	
	description: "Conjures up a tasty meal fit to satisfy any sweet tooth. ",
	cast: "With a wave of your hand, a meal comprised predominantly of desserts assembles itself out of thin air. ",
	value: 20,
	level: 1,
	cost: 14,
	int: 30,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealDessert",
	amount: 1,
	
	id: "feeder_conjureDessertMeal",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure appetizing meaty meal",
	name: "conjure appetizing meaty meal",	
	description: "Conjures up a craving-inducing meal fit to leave any carnivore hungry for more. ",
	cast: "With a wave of your hand, a meal comprised predominantly of magically-enhanced meat assembles itself out of thin air. ",
	value: 40,
	level: 3,
	cost: 20,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealMeatAddictive",
	amount: 1,
	
	requiresQuests: ["$feeder_questWitchSpice"],
	requiresSpells: ["feeder_conjureMeatMeal"],
	learnText: "You think you've found a way to apply the addictive qualities of the spice to meat-based meals that you conjure. ",
	
	id: "feeder_conjureMeatMealAddictive",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure appetizing veggie meal",
	name: "conjure appetizing veggie meal",	
	description: "Conjures up a craving-inducing meal fit to leave any herbivore hungry for more. ",
	cast: "With a wave of your hand, a meal comprised predominantly of magically-enhanced fruit and veggies assembles itself out of thin air. ",
	value: 40,
	level: 3,
	cost: 20,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealVegAddictive",
	amount: 1,
	
	requiresQuests: ["$feeder_questWitchSpice"],
	requiresSpells: ["feeder_conjureVegMeal"],
	learnText: "You think you've found a way to apply the addictive qualities of the spice to veggie-based meals that you conjure. ",
	
	id: "feeder_conjureVegMealAddictive",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure appetizing desserty meal",
	name: "conjure appetizing desserty meal",	
	description: "Conjures up a craving-inducing meal fit to leave any sweet tooth hungry for more. ",
	cast: "With a wave of your hand, a meal comprised predominantly of magically-enhanced desserts assembles itself out of thin air. ",
	value: 40,
	level: 3,
	cost: 20,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealDessertAddictive",
	amount: 1,
	
	requiresQuests: ["$feeder_questWitchSpice"],
	requiresSpells: ["feeder_conjureDessertMeal"],
	learnText: "You think you've found a way to apply the addictive qualities of the spice to dessert-based meals that you conjure. ",
	
	id: "feeder_conjureDessertMealAddictive",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure hefty meaty meal",
	name: "conjure hefty meaty meal",	
	description: "Conjures up an astoundingly filling meal fit to stuff any carnivore. ",
	cast: "With a wave of your hand, an unsuspectingly hefty meal comprised predominantly of meat assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 45,
	int: 70,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealMeatHefty",
	amount: 1,
	
	requiresQuests: ["$feeder_questRaccoonFeast"],
	requiresSpells: ["feeder_conjureMeatMeal"],
	learnText: "By applying what you've learned with some of what's written here, you reckon you could conjure meaty meals that are much more filling. ",
	
	id: "feeder_conjureMeatMealHefty",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure hefty veggie meal",
	name: "conjure hefty veggie meal",	
	description: "Conjures up an astoundingly filling meal fit to stuff any herbivore. ",
	cast: "With a wave of your hand, an unsuspectingly hefty meal comprised predominantly of fruit and veggies assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 45,
	int: 70,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealVegHefty",
	amount: 1,
	
	requiresQuests: ["$feeder_questRaccoonFeast"],
	requiresSpells: ["feeder_conjureVegMeal"],
	learnText: "By applying what you've learned with some of what's written here, you reckon you could conjure veggie meals that are much more filling. ",
	
	id: "feeder_conjureVegMealHefty",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure hefty desserty meal",
	name: "conjure hefty desserty meal",	
	description: "Conjures up an astoundingly filling meal fit to stuff any sweet tooth. ",
	cast: "With a wave of your hand, an unsuspectingly hefty meal comprised predominantly of desserts assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 45,
	int: 70,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealDessertHefty",
	amount: 1,
	
	requiresQuests: ["$feeder_questRaccoonFeast"],
	requiresSpells: ["feeder_conjureDessertMeal"],
	learnText: "By applying what you've learned with some of what's written here, you reckon you could conjure desserty meals that are much more filling. ",
	
	id: "feeder_conjureDessertMealHefty",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

/* Not sure if these calorific spells are going to exist or not... */
<<run setup.registerSpell({
	Name: "Conjure calorific meaty meal",
	name: "conjure calorific meaty meal",	
	description: "Conjures up a tasty meal fit to fatten up any carnivore. ",
	cast: "With a wave of your hand, a meal comprised predominantly of calorie-packed meat assembles itself out of thin air. ",
	value: 20,
	level: 3,
	cost: 30,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealMeatCalorific",
	amount: 1,
	
	requiresSpells: ["feeder_conjureMeatMeal"],
	learnText: "After reading through some of the witch's experiments in fattening, you realise how you could conjure much more calorie-packed meaty meals. ",
	
	id: "feeder_conjureMeatMealCalorific",
	combat: true,
    option: "feeder_expansionEnabled",
})>>


<<run setup.registerSpell({
	Name: "Conjure calorific veggie meal",
	name: "conjure calorific veggie meal",	
	description: "Conjures up a tasty meal fit to fatten up any herbivore. ",
	cast: "With a wave of your hand, a meal comprised predominantly of calorie-packed fruit and veggies assembles itself out of thin air. ",
	value: 20,
	level: 3,
	cost: 30,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealVegCalorific",
	amount: 1,
	
	requiresSpells: ["feeder_conjureVegMeal"],
	learnText: "After reading through some of the witch's experiments in fattening, you realise how you could conjure much more calorie-packed veggie meals. ",
	
	id: "feeder_conjureVegMealCalorific",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure calorific desserty meal",
	name: "conjure calorific desserty meal",	
	description: "Conjures up a tasty meal fit to fatten up any sweet tooth. ",
	cast: "With a wave of your hand, a meal comprised predominantly of calorie-packed desserts assembles itself out of thin air. ",
	value: 20,
	level: 3,
	cost: 30,
	int: 50,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealDessertCalorific",
	amount: 1,
	
	requiresSpells: ["feeder_conjureDessertMeal"],
	learnText: "After reading through some of the witch's experiments in fattening, you realise how you could conjure much more calorie-packed desserty meals. ",
	
	id: "feeder_conjureDessertMealCalorific",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure ultimate meaty meal",
	name: "conjure ultimate meaty meal",	
	description: "Conjures up an absolutely perfect meaty meal, fit to stuff, satisfy, and completely hook any carnivore. ",
	cast: "With a wave of your hand, a pristinely perfect meal of predominantly meat assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 60,
	int: 120,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealMeatOmni",
	amount: 1,
	
	requiresQuests: ["$feeder_questUltimateCreation"],
	requiresSpells: ["feeder_conjureMeatMeal"],
	learnText: "Reflecting upon your own discoveries and some of the arcane diagrams, you realise how to conjure the ultimate meaty meals of your own design. ",
	
	id: "feeder_conjureMeatMealOmni",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure ultimate veggie meal",
	name: "conjure ultimate veggie meal",	
	description: "Conjures up an absolutely perfect veggie meal, fit to stuff, satisfy, and completely hook any herbivore. ",
	cast: "With a wave of your hand, a pristinely perfect meal of predominantly fruit and veggies assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 60,
	int: 120,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealVegOmni",
	amount: 1,
	
	requiresQuests: ["$feeder_questUltimateCreation"],
	requiresSpells: ["feeder_conjureVegMeal"],
	learnText: "Reflecting upon your own discoveries and some of the arcane diagrams, you realise how to conjure the ultimate veggie meals of your own design. ",
	
	id: "feeder_conjureVegMealOmni",
	combat: true,
    option: "feeder_expansionEnabled",
})>>

<<run setup.registerSpell({
	Name: "Conjure ultimate desserty meal",
	name: "conjure ultimate desserty meal",	
	description: "Conjures up an absolutely perfect desserty meal, fit to stuff, satisfy, and completely hook any sweet tooth. ",
	cast: "With a wave of your hand, a pristinely perfect meal of predominantly desserts assembles itself out of thin air. ",
	value: 20,
	level: 5,
	cost: 60,
	int: 120,
	type: "item",
	icon: "restaurant",
	target: "player",
	ooc: true,
	item: "$feeder_mealDessertOmni",
	amount: 1,
	
	requiresQuests: ["$feeder_questUltimateCreation"],
	requiresSpells: ["feeder_conjureDessertMeal"],
	learnText: "Reflecting upon your own discoveries and some of the arcane diagrams, you realise how to conjure the ultimate desserty meals of your own design. ",
	
	id: "feeder_conjureDessertMealOmni",
	combat: true,
    option: "feeder_expansionEnabled",
})>>


<<set $feeder_advancedMealSpells = ["feeder_conjureMeatMealAddictive", "feeder_conjureVegMealAddictive", "feeder_conjureDessertMealAddictive", "feeder_conjureMeatMealHefty", "feeder_conjureVegMealHefty", "feeder_conjureDessertMealHefty", "feeder_conjureMeatMealCalorific", "feeder_conjureVegMealCalorific", "feeder_conjureDessertMealCalorific", "feeder_conjureMeatMealOmni", "feeder_conjureVegMealOmni", "feeder_conjureDessertMealOmni"]>>


:: feeder storage info [feeder-expansion] {"position":"6700,400","size":"100,100"}
<<feeder_getProvisionCount "meat">>
<<set _meatCount = $feeder_provisionCount>>
<<feeder_getProvisionCount "veg">>
<<set _vegCount = $feeder_provisionCount>>
<<feeder_getProvisionCount "dessert">>
<<set _dessertCount = $feeder_provisionCount>>
<<feeder_getProvisionCount "other">>
<<set _otherCount = $feeder_provisionCount>>

/* OLD VERSION
Currently in storage you have <<if _meatCount == 0>>no meat to speak of<<else>>_meatCount portions of meat<</if>>, <<if _vegCount == 0>>a complete lack of fruit or veg<<else>>_vegCount portions of fruit and veg<</if>>, <<if _dessertCount == 0>>a sad absence of anything for desserts<<else>>_dessertCount portions of dessert ingredients<</if>>, and <<if _otherCount == 0>>that's it<<else>>an assortment of _otherCount other miscellaneous ingredients<</if>>.
*/

/* New version: */
/* Old version was nice, but the changes in word length meant the list would occasionally move around, making the player sometimes accidentally press the wrong item on the list */
Currently in storage you have:
<li><<if _meatCount == 0>>no meat to speak of<<elseif _meatCount == 1>>a portion of meat<<else>>_meatCount portions of meat<</if>>.</li>
<li><<if _vegCount == 0>>a complete lack of fruit or veg<<elseif _vegCount == 1>>a portion of veggies<<else>>_vegCount portions of fruit and veg<</if>></li>
<li><<if _dessertCount == 0>>a sad absence of anything for desserts<<elseif _dessertCount == 1>>one portion of dessert ingredients<<else>>_dessertCount portions of dessert ingredients<</if>></li>
<li><<if _otherCount == 0>>no other ingredients<<elseif _otherCount == 1>>one portion of other ingredients<<else>>an assortment of _otherCount other miscellaneous ingredients<</if>></li>


:: feeder tuning [feeder-expansion] {"position":"6000,600","size":"100,100"}
/* This file contains a set of variables for tuning balance values without having to go out and edit core files */

/*Modifiers for a feed attempt to be successful*/
<<set $feeder_feedResisterWeaknessBonus = 20>>
<<set $feeder_feedBossResisterWeaknessBonus = 20>>

/*Base chances that a feed will stun an enemy based on their archetype*/
<<set $feeder_feedResisterStunChance = 30>>
<<set $feeder_feedEaterStunChance = 90>>
<<set $feeder_feedHunterStunChance = 50>>

<<set $feeder_feedBossResisterStunChance = 15>>
<<set $feeder_feedBossEaterStunChance = 75>>
<<set $feeder_feedBossHunterStunChance = 30>>

/*Bonus chance that a feed will stun an enemy when they're given a favored flavor, based on their archetype*/
<<set $feeder_feedResisterStunWeaknessBonus = 25>>
<<set $feeder_feedEaterStunWeaknessBonus = 25>>
<<set $feeder_feedHunterStunWeaknessBonus = 25>>

<<set $feeder_feedBossResisterStunWeaknessBonus = 15>>
<<set $feeder_feedBossEaterStunWeaknessBonus = 15>>
<<set $feeder_feedBossHunterStunWeaknessBonus = 15>>

/*General caps for different feed-related things*/
<<set $feeder_feedStunChanceMin = 5>>
<<set $feeder_feedStunChanceMax = 100>>
<<set $feeder_feedBossStunChanceMin = 0>>
<<set $feeder_feedBossStunChanceMax = 90>>
/*(caps are fairly generous for feed chances, since enemies usually don't need a contest to feed the player). Note that this will only be used when feeding resister, since currently all other types auto succeed*/
<<set $feeder_feedChanceMin = 35>>
<<set $feeder_feedChanceMax = 100>>
<<set $feeder_feedBossChanceMin = 35>>
<<set $feeder_feedBossChanceMax = 90>>

/*Addiction Bonuses*/
<<set $feeder_feedEnemyAddictiveBonus = 20>>
<<set $feeder_feedBossAddictiveBonus = 20>>
<<set $feeder_feedEnemyAddictiveStunBonus = 20>>
<<set $feeder_feedBossAddictiveStunBonus = 10>>
<<set $feeder_addictedStatusPersists = 33>>


/*MISC*/
<<set $feeder_genericStuffedStatDebuffMult = 0.66>>
<<set $feeder_substituteOtherConversionRate = 0.5>> /* How much ingredients a `other` provision is worth when converting it into another type. 0.5 means it takes 2 `other` provisions per 1 lacking ingredient. */


:: feeder widgets [widget feeder-expansion] {"position":"6100,800","size":"200,100"}
/* This passage should be given the `widget` tag! */

/*not quite sure what the difference is between widgets and just using javascript???*/
/* Future me: Apparently I should've used javascript for most of this stuff... I'll stick with using widgets for the rest of this mod for consistency's sake, and use JS where I can in future mods. */

=====
/* GENERIC ACTIONS*/
/* These can be used as default generic blocks of codes within the AI */

<<widget "feeder_genericActionText">>
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<set _success = true>>
	<<if $args.length > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	<<if $args.length > 2>><<set _success = $args[2]>><</if>>
	
	/*
	feeder_genericActionText
	Arg 0: $args[0]
	Arg 1: $args[1]
	Arg 2: $args[2]
	*/
	
	<<if _success>>
		/*Can put custom feed messages for different items here!*/
		/*Can also consider variations based on archetype*/
		<<feeder_enemyHasWeaknessToFedFood>>
		
		<<switch $feeder_itemFed.name>>
			<<default>>
				<<if _archetype == "hunter">>
					<<if $feeder_hasWeakness>>
						The $e.name hungrily snaps down the $feeder_itemFed.name. $npc1.He seems to enjoy the taste enough that $npc1.he almost considers waiting to see if you have more, rather than continuing to try and eat you. Almost.
					<<else>>
						The $e.name hungrily snaps down the $feeder_itemFed.name, before returning to eye you hungrily.
					<</if>>
				<<elseif _archetype == "eater">>
					<<if $feeder_hasWeakness>>
						The $e.name eagerly eats the $feeder_itemFed.name, happy for more food. $npc1.His eyes roll back in pleasure at the taste, and $npc1.he licks his lips hungrily.
					<<else>>
						The $e.name eagerly eats the $feeder_itemFed.name, happy for more food.
					<</if>>
				<<else>>
					<<if $feeder_hasWeakness>>
						You force the $feeder_itemFed.name into the $e.name's mouth. $npc1.He resists, but that resistance wanes once $npc1.he gets a taste.
					<<else>>
						You force the $feeder_itemFed.name into the $e.name's mouth.
					<</if>>
				<</if>>
		<</switch>>
	<<else>>
		The $e.name evades your attempts to feed $npc1.him the $feeder_itemFed.name.
	<</if>>
<</widget>>

<<widget "feeder_genericActionStunCheck">>
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	
	/* Don't try to stun if they're already stunned - feeding pacification shouldn't stack! */
	<<if $e.stun == 0>>
		<<feeder_tryStunFeedee _archetype _isBoss>>
		<<if $feeder_feedStunCheck>>
			<<eBuff "stun" 1>>
		<</if>>
	<</if>>
<</widget>>

<<widget "feeder_genericActionDefeatText">>
	The $e.name collapses to the floor, too stuffed to move. Looks like you've won?
<</widget>>

<<widget "feeder_genericActionDefeatCheck">>
	<<set _randomization = $args[0]>>
	
	<<if $e.ate >= $e.sto>>
		/* Do the narration */
		<br><br>
		<<if $args.length > 1>> /* Allow custom text to be used instead */
			$args[1]
		<<else>>
			<<feeder_genericActionDefeatText>>
		<</if>>
		
		<<include "Victory">>
		<<if _randomization != null>>
			<<include _randomization>>
		<</if>>
	<</if>>
<</widget>>

<<widget "feeder_genericActionHalfFullText">>
	The $e.name is starting to look slow and lethargic as $npc1.he grows more stuffed.
<</widget>>

/* Can provide custom text to use instead of generic text, so you can use this in cases where you don't want to make a custom stuffed debuff */
<<widget "feeder_genericActionHalfFullCheck">>
	<<if $e.ate >= $e.sto / 2 and $e.stuffedHalf == false>>
		/* Do the narration */
		<br><br>
		<<if $args.length > 0>>
			$args[0]
		<<else>>
			<<feeder_genericActionHalfFullText>>
		<</if>>
		
		/*Apply slow debuff*/
		<<eBuff "slow" 100>>
		
		/*Weaken their stats*/
		<<set $e.str *= $feeder_genericStuffedStatDebuffMult>>
		<<set $e.agi *= $feeder_genericStuffedStatDebuffMult>>
		<<set $e.int *= $feeder_genericStuffedStatDebuffMult>>
		
		/*Prevent from happening again*/
		<<set $e.stuffedHalf = true>>
	<</if>>
<</widget>>

<<widget "feeder_genericSpecialItemProcess">>
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	
	/* TODO */
<</widget>>

<<widget "feeder_genericActionFull">>
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<set _randomization = null>>
	<<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	<<if $args.length > 2>><<set _randomization = $args[2]>><</if>>
	
	/* Make feed attempt */
	<<feeder_tryFeedEnemy _archetype _isBoss>>
	<<if $feeder_feedCheck>>
		/* Narrate the feeding */
		<<feeder_genericActionText _archetype _isBoss true>>
		
		/* Use up the item */
		<<feeder_tryRemoveFedItem>>
		
		/*Add food to belly*/
		<<feeder_enemyConsume $feeder_fedAmount>>
		
		/* Handle special item effects */
		<<feeder_genericSpecialItemProcess _archetype _isBoss>>
		
		/*Check to see if has won*/
		<<feeder_genericActionDefeatCheck _randomization>>
		<<if $e.ate < $e.sto>> /*Not defeated from stuffing, so continue*/
			/*Check to see if should trigger halfway debuffs*/
			<<feeder_genericActionHalfFullCheck>>
			
			/*Check to see if the enemy should be stunned*/
			<<feeder_genericActionStunCheck _archetype _isBoss>>
			
			/* Perform their turn (which will be interrupted if they were stunned from the feeding) */
			<<enemyAction "attack">>
		<</if>>
	<<else>>
		<<feeder_genericActionText _archetype _isBoss false>>
		<<enemyAction "attack">>
	<</if>>
<</widget>>

=====
<<widget "feeder_tryRemoveFedItem">>
	<<if $feeder_itemFed.consume == true>>
		<<removeItem $feeder_itemFed>>
	<</if>>
<</widget>>

=====
<<widget "feeder_tryFeedEnemy">>
	/* Process Arguments */
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	
	/*Perform Checks*/
	<<set $feeder_feedCheck = false>>
    
	<<switch _archetype>>
		<<case "resister">>
			<<set _bonus = 0>>
			
			<<feeder_enemyHasWeaknessToFedFood>>
			<<if $feeder_hasWeakness>>
				<<if _isBoss>>
					<<set _bonus = $feeder_feedBossResisterWeaknessBonus>>
				<<else>>
					<<set _bonus = $feeder_feedResisterWeaknessBonus>>
				<</if>>
			<</if>>
			
			/* Add addiction bonus */
			<<if $e.addicted == true>>
				<<if _isBoss>>
					<<set _bonus += $feeder_feedBossAddictiveBonus>>
				<<else>>
					<<set _bonus += $feeder_feedEnemyAddictiveBonus>>
				<</if>>
			<</if>>
			
			<<set _stat = $str>>
			<<if $agi > _stat>><<set _stat = $agi>><</if>>
			<<if $int > _stat>><<set _stat = $int>><</if>>
			
			<<set _enemyStat = $e.agi>>
			<<if $e.int > _enemyStat>><<set _enemyStat = $e.int>><</if>>
			
			<<if _isBoss>>
				<<if setup.skillTestRange(_stat + _bonus, _enemyStat, $feeder_feedBossChanceMin, $feeder_feedBossChanceMax)>>
					<<set $feeder_feedCheck = true>>
				<</if>>
			<<else>>
				<<if setup.skillTestRange(_stat + _bonus, _enemyStat, $feeder_feedChanceMin, $feeder_feedChanceMax)>>
					<<set $feeder_feedCheck = true>>
				<</if>>
			<</if>>
		<<default>> /* Currently, all other types succeed without a check being necessary */
			<<set $feeder_feedCheck = true>>
	<</switch>>
<</widget>>

<<widget "feeder_enemyConsume">>
	<<set _tryAmount = $args[0]>>
	<<set _doCap = false>>
	<<if $args.length > 1>><<set _doCap = $args[1]>><</if>>
	
	/* In the future, we could put max caps on the amount of food that a creature can be made to eat at once */
	
	<<set _amount = _tryAmount>>
	
	<<set $e.ate += _amount>>
<</widget>>

/* Provide an array of flavors, and will check to see if the enemy has a weakness for any of them */
<<widget "feeder_enemyHasFlavorWeakness">>
	<<set _flavors = $args[0]>>
	
	<<set $feeder_hasWeakness = false>>
	
	<<for _i, _flavor range _flavors>>
		<<if $e.flavorWeakness.includes(_flavor)>>
			/* Enemy has a weakness for this flavor! */
			<<set $feeder_hasWeakness = true>>
		<</if>>
	<</for>>
<</widget>>

<<widget "feeder_enemyHasWeaknessToFedFood">>
	<<set $feeder_hasWeakness = false>>
	
	<<if $feeder_itemFed != null and $feeder_itemFed.flavors != null>>
		<<feeder_enemyHasFlavorWeakness $feeder_itemFed.flavors>>
	<</if>>
<</widget>>

<<widget "feeder_getFoodStunWeaknessBonus">>
	/* Process arguments */
	<<set _archetype = "resister">>
	<<set _isBoss = false>>
	<<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
	<<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
	
	/* Work out if has weakness*/
	<<feeder_enemyHasWeaknessToFedFood>>
	
	/* Calculate weakness bonus */
	<<set $feeder_stunWeaknessBonus = 0>>
	
	<<if $feeder_hasWeakness>>
		<<switch _archetype>>
			<<case "hunter">>
				<<if _isBoss >>
					<<set $feeder_stunWeaknessBonus = $feeder_feedBossHunterStunWeaknessBonus>>
				<<else>>
					<<set $feeder_stunWeaknessBonus = $feeder_feedHunterStunWeaknessBonus>>
				<</if>>
			<<case "eater">>
				<<if _isBoss >>
					<<set $feeder_stunWeaknessBonus = $feeder_feedBossEaterStunWeaknessBonus>>
				<<else>>
					<<set $feeder_stunWeaknessBonus = $feeder_feedEaterStunWeaknessBonus>>
				<</if>>
			<<default>> /*default or resister*/
				<<if _isBoss >>
					<<set $feeder_stunWeaknessBonus = $feeder_feedBossResisterStunWeaknessBonus>>
				<<else>>
					<<set $feeder_stunWeaknessBonus = $feeder_feedResisterStunWeaknessBonus>>
				<</if>>
		<</switch>>
	<</if>>

<</widget>>

/*Makes a check to see if the enemy should be stunned*/
/*It's left to the creature's AI to handle the stunning, in case they want to do something special instead of being stunned*/
/*Note: When applying stun, should first check if already stunned. These feeds probably should stack stuns!*/
<<widget "feeder_tryStunFeedee">>
		/* Process arguments */
		<<set _archetype = "resister">>
    <<set _isBoss = false>>
    <<if $args.length  > 0>><<set _archetype = $args[0]>><</if>>
    <<if $args.length > 1>><<set _isBoss = $args[1]>><</if>>
    
		/* Calculate any bonuses the check might get if the enemy has a weakness for the food's flavors */
		<<feeder_getFoodStunWeaknessBonus _archetype _isBoss>>
		
		/* Add any bonuses from the addiction status */
		<<if $e.addicted == true>>
			<<if _isBoss == true>>
				<<set $feeder_stunWeaknessBonus += $feeder_feedBossAddictiveStunBonus>>
			<<else>>
				<<set $feeder_stunWeaknessBonus += $feeder_feedEnemyAddictiveStunBonus>>
			<</if>>
			
			/* At this point, attempt to remove the status */
			/* Because of how things are set up, with this function not running if the enemy is already stunned by other means, it means that technically the addicted status can persist for multiple feedings without a check if the enemy is stunned by other means. I'm not too fussed about that - consider it a special tech for the players ;P*/
			
			/* Check if should persist */
			<<if setup.skillTest($feeder_addictedStatusPersists, 0) == false>> /* shouldn't persist */
				<<set $e.addicted = false>>
			<</if>>
		<</if>>
		
		/* Do check */
    <<set $feeder_feedStunCheck = false>>

    <<switch _archetype>>
			<<case "hunter">>
				<<if _isBoss>>
					<<if setup.skillTestRange($feeder_feedBossHunterStunChance + $feeder_stunWeaknessBonus, 0, $feeder_feedBossStunChanceMin, $feeder_feedBossStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <<else>>
					<<if setup.skillTestRange($feeder_feedHunterStunChance + $feeder_stunWeaknessBonus, 0, $feeder_feedStunChanceMin, $feeder_feedStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <</if>>
			<<case "eater">>
				<<if _isBoss>>
					<<if setup.skillTestRange($feeder_feedBossEaterStunChance +$feeder_stunWeaknessBonus, 0, $feeder_feedBossStunChanceMin, $feeder_feedBossStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <<else>>
					<<if setup.skillTestRange($feeder_feedEaterStunChance + $feeder_stunWeaknessBonus, 0, $feeder_feedStunChanceMin, $feeder_feedStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <</if>>
			<<default>> /*default or resister*/
				<<if _isBoss>>
					<<if setup.skillTestRange($feeder_feedBossResisterStunChance + $feeder_stunWeaknessBonus, 0, $feeder_feedBossStunChanceMin, $feeder_feedBossStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <<else>>
					<<if setup.skillTestRange($feeder_feedResisterStunChance + $feeder_stunWeaknessBonus, 0, $feeder_feedStunChanceMin, $feeder_feedStunChanceMax)>> <<set $feeder_feedStunCheck = true>> <</if>>
			 <</if>>
    <</switch>>
<</widget>>

/* VENDORS */
<<widget "feeder_vendor">>
	<<set $vendor.b = -1>>
	<<set $vendor.a = -1>>
	<<set $vendor.selling = false>>

	<<switch $args[0]>>
		/*===============================================*/
		<<case "restaurant">>

		<<set $vendorInventory = [$feeder_mealMeat, $feeder_mealVeg, $feeder_mealDessert]>>

		<<set $vendorThanks = "\"Enjoy.\"">>

		<<set $vendorLocation = "To Go Counter">>

		/*===============================================*/
		<<case "Creatorium">>

		<<set $vendorDescription = "You walk into the creatorium. ">>

		<<set $vendorInventory = ["feeder_conjureMeatMeal", "feeder_conjureVegMeal", "feeder_conjureDessertMeal"]>>

		<<set $vendorThanks = "//sigh//">>

		<<set $vendorLocation = "Learn spells from Creatorium">>

		/*===============================================*/

	<</switch>>
<</widget>>

=====
/* CRAFTING */

<<widget "feeder_ensureProvisionsInit">>
	<<if $feeder_storedProvisions == null>>
		<<set $feeder_storedProvisions = {
			meat: 0,
			veg: 0,
			dessert: 0,
			other: 0,
		}>>
	<</if>>
<</widget>>

<<widget "feeder_addProvisions">>
	<<set _provisionType = $args[0]>>
	<<set _amount = 1>>
	<<if $args[1] != null>>
		<<set _amount = $args[1]>>
	<</if>>
	
	<<feeder_ensureProvisionsInit>>
	<<if $feeder_storedProvisions[_provisionType] + _amount < 0>>
		<<set $feeder_storedProvisions[_provisionType] = 0>>
	<<else>>
		<<set $feeder_storedProvisions[_provisionType] += _amount>>
	<</if>>
<</widget>>

/* Gain provisions from given item without destroying it */
<<widget "feeder_extractProvisions">>
	<<set _itemToExtract = $args[0]>>
	<<set _extractMultiplier = 1>>
	<<if $args.length > 1>><<set _extractMultiplier = $args[1]>><</if>>
	
	<<feeder_ensureProvisionsInit>>
	
	<<if _itemToExtract.provisions != null>>
		<<if _itemToExtract.provisions.meat != null>>
			<<feeder_addProvisions "meat" _itemToExtract.provisions.meat*_extractMultiplier>>
		<</if>>
		
		<<if _itemToExtract.provisions.veg != null>>
			<<feeder_addProvisions "veg" _itemToExtract.provisions.veg*_extractMultiplier>>
		<</if>>
		
		<<if _itemToExtract.provisions.dessert != null>>
			<<feeder_addProvisions "dessert" _itemToExtract.provisions.dessert*_extractMultiplier>>
		<</if>>
		
		<<if _itemToExtract.provisions.other != null>>
			<<feeder_addProvisions "other" _itemToExtract.provisions.other*_extractMultiplier>>
		<</if>>
	<</if>>
<</widget>>

/* Deletes a quantity of items, turning it into the appropriate amount of points */
<<widget "feeder_turnIntoProvisions">>
	<<set _itemToTurn = $args[0]>>
	<<set _amountToTurn = 1>>
	<<if $args.length > 1>><<set _amountToTurn = $args[1]>><</if>>
	
	<<if _amountToTurn == "all">>
		<<feeder_extractProvisions _itemToTurn _itemToTurn.stack>>
		<<removeItem _itemToTurn "all">>
	<<else>>
		<<feeder_extractProvisions _itemToTurn _amountToTurn>>
		<<removeItem _itemToTurn _amountToTurn>>
	<</if>>
<</widget>>

<<widget "feeder_turnWholeInventoryIntoProvisions">>
	/* Loop and store the relevant items first, since we don't want to be modifying the inventory at the same time we're looping through it! */
	<<set _itemsToConvert = []>>
	
	/*<<for _i = 0; _i < $inventory.length; _i++>>*/
	<<for _itemIndexToConvertA, _unusued range $inventory>>
		<<if $inventory[_itemIndexToConvertA].provisions != null>>
			<<set _itemsToConvert.push($inventory[_itemIndexToConvertA])>>
		<</if>>
	<</for>>
	
	/* Now loop through and convert the items into provision points */
	/*<<for _i = 0; _i < _itemsToConvert.length; _i++>>*/
	<<for _itemIndexToConvertB, _unusued range _itemsToConvert>>
		<<feeder_turnIntoProvisions _itemsToConvert[_itemIndexToConvertB] "all">>
	<</for>>
<</widget>>

<<widget "feeder_getProvisionCount">>
	<<set _total = 0>>
	
	<<feeder_ensureProvisionsInit>>
	
	<<switch $args[0]>>
		<<case "meat">>
			<<set _total = $feeder_storedProvisions.meat>>
		<<case "veg">>
			<<set _total = $feeder_storedProvisions.veg>>
		<<case "dessert">>
			<<set _total = $feeder_storedProvisions.dessert>>
		<<case "other">>
			<<set _total = $feeder_storedProvisions.other>>
		<<default>> /* all */
			<<set _total = $feeder_storedProvisions.meat+$feeder_storedProvisions.veg+$feeder_storedProvisions.dessert+$feeder_storedProvisions.other>>
	<</switch>>
	<<set $feeder_provisionCount = _total>>
<</widget>>

<<widget "feeder_larderProvisionsOptions">>
	<<set _hasAny = false>>
	
	/*<<for _i = 0; _i < $inventory.length; _i++>>*/
	<<for _invItemIndex, _invItem range $inventory>>
		/* Only care about items that can actually turn into provisions! */
		<<if $inventory[_invItemIndex].provisions != null>>
			<<set _hasAny = true>>
			
			<<capture _invItemIndex>>
				<<if $inventory[_invItemIndex].icon != null>>
					<<icon $inventory[_invItemIndex].icon>>
				<<else>>
					<<icon "inventory">>
				<</if>>
				
				<<set _title = $inventory[_invItemIndex].Name>>
				
				<<if $inventory[_invItemIndex].stack > 0>>
					<<set _title +=" x"+$inventory[_invItemIndex].stack>>
				<</if>>

				<<link _title "Check Larder">>
					<<feeder_turnIntoProvisions $inventory[_invItemIndex]>>
				<</link>>
				
				/* Give info on what it'll turn into! */
				<<set _provisionAmounts = " Yields: ">>
				
				<<if $inventory[_invItemIndex].provisions.meat != null>>
					<<set _provisionAmounts += $inventory[_invItemIndex].provisions.meat + " Meat ">>
				<</if>>
				<<if $inventory[_invItemIndex].provisions.veg != null>>
					<<set _provisionAmounts += $inventory[_invItemIndex].provisions.veg + " Fruit/Veg ">>
				<</if>>
				<<if $inventory[_invItemIndex].provisions.dessert != null>>
					<<set _provisionAmounts += $inventory[_invItemIndex].provisions.dessert + " Dessert ">>
				<</if>>
				<<if $inventory[_invItemIndex].provisions.other != null>>
					<<set _provisionAmounts += $inventory[_invItemIndex].provisions.other + " Misc. ">>
				<</if>>
				
				_provisionAmounts
				
				<br>
			<</capture>>
		<</if>>
	<</for>>
	
	<<if _hasAny == true>>
		<br>
		<<link "Turn all your items into ingredients" "Check Larder">>
			<<feeder_turnWholeInventoryIntoProvisions>>
		<</link>>
	<<else>>
		//It looks like you've got nothing on you worth storing...//
	<</if>>
<</widget>>

<<widget "feeder_hasUnlockedRecipe">>
	<<set _recipe to $args[0]>>
	
	<<set _hasUnlocked to true>>
	
	/* Check completed all required quests */
	<<if _recipe.quests != null>>
		<<for _questIndex, _questId range _recipe.quests>>
			<<set _quest = State.getVar(_recipe.quests[_questIndex])>>
			
			<<if setup.questCompleted(_quest) == false>>
				<<set _hasUnlocked = false>>
			<</if>>
		<</for>>
	<</if>>
	
	/* Check has all required key items */
	<<if _recipe.keyItems != null>>
		<<for _keyItemIndex, _keyItemId range _recipe.keyItems>>
			<<set _requiredKeyItem = State.getVar(_keyItemId)>>
			
			<<if setup.hasItem(_requiredKeyItem) == -1>>
				<<set _hasUnlocked = false>>
			<</if>>
		<</for>>
	<</if>>
	
	<<set $feeder_hasUnlockedRecipe = _hasUnlocked>>
<</widget>>

<<widget "feeder_hasIngredientsForRecipe">>
	<<set _recipe to $args[0]>>
	
	<<feeder_ensureProvisionsInit>>
	
	<<set _hasIngredients to true>>
	
	/* Check has required ingredients in storage */
	<<if _recipe.provisions != null>>
		<<set _amountMissing = 0>> /* "other" provisions can be used as substitutes, so track what's missing! */
		
		<<for _provisionType, _amount range _recipe.provisions>>
			<<set _count = 0>>
			<<feeder_getProvisionCount _provisionType>>
			<<set _count = $feeder_provisionCount>>
			
			<<if _count < _amount>> /* Player doesn't have sufficient stored ingredients */
				<<if _provisionType != "other">>
					<<if _recipe.noSubstitutions != true>>
						<<set _amountMissing += _amount - _count >>
					<<else>>
						<<set _hasIngredients to false>>
					<</if>>
				<<else>> /* `other` ingredients obviously can't be substituted with `other` ingredients...*/
					<<set _hasIngredients to false>>
				<</if>>
			<</if>>
		<</for>>
		
		/* Attempt to substitute missing ingredients with `other` ingredients */
		<<if _amountMissing > 0 and _recipe.noSubstitutions != true>>
			<<set _otherCount = 0>>
			<<feeder_getProvisionCount "other">>
			<<set _otherCount = $feeder_provisionCount>>
			
			<<if Math.trunc(_otherCount * $feeder_substituteOtherConversionRate) < _amountMissing>>
				<<set _hasIngredients to false>>
			<</if>>
		<</if>>
	<</if>>
	
	/* Check has required items in their inventory */
	<<if _recipe.items != null>>
		<<for _itemId, _amount range _recipe.items>>
			<<set _requiredItem = State.getVar(_itemId)>>
			
			<<if setup.numOwned(_requiredItem) < _amount>> /* Player doesn't have enough items */
				<<set _hasIngredients to false>>
			<</if>>
		<</for>>
	<</if>>
	
	<<set $feeder_hasIngredientsForRecipe = _hasIngredients>>
<</widget>>

<<widget "feeder_consumeCraftingIngredients">>
	<<set _recipe = $args[0]>>
	
	<<feeder_ensureProvisionsInit>>
	
	/* Remove provisions */
	<<if _recipe.provisions != null>>
		<<set _substituted = 0>> /* Track how many ingredients should be substituted with `other`. No need to check for if the recipe doesn't allow substitutions, because we wouldn't have gotten to this stage otherwise! */
		
		<<for _provisionType, _amount range _recipe.provisions>>
			<<set _count = 0>>
			<<feeder_getProvisionCount _provisionType>>
			<<set _count = $feeder_provisionCount>>
			
			<<if _count < _amount>> /* need to use substitutions */
				<<set _substituted += _amount-_count>>
				<<feeder_addProvisions _provisionType _count*-1>>
			<<else>> /* player has enough* /
				<<feeder_addProvisions _provisionType _amount*-1>>
			<</if>>
		<</for>>
		
		/* Remove `other` amount used for substitution */
		<<if _substituted > 0>>
			<<set _otherToConsume = Math.trunc(_substituted/$feeder_substituteOtherConversionRate)>>
			<<feeder_addProvisions "other" _otherToConsume*-1>>
		<</if>>
	<</if>>
	
	/* Remove items */
	<<if _recipe.items != null>>
		<<for _itemId, _amount range _recipe.items>>
			<<set _item = State.getVar(_itemId)>>
			
			<<removeItem _item _amount>>
		<</for>>
	<</if>>
<</widget>>

<<widget "feeder_craftingWriteRequirements">>
	<<set _recipe = $args[0]>>
	
	''Requires: ''
	<<if _recipe.provisions != null>>
		<<set _hasPrevious = false>> /* to tell if should lead with a space and comma */
		<<if _recipe.provisions.meat != null>>
			_recipe.provisions.meat meat
			<<set _hasPrevious = true>>
		<</if>>
		<<if _recipe.provisions.veg != null>>
			/*<<if _hasPrevious>>, <</if>>*/
			_recipe.provisions.veg veggie
			<<set _hasPrevious = true>>
		<</if>>
		<<if _recipe.provisions.dessert != null>>
			/*<<if _hasPrevious>>, <</if>>*/
			_recipe.provisions.dessert dessert
			<<set _hasPrevious = true>>
		<</if>>
		<<if _recipe.provisions.other != null>>
			/*<<if _hasPrevious>>, <</if>>*/
			_recipe.provisions.other other
			<<set _hasPrevious = true>>
		<</if>>
		 ingredients. 
	<</if>>
	<<if _recipe.items != null>>
		<<set _hasPrevious = false>>
		<<for _itemId, _amount range _recipe.items>>
			<<set _item = State.getVar(_itemId)>>
			/*<<if _hasPrevious>>, <</if>>*/
			
			_amount _item.Name
			<<set _hasPrevious = true>>
		<</for>>
	<</if>>
<</widget>>

<<widget "feeder_craftingMakeMenuOption">>
	<<set _recipe = $args[0]>>
	
	<<capture _recipe>> /* ??? I have no idea how captures work */
		<<set _name = "name">>
		<<set _icon = "restaurant">>
		<<set _item = null>>
		<<set _amount = 1>>
		
		<<if _recipe.itemId != null>>
			<<set _item = State.getVar(_recipe.itemId)>>
		<</if>>
		
		<<if _recipe.name != null>>
			<<set _name = _recipe.name>>
		<<elseif _item != null>>
			<<set _name = _item.Name>>
		<</if>>

		<<if _recipe.icon != null>>
			<<set _icon = _recipe.icon>>
		<<elseif _item != null>>
			<<set _icon = _item.icon>>
		<</if>>
		
		<<if _recipe.amount != null>>
			<<set _amount = _recipe.amount>>
		<</if>>
		
		/* Write out the option */
		<<icon _icon>>
		<<set _title = _name>>
		<<if _amount > 1>>
			<<set _title += " (x"+_amount+")">>
		<</if>>
		
		/* won't bother checking if has required ingredients here */
		<<link _title "Cooking up some grub!">>
			<<set $feeder_selectedRecipe = _recipe>>
		<</link>>
		<<feeder_craftingWriteRequirements _recipe>>
	<</capture>>
<</widget>>

<<widget "feeder_crafting">>
	/* Item info and crafting button */
	<<if $feeder_selectedRecipe != null>>
		<<set _selectedName = "name">>
		<<set _selectedDescription = "description">>
		<<set _selectedIcon = "restaurant">>
		<<set _selectedItem = null>>
		<<set _selectedPassage = "Cooking up some grub!">>
		<<set _selectedAmount = 1>>
		<<set _selectedTime = 15>>
		
		<<if $feeder_selectedRecipe.itemId != null>>
			<<set _selectedItem = State.getVar($feeder_selectedRecipe.itemId)>>
		<</if>>
		
		<<if $feeder_selectedRecipe.name != null>>
			<<set _selectedName = $feeder_selectedRecipe.name>>
		<<elseif _selectedItem != null>>
			<<set _selectedName = _selectedItem.Name>>
		<</if>>
		
		<<if $feeder_selectedRecipe.amount != null>>
			<<set _selectedAmount = $feeder_selectedRecipe.amount>>
		<</if>>
		
		<<if _selectedAmount > 1>>
			<<set _selectedName += " (x"+_selectedAmount+")">>
		<</if>>
		
		<<if $feeder_selectedRecipe.description != null>>
			<<set _selectedDescription = $feeder_selectedRecipe.description>>
		<<elseif _selectedItem != null>>
			<<set _selectedDescription = _selectedItem.description>>
		<</if>>
		
		<<if $feeder_selectedRecipe.icon != null>>
			<<set _selectedIcon = $feeder_selectedRecipe.icon>>
		<<elseif _selectedItem != null>>
			<<set _selectedIcon = _selectedItem.icon>>
		<</if>>
		
		<<if $feeder_selectedRecipe.passage != null>>
			<<set _selectedPassage = $feeder_selectedRecipe.passage>>
		<</if>>
		
		<<if $feeder_selectedRecipe.time != null>>
			<<set _selectedTime = $feeder_selectedRecipe.time>>
		<</if>>
		
		/* Display part */
		<u>
		<<icon _selectedIcon>>
		_selectedName
		</u>
		<br>
		_selectedDescription
		<br>
		<<feeder_craftingWriteRequirements $feeder_selectedRecipe>>
		<br>
		
		<<feeder_hasIngredientsForRecipe $feeder_selectedRecipe>>
		<<if $feeder_hasIngredientsForRecipe == true>>
			<<link "Make it?" _selectedPassage>>
				<<feeder_consumeCraftingIngredients $feeder_selectedRecipe>>
				
				<<if _selectedTime > 0>>
					<<doTime _selectedTime>>
				<</if>>
				
				<<if _selectedItem != null>>
					<<getItem _selectedItem _selectedAmount>>
				<</if>>
				
				/* Do any other special stuff here */
			<</link>>
		<<else>>
			//You don't have the required items or ingredients//
		<</if>>
	<<else>>
		//Choose a recipe to cook from your list of known recipes below.//
	<</if>>
	
	<hr>
	
	/* Recipe selection list */
	<<set _hasAnyRecipe = false>>
	
	/* Special crafting options */
	<<set $eventCounterA = 0>> /* Required for passage-based options */
	
	<<if setup.hasItem($feeder_ultimateRecipe) > -1 and $feeder_ultimateMonsterAlive != true>>
		<<set _hasAnyRecipe = true>>
		<<feeder_craftingMakeMenuOption $feeder_craftUltimateRecipe>>
		<br>
	<</if>>
	<<if setup.questCompleted($feeder_questUltimateCreation) and $feeder_ultimateMonsterAlive != true>>
		<<set _hasAnyRecipe = true>>
		<<feeder_craftingMakeMenuOption $feeder_craftFoodBoss>>
		<br>
	<</if>>
	
	/* Standard crafting options */
	<<for _craftIndex, _craftOption range $feeder_craftOptions>> /* OH MY GOD ALL MY PROBLEMS WAS BECAUSE I WAS USING _i AS A VARIABLE IN MULTIPLE PLACES. WHY ARE LOCAL VARIABLES SHARED BETWEEN FUNCTIONS Q_Q */
		<<capture _craftIndex>>
			<<feeder_hasUnlockedRecipe $feeder_craftOptions[_craftIndex]>>
			<<set _hasUnlockedRecipe = $feeder_hasUnlockedRecipe>>
			
			<<capture _hasUnlockedRecipe>>
				<<if _hasUnlockedRecipe>>
					<<set _hasAnyRecipe = true>>
					<<feeder_craftingMakeMenuOption $feeder_craftOptions[_craftIndex]>>
					<br>
				<</if>>
			<</capture>>
		<</capture>>
	<</for>>

	<<if _hasAnyRecipe == false>>
		//Looks like you don't know how to make anything.//
	<</if>>
<</widget>>

=====
/* MISC / UNSORTED */

<<widget "feeder_meetsSpellRequirements">>
	<<set _spell = $args[0]>>
	
	<<set _meetsRequirements = true>>
	
	<<if _spell.int > $int>>
		<<set _meetsRequirements = false>>
	<</if>>
	
	<<if _spell.requiresQuests != null>>
		<<for _questId range _spell.requiresQuests>>
			<<set _quest = State.getVar(_questId)>>
			
			<<if setup.questCompleted(_quest) == false>>
				<<set _meetsRequirements = false>>
			<</if>>
		<</for>>
	<</if>>
	
	<<if _spell.requiresSpells != null>>
		<<for _requiredSpellId range _spell.requiresSpells>>
			<<if setup.knowsSpell(setup.getSpell(_requiredSpellId)) == false>> /* Doesn't have */
				<<set _meetsRequirements = false>>
			<</if>>
		<</for>>
	<</if>>
	
	<<set $feeder_meetsSpellRequirements = _meetsRequirements>>
<</widget>>


:: fixes and edits patch and update [fixes-and-edits] {"position":"6500,1200","size":"100,100"}
/* Most of the fixes and edits are manually edited into the existing game passages rather than being their own passages, so you won't see many of them. */
/* (This file is also a mess of specifically versioned patches, unversioned patches with specific checks, and always-run patches... I suck at planning and organising) */

<<set _PATCHVERSION = 2>>
<<if $fixesAndEditsVersion == null>>
	<<set $fixesAndEditsVersion = 0>>
<</if>>

/* == Unversioned Patches With Checks == */
/* Set up the combat stamina option. */
<<if $options.combatStamina == null>>
	<<set $options.combatStamina = 2>>
<</if>>

/* Set up the devour showing option. */
<<if $options.devourShowMode == null>>
	<<set $options.devourShowMode = 1>>
<</if>>

/* Set up the fixed NPC genderswapping option */
<<if $options.fixedNPCGenders == null>>
	<<set $options.fixedNPCGenders = "default">>
<</if>>

/* Add placeholder species adjectives if missing on the player */
<<if $p.adjective == false>>
	<<set $p.adjective = "animalistic">>
    <<set $p.Adjective = "Animalistic">>
<</if>>

/* Ensure a core species passage is being used, defaulting to vanialla */
<<if $coreSpeciesPassage == null>>
	<<set $coreSpeciesPassage = "Core Species - Vanilla Patch">>
<</if>>

/* EARLY ALWAYS PATCHERS */
<<include "spell objects">>

/* == Actually Properly Versioned Patches == */
<<if $fixesAndEditsVersion < _PATCHVERSION>>
	<<set setup.modUpdated = true>> /* Flag that an update has happened */
	<<set setup.modUpdatedList.push("Fixes and Edits")>> /* Add to list of updated mods */
    
    <<if $fixesAndEditsVersion < 1>>
    	<<include "quest objects">> /* Quests descriptions have been updated to be more generic to account for the possibility of NPC's name, species, and gender changes */
        <<set $fixesAndEditsVersion = 1>>
    <</if>>
    <<if $fixesAndEditsVersion < 2>>
    	/* Milk Jug price was wrong, so have to fix the value in both save and player's inventory */
        <<set $milkJug.value = 2>>
        <script>
        	for (let currentItem of variables().inventory) {
            	if ( currentItem.name == variables().milkJug.name ) {
                	currentItem.value = variables().milkJug.value;
                }
            }
        </script>
        
        /* Update old spellbook to new format - for core spells, at least (mods will have to do their own thing!) */
        <<run
        	let coreSpells = [];
            for ( const [id, spell] of Object.entries(setup.spells) ) {
				if ( spell.core ) {
                	coreSpells.push(id);
                }
			}
            
            setup.patchOldSpellbook(coreSpells);
        >>
        
        /* Introduce the new height variables + update to format */
        <<set $bheight = $p.height>> /* Port previous base height to new system (now $p.height is used for their modified height */
        <<set $theight = 0>>
        <<set $status.height = 0>>
        <<set $status.heightTime = 0>>

        <<set $fixesAndEditsVersion = 2>>
    <</if>>
<</if>>

/* ALWAYS PATCHERS */
<<include "species variables">>
<<include $coreSpeciesPassage>> /* Immediately apply core species patch */
<<run setup.populateCoreGlobalSpecies()>>

<<include "enemy stats">>
<<include "npc variables">>


:: fixes and edits widgets [widget fixes-and-edits] {"position":"6400,1300","size":"200,100"}
/* FIXES AND EDITS - Restructure Species - START */

/* Creates the list dropdown for the player to select their species from. All non-hidden species from any loaded mods are presented here, in alphabetical order */
/* Used in both player creation, and the cabal species changing */
<<widget "printSpeciesOptions">>
	<<set _text>>
	<<set _variableCode = $args[0]>>

	<<script>>
		let _text = "";
		
		_text += `<<listbox "${State.temporary.variableCode}">>`;
		
		let _playableSpecies = setup.getSortedPlayableSpecies();
		
		for (const _species of _playableSpecies){
			_text += `<<option "${_species.species.toUpperFirst()}" $speciesList["${_species.id}"]>>`
		}
		
		_text += `<</listbox>>`;
		
		State.temporary.text = _text;
	<</script>>

	<<print _text>>
	
<</widget>>

/* FIXES AND EDITS - Restructure Species - END */




/* FIXES AND EDITS - Restructure Fixed NPC Data - START */

/* Like createNPC, but takes an NPC object / ID for an NPC object (defined in the `npc variables` passage). For use assembling Fixed NPCs */
<<widget "createFixedNPC">>
	<<set _npcData = $args[0]>>
	<<set _slot = 1>>
	
	<<if $args[1] != null>>
		<<set _slot = $args[1]>>
	<</if>>
	
	<<set _npc = setup.createFixedNPC(_npcData)>>
	
	<<run setup.setNPCToSlot(_npc, _slot);>>
<</widget>>

/* Run this after setting up a fight with a Fixed NPC to correct + update the enemy / NPC info that was loaded */
<<widget "updateEnemyWithNPC">>
	<<set _npcData = $args[0]>>
	
	<<set _npc = setup.createFixedNPC(_npcData)>>
	
	/* Update the relevant Enemy data that needs changing */
	<<set $e.name = _npc.name>>
	<<set $e.Name = _npc.Name>>
	
	<<set $e.gender = _npc.gender>>
	
	<<set $e.species = _npc.speciesObject>>
	
	/* Replace the NPC entry that was made by `setEnemy` */
	<<run setup.setNPCToSlot(_npc, 1);>>
<</widget>>


/* FIXES AND EDITS - Restructure Fixed NPC Data - END */


/* FIXES AND EDITS - Allow custom titles - START */
/* Run inside the passage whose name you want to change after the fact. If you don't use this, it'll default to the standard (enemy info in combat, or raw passage name) */
<<widget "setPassageTitle">>
	<<set $passageTitle = $(document.createElement("div")).wiki($args[0])[0].innerHTML>>
	
	/* We'll also manually change it now, even though it shouldn't do anything */
	<<if $('#passageTitle').length > 0>> /* Check the element exists currently, which it won't when launching */
		<<replace "#passageTitle">>$passageTitle<</replace>>
	<</if>>
<</widget>>

/* Run inside a popup whose name you want to change after the fact */
<<widget "setPopupTitle">>
    /* This convoluted nightmare is what's required to do a simple task like capturing the current state of naked variables... */
    <<set _popupTitle = $(document.createElement("div")).wiki($args[0])[0].innerHTML>>
	
	<<run Dialog.setup(_popupTitle);>>
<</widget>>
/* FIXES AND EDITS - Allow custom titles - END */


/* FIXES AND EDITS - Remake and fix species editor - START */

<<widget "applyPlayerSpecies">>
	<<set _species = $args[0]>>
	<<set _isCharGen = false>>
	<<if $args[1]>>
		<<set _isCharGen = true>>
	<</if>>
	
	/* Check for possibly missing info in the species */
	<<if _species.mname == null>>
		<<set _mname = _species.species>>
	<<else>>
		<<set _mname = _species.mname>>
	<</if>>
	
	<<if _species.fname == null>>
		<<set _fname = _species.species>>
	<<else>>
		<<set _fname = _species.fname>>
	<</if>>
	
	<<if _species.adjective == null>>
		<<set _adjective = "animalistic">>
	<<else>>
		<<set _adjective = _species.adjective>>
	<</if>>
	
	<<if _species.plural == null>>
		<<set _plural = _species.species + "s">>
	<<else>>
		<<set _plural = _species.plural>>
	<</if>>
	
	<<if $p.male == "male">><<set $p.species = _mname>>
	<<elseif $p.male == "female">><<set $p.species = _fname>>
	<<else>><<set $p.species = _species.species>>
	<</if>>
	<<set $p.Species = $p.species.toUpperFirst()>>
	
	/* don't think these two will ever be used anywhere, but may as well record them */
	<<set $p.mname = _mname.toLowerCase()>>
	<<set $p.fname = _fname.toLowerCase()>>
	
	<<set $p.article = _species.article.toLowerCase()>>
	<<set $p.angry = _species.angry.toLowerCase()>>
	<<set $p.feet = _species.feet.toLowerCase()>>
	<<set $p.foot = _species.foot.toLowerCase()>>
	<<set $p.hands = _species.hands.toLowerCase()>>
	<<set $p.hand = _species.hand.toLowerCase()>>
	<<set $p.fur = _species.fur.toLowerCase()>>
	<<set $p.furred = _species.furred.toLowerCase()>>
	<<set $p.furry = _species.furry.toLowerCase()>>
	<<set $p.furBack = _species.furBack.toLowerCase()>>
	<<set $p.furBelly = _species.furBelly.toLowerCase()>>
	<<set $p.furHead = _species.furHead.toLowerCase()>>
	<<set $p.hair = _species.hair.toLowerCase()>>
	<<set $p.teeth = _species.teeth.toLowerCase()>>
	<<set $p.mouth = _species.mouth.toLowerCase()>>
	<<set $p.tail = _species.tail.toLowerCase()>>
	
	<<set $p.adjective = _adjective.toLowerCase()>>
	<<set $p.Adjective = _adjective.toUpperFirst()>>
	<<set $p.plural = _plural.toLowerCase()>>
	<<set $p.Plural = _plural.toUpperFirst()>>
	
	<<set $p.Article = _species.article.toUpperFirst()>>
	<<set $p.Angry = _species.angry.toUpperFirst()>>
	<<set $p.Feet = _species.feet.toUpperFirst()>>
	<<set $p.Foot = _species.foot.toUpperFirst()>>
	<<set $p.Hands = _species.hands.toUpperFirst()>>
	<<set $p.Hand = _species.hand.toUpperFirst()>>
	<<set $p.Fur = _species.fur.toUpperFirst()>>
	<<set $p.Furred = _species.furred.toUpperFirst()>>
	<<set $p.Furry = _species.furry.toUpperFirst()>>
	<<set $p.FurBack = _species.furBack.toUpperFirst()>>
	<<set $p.FurBelly = _species.furBelly.toUpperFirst()>>
	<<set $p.FurHead = _species.furHead.toUpperFirst()>>
	<<set $p.Hair = _species.hair.toUpperFirst()>>
	<<set $p.Teeth = _species.teeth.toUpperFirst()>>
	<<set $p.Mouth = _species.mouth.toUpperFirst()>>
	<<set $p.Tail = _species.tail.toUpperFirst()>>
	
	/* STAT RELATED */
	<<set $p.bheight = _species.speciesHeight>>
	<<set $p.speciesStats = clone(_species.speciesStats)>>
	
	<<if _isCharGen>> /* Character creation exclusive setup */
		<<set $p.height = _species.speciesHeight>>
		<<set $bheight = _species.speciesHeight>> /* height changes */
		
		/* Since there's no way to use `changeStats` silently, we'll do it ourselves instead */
		<<set _baseStat = setup.tuning("baseStatMain")>>
		<<set _baseStomach = setup.tuning("baseStatStomach")>>
		
		<<set $bstr = _baseStat + _species.speciesStats[0]>>
		<<set $bagi = _baseStat + _species.speciesStats[1]>>
		<<set $bend = _baseStat + _species.speciesStats[2]>>
		<<set $bint = _baseStat + _species.speciesStats[3]>>
		<<set $bsto = _baseStomach + _species.speciesStats[4]>>
		<<set $fat = setup.tuning("startingFat") + _species.speciesStats[5]>>
		
		<<updateStats>>
	<</if>>
<</widget>>

/* FIXES AND EDITS - Remake and fix species editor - END */


/* FIXES AND EDITS - Custom function to print spell options - START */
<<widget "printSpellbookOption">>
	/* I don't know if captures are necessary or not :S */
	<<set _spell = $args[0]>>
	<<set _isCombat = $args[1]>>
	
	<<set _available = setup.spellIsAvailable(_spell)>>
	
	<<capture _spell, _available, _isCombat>>
	
	<<set _icon = _spell.icon>>
	<<set _title = _spell.Name+" | "+setup.getSpellCosts(_spell).join(", ")>>
	
	<<if setup.canCastSpell(_spell) == false>>
		<li><u><<icon _icon>>_title ~~(Not enough <<=setup.spellCastFailReasons(_spell).join(", ")>>)~~</u></li>
	<<elseif _available.result == false>>
		<li><u><<icon _icon>>_title ~~(<<=_available.reason.toUpperFirst()>>)~~</u></li>
	<<else>>
		<<if _isCombat>>
			<li><u><<icon _icon>><<link _title "Combat">>
				<<set $action = "Cast">>
				<<set $spellCast = _spell>>
				<<run Dialog.close();>>
	  	<</link>></u><<if _spell.configurable>> (<<link "Alter Cast">>
	<<set $spellConfig = {spell: _spell.id, init: false}>>
	<<run
		Dialog.setup("Alter Cast - "+_spell.Name);
		Dialog.wiki(Story.get("Custom Spell Configurations").processText());
		Dialog.open();
	>>
<</link>>)<</if>></li>
		<<else>>
			<li><u><<icon _icon>><<link _title>>
				<<set $spellCast = _spell>>
				<<script>>
					Dialog.setup("cast spell");
					Dialog.wiki(Story.get("cast spell").processText());
					Dialog.open();
				<</script>>
			<</link>></u><<if _spell.configurable>> (<<link "Alter Cast">>
	<<set $spellConfig = {spell: _spell.id, init: false}>>
	<<run
		Dialog.setup("Alter Cast - "+_spell.Name);
		Dialog.wiki(Story.get("Custom Spell Configurations").processText());
		Dialog.open();
	>>
<</link>>)<</if>></li>
		<</if>>
	<</if>>
	_spell.description
	<br>
	
	<</capture>>
<</widget>>

/* FIXES AND EDITS - Custom function to print spell options - END */


/* FIXES AND EDITS - Combat adjustments - START */
<<widget "reportEffectiveness">>
	<<set _damageType = $args[0]>>
	<<set _target = $args[1]>>
	
	/* Get the actual target */
	<<if _target == "enemy" or _target == null>>
		<<set _target = $e>>
	<</if>>
	
	<<set _effective = setup.getEnemyDamageTypeMultiplier(_damageType, _target)>>
	<<if _effective > 1>> /* TODO - check this gets formatted correctly */
		It's super effective!
	<<elseif _effective < 1>>
		It's not very effective. 
	<</if>>
	
<</widget>>

/* FIXES AND EDITS - Combat adjustments - END */


<<widget "updateClock">>
	<<set _time = "Day "+$day+", "+$displayHour+":"+$tensMinute+$onesMinute+" "+$ampm>>
	
	<<replace "#timeDisplay">>
		'' _time ''
	<</replace>>
<</widget>>

/* Performs similar logic to the stretch fruit wearing off effect, to save the player being defeated from overstuffing when their stomach changes size */
/* (note: Just as with the original stretch fruit implementation, this can actually cause the stomach boost to grow larger!) */
<<widget "stomachResizeRescue">>
	<<if $args[0]>>
		<<set _narration = $args[0]>>
	<<else>>
		<<set _narration = "You hear an ominous gurgling sound emanating from your stomach. You look down as you're struck by the all too familiar sensation of growing fuller and fuller. You quickly realize that the powers affecting your stomach are wearing off in spite of you exceeding your normal limits. Fortunately the shrinking eventually stops before you explode, although you're stomach is still stretched to its absolute limit. It seems the effects haven't completely worn off... yet. ">>
	<</if>>
	
	<li>//_narration//</li>
	
	/* We'll hack things and just use the sto status */
	/* Work out the required buff */
	<<set _sizeRequired = Math.floor(($ate + $inf + 1) / ($maxFul/100))>>
	<<set _boostRequired = _sizeRequired - $sto + $status.sto>>
	
	<<set $status.sto = _boostRequired>>
	<<set $status.stoTime = setup.tuning("stoRescueInterval")>> /* This will potentially mean cutting an existing stomach buff off early, but I'm sure the player won't mind it as a cost for being saved :p */
	<<updateStats>>
	<<if $hea < 1>><<set $hea = 1>><</if>>
	<<set $alive = true>>
	
<</widget>>


:: icy spells patch and update {"position":"7400,900","size":"100,100"}
<<set _MODVERSION = 1>>

/* LEVITATION */
<<run setup.tune("icyspells_levitateBaseStrength", 0)>>
<<run setup.tune("icyspells_levitateBaseLength", 240)>>

<<run setup.registerSpell({
	Name: "Levitate",
	name: "levitate",	
	description: "Carry yourself with the aid of magic, preventing you from being slowed or tired by your burdens while travelling. The floating prevents you from benefiting from your natural speed if it would help your travels, however. ",
	cast: "You raise your arms, and your body follows them, lifting weightlessly into the air as faint shimmers of magic run across you. ",
	value: 22,
	level: 1,
	cost: 10,
	int: 30,
	type: "custom",
	icon: "greyMagic",
	target: "player",
	
	id: "icyspells_levitate",
	option: "icyspells_enabled",
	/* There's no reason to NOT allow this to be cast in combat, however I think excluding it from there could help convey that it has no impact on combat. */
	ooc: true,
})>>

/* ENLARGE / REDUCE */
<<run setup.tune("icyspells_enlargeBaseLength", 60)>>
<<run setup.tune("icyspells_enlargeStatChangeMod", 1)>> /* Scaling factor is multiplied by this number, before being used to modify stats */

/* It's hard to fully work out what I want from the spell, given I haven't mapped out the mechanical effects yet, so this is subject to change! */
<<run setup.registerSpell({
	Name: "Embiggen / Belittle",
	name: "embiggen / belittle",	
	description: "Resize your body to be larger or smaller. ",
	value: 65,
	level: 1,
	cost: 15,
	int: 45,
	type: "custom",
	icon: "greyMagic",
	target: "player",
	
	id: "icyspells_enlarge",
	option: "icyspells_enabled",
    configurable: true,
	combat: true,
	ooc: true,
})>>

/* IGNITE */
<<run setup.tune("icyspells_igniteChanceBase", 0.9)>>
<<run setup.tune("icyspells_igniteChanceWeakness", 1)>>
<<run setup.tune("icyspells_igniteChanceResistance", 2/3)>>

<<run setup.registerSpell({
	Name: "Ignite",
	name: "ignite",	
	description: "Scorch your enemy with hot flames with a high chance of burning them. If the enemy is already burning, each cast intensifies and prolongs the burning. ",
	
	/* Since my napkin math is based on how damage would compare relative to casting the standard damaging fire spell equivalent, many of the stats are going to be the same for my sanity */
	value: 15,
	level: 1,
	cost: 5,
	int: 30,

	dType: "fire",
	damage: 4,
	dRange: 4,
	power: 0.3, /* If at 0.4, the spell would start off as being functionally the same as Fireball, with the damage divided across 3 burn ticks */

	type: "custom",
	time: 3,
	icon: "darkMagic",
	target: "enemy",
	
	/* Cast text handled on cast */
	
	id: "icyspells_ignite",
	option: "icyspells_enabled",
	combat: true,
})>>

/* WARDS */
<<run setup.tune("icyspells_wardReinforceRate", 5)>>

<<run setup.registerSpell({
	Name: "Lesser Ward",
	name: "lesser ward",	
	description: "Erect wards that reduce incoming damage by 50%. The wards shatter once they've absorbed too much damage. ",
	cast: "You trace glowing runes in the air with your $p.hands which lock into place around you. ",
	
	value: 25,
	level: 1,
	cost: 6,
	int: 20,

	damage: 4,
	dRange: 4,
	power: 0.5, /* % reduction */

	type: "custom",
	icon: "greyMagic",
	target: "player",
	
	id: "icyspells_lesserWard",
	option: "icyspells_enabled",
	combat: true,
})>>

<<run setup.registerSpell({
	Name: "Ward",
	name: "ward",	
	description: "Erect arcane wards that reduce incoming damage by 65%. The wards shatter once they've absorbed too much damage. More mana can be invested when casting to reinforce the wards, but at reduced efficiency. ",
	cast: "You trace a number of sparkling runes in the air with your $p.hands which lock into place around you. ",
	
	value: 50,
	level: 1,
	cost: 25,
	int: 50,

	damage: 6,
	dRange: 8,
	power: 0.65, /* % reduction */

	type: "custom",
	icon: "greyMagic",
	target: "player",
	
	id: "icyspells_ward",
	option: "icyspells_enabled",
	configurable: true,
	combat: true,
})>>

/* MEDITATION */
<<run setup.registerSpell({
	Name: "Meditate",
	name: "meditate",	
	description: "Enter your body into a mana-infused state of rest, where it can recover from what ails it at an accelerated rate. ",
	cast: "You take a moment to close your eyes, center yourself, and let the energies of the world flow through your being in measured breaths. When you awaken from your peaceful trance, you feel well-rested, and ready for anything. ",
	
	value: 22,
	level: 1,
	cost: 4,
	int: 20,

	time: 15, /* How long passes on the rest */
	stamina: 25, /* How much stamina is recovered */
	enduranceMult: 1, /* Multiplier for how much health is recovered */
	bonusDigest: 45, /* How much extra digestion occurs */

	type: "custom",
	icon: "whiteMagic",
	target: "player",
	
	id: "icyspells_meditate",
	option: "icyspells_enabled",
	ooc: true,
})>>

/* GREASE */
<<run setup.tune("icyspells_greaseBurnTime", 3)>>

<<run setup.registerSpell({
	Name: "Grease",
	name: "grease",	
	description: "Coat your foe in a layer of flammable oil, which will ignite when put to the flame. ",
	cast: "You stomp your feet, and small geysers of black oil stream from the ground, coating your opponent. ",
	
	value: 20,
	level: 1,
	cost: 5,
	int: 20,

	type: "custom",
	icon: "greyMagic",
	target: "enemy",
	
	id: "icyspells_grease",
	option: "icyspells_enabled",
	combat: true,
})>>

/* FLASH FIRE */
<<run setup.registerSpell({
	Name: "Flash Fire Blast",
	name: "flash fire blast",	
	description: "Focus an intense explosion centered around your opponent. Burning foes take all their remaining burning damage, before being extinguished. ",
	
	value: 80,
	level: 1,
	cost: 30,
	int: 70,

	dType: "fire",
	damage: 10,
	dRange: 12,
	greaseMult: 1,

	type: "custom",
	icon: "darkMagic",
	target: "enemy",
	
	/* Cast text handled on cast */
	
	id: "icyspells_explode",
	option: "icyspells_enabled",
	combat: true,
})>>

/* HEATWAVE */
<<run setup.registerSpell({
	Name: "Heatwave",
	name: "heatwave",	
	description: "Radiate intense heat at your foe, causing a burning enemy to take burning damage, and prolonging their burning another turn. If the enemy isn't burning, they will instead start burning for a minor amount. ",

	value: 40,
	level: 3,
	cost: 15,
	int: 40,

	/* Damage is used to create the burn */
	dType: "fire",
	damage: 6,
	dRange: 8,

	type: "custom",
	time: 3, /* Duration of default burn */
	extendTime: 1, /* Additional burn time to add */
	icon: "darkMagic",
	target: "enemy",
	
	/* Cast text and power strength are handled on cast */
	
	id: "icyspells_heatwave",
	option: "icyspells_enabled",
	combat: true,
})>>

<<if $icyspells_saveVersion == null>>
	<<set $icyspells_saveVersion = 0>>
<</if>>

<<if $icyspells_saveVersion < _MODVERSION>>
	<<set setup.modUpdated = true>>
	<<set setup.modUpdatedList.push("Icy's Spellbook")>>
    
    <<if $icyspells_saveVersion < 1>>
    	<<set $status.levitate = 0>>
        <<set $status.levitateTime = 0>>
        
        <<set $status.enlarge = 1>>
        <<set $status.enlargeTime = 0>>
        
        <<set $icyspells_ward = 0>>
        <<set $icyspells_wardReduction = 0>>
        
        <<set $icyspells_saveVersion = 1>>
    <</if>>
	
	/* Update the recorded version in the save, so this doesn't happen again */
	<<set $icyspells_saveVersion = _MODVERSION>>
<</if>>


:: icyibis patch and update [fixes-and-edits] {"position":"6000,1500","size":"200,100"}
<<include "pokemod patch and update">>
<<include "feeder patch and update">>
<<include "downtime patch and update">>
<<include "icy spells patch and update">>


:: manual mod patch option [fixes-and-edits] {"position":"7000,1200","size":"100,100"}
/* Passage for the manual modding patch button + explanation. Appears in both Mod Options and Game fixes */
Run this before playing whenever you've updated a mod, or added a mod to an existing save file. You'll still also have to enable new mods if you want to experience their content.<br>
<<link "Update Mods">>
	<<include "mods patch and update">>
<</link>>


:: mods patch and update [fixes-and-edits mod-support] {"position":"5800,1600","size":"200,200"}
<<include "fixes and edits patch and update">> /* Nothing should come before the fixes and edits patch! */

<<include "icyibis patch and update">>


:: npc variables [fixes-and-edits] {"position":"6400,1400","size":"200,100"}
/* Contains all the info for the non-randomised ("fixed") NPCs */
/* Things have been restructured to use this file so that there's an easier way for modders to swap their species or genders without having to manually edit any passage they're involved in */

/* Patching Status: Full reset on each patch */

<<set $npcs = {}>>

/* Define the base NPCs here, because why not */
/* (ignore the weird setup here - I wasn't fully sure how I wanted to handle patchers) */
<<set _baseNPCs = {
	/* City */
	armorer: {
		name: "Argus",
		gender: "male",
		species: "lion",
	},
	
	generalStore: {
		name: "Charles",
		gender: "male",
		species: "rat",
		fname: "Charlie",
	},
	
	clothier: {
		name: "Edna",
		gender: "female",
		species: "cattle",
		mname: "Edmund",
	},
	
	grocer: {
		name: "Grocer",
		gender: "female",
		species: "brownBear",
	},
	
	tailor: {
		name: "Charles", /* Tailor isn't named, but clothier mentions her husband Charles does alterations. So she could be referring to the tailor, the general store owner who happens to be named Charles, or another character altogether */
		gender: "male",
		species: "tiger",
		fname: "Charlie",
	},
	
	waitress: {
		name: "Deb",
		gender: "female",
		species: "fox",
		mname: "Des",
	},
	cook: {
		name: "Cookie",
		gender: "male",
		species: "cheetah",
	},
	
	priest: {
		name: "Oswald",
		gender: "male",
		species: "raven",
		fname: "Astrid",
	},
	
	/* Farm */
	dairyFarmer: {
		name: "Farmer",
		gender: "male",
		species: "cattle",
		color: "brown",
	},
	sampson: {
		name: "Sampson",
		gender: "male", /* Technically in the base game Sampson is programmed to have a random gender, but I don't know if that's intentional */
		species: "horse",
		fname: "Samantha",
		
		color: "brown",
		coatDesc: "beige coat",
		feetDesc: "clumpy hooves",
		maneDesc: "mane",
		whinnies: "whinnies",
		whickers: "whickers",
	},
	scientist: {
		name: "Scientist",
		gender: "male", 
		species: "raccoon",
		fname: "Scientist",
	},
	
	/* Forest */
	/* no fixed enemies in the forest - any encounters are random NPC, or have been fixed to be random */
	
	/* Grasslands */
	/* wildling shaman boss is actually a random character. though their passages still needed fixing :s */
	
	wildlingDragon: {
		name: "?",
		gender: "male",
		species: { /* another instance of having to make a custom species almost solely so it can say "dragon", though technically it's also needed for colors, as there's not normally a gold dragon... */
			article: "a",
			id: "dragon",	
			species: "dragon",
			angry: "roar",
			furBack: "gold", furBelly: "gold", furHead: "gold",
			foot: "foot", feet: "feet",
			hand: "claw", hands: "claws",
			fur: "scales", furred: "scaled", furry: "scaly",
			hair: "head",
			tail: "thick tail",
			teeth: "sharp teeth",
			mouth: "muzzle",
			speciesHeight: 74,
			speciesStats: [7,0,3,5,10,5],
		},
	},
	lizardWizard: {
		name: "Fruit Wizard",
		gender: "male",
		species: "lizard", /* had to create the species, but thats fine because there really should be lizards anyways */
	},
	
	/* West town */
	westMerchant: {
		name: "Dianne",
		gender: "female",
		species: "panther",
		mname: "Danny",
	},
	westInnkeeper: {
		name: "Bronk",
		gender: "male",
		species: "pig",
		pork: "pork",
		oinker: "oinker",
	},
	westInnkeeperReplacement: {
		name: "Larry", /* Yes, same name as the receptionist */
		gender: "male",
		species: "duck", /* Ducks aren't actually in the base game, but I modded them in for simplicity - otherwise the species could be defined here */
		color: "white",
		fname: "Loretta",
	},
	guildReceptionist: {
		name: "Larry",
		gender: "male",
		species: "dolphin",
		fname: "Linda",
	},
	apothecary: {
		name: "Riggs",
		gender: "male",
		species: "ferret",
		fname: "Regina",
	},
	destructatorium: {
		name: "Dren",
		gender: "male",
		species: "blueDragon",
		fname: "Drenusha",
	},
	restoratorium: {
		name: "Rosalina",
		gender: "female",
		species: "mouse",
		mname: "Ross",
	},
	altertarium: {
		name: "Lucas",
		gender: "male",
		species: "fox",
		color: "white",
		fname: "Lucia",
	},
	captain: {
		name: "Everett",
		gender: "male",
		species: "brownBear",
	},
	beachVendor: {
		name: "Raccoon",
		gender: "male",
		species: "raccoon",
	},
	
	/* Jungle */
	jungleInnkeeper: {
		name: "Ostrom",
		gender: "male",
		species: "raptor",
	},
	jungleSmith: {
		name: "Kieras",
		gender: "female",
		species: "triceratops",
	},
	chief: {
		name: "Sue",
		fullName: "Sudaentarsus",
		gender: "female",
		species: "tyrannosaurus",
		mname: "Sudain",
	},
	shaman: { /* (the friendly NPC one on the island) */
		name: "Aktulos",
		gender: "male",
		species: "pterodactyl",
	},
	
	starShaman: {
		name: "Star Shaman",
		gender: "male",
		species: "raptor",
	},
	
	/* Mountain */
	mountainWizard: {
		name: "?",
		gender: "male",
		species: "dog",
	},
	mountainWizardAssistant: {
		name: "?",
		gender: "male",
		species: "goat",
	},
	
	cabalLion: { /* the leader */
		name: "",
		gender: "male",
		species: "lion",
	},
	cabalRabbit: { /* the body changer */
		name: "",
		gender: "female",
		species: "rabbit",
	},
	cabalOwl: { /* the fat storer */
		name: "",
		gender: "male",
		species: "owl",
	},
	cabalRogue: {
		name: "Rogue Cabal Dragon",
		gender: "male",
		species: { /* All dragon species include colour, so we need a separate species to just say "dragon" >_> */
			article: "a",
			id: "dragon",	
			species: "dragon",
			angry: "roar",
			furBack: "grey", furBelly: "grey", furHead: "grey",
			foot: "foot", feet: "feet",
			hand: "claw", hands: "claws",
			fur: "scales", furred: "scaled", furry: "scaly",
			hair: "head",
			tail: "thick tail",
			teeth: "sharp teeth",
			mouth: "muzzle",
			speciesHeight: 74,
			speciesStats: [7,0,3,5,10,5],
		},
		color: "grey",
	},
	tigerBoss: {
		name: "Mountainous Tiger Sorcerer",
		gender: "male",
		species: "tiger",
		color: "orange",
		feetColor: "black",
	},
	
	snookums: {
		name: "Snookums",
		gender: "female",
		species: "squirrel",
	},
	smarty: {
		name: "Smarty",
		gender: "male",
		species: "rabbit",
	},
	earl: {
		name: "Earl",
		gender: "male",
		species: "goat",
		fname: "Ella",
	},
	smith: {
		name: "Smith",
		gender: "male",
		species: "donkey",
	},

	/* Swamp */
	Elara: {
		name: "Elara",
		gender: "female",
		species: "fox",
		/* mname: "Edwin", */
		chatContext: "
		This is a text-based adventure game where the player can talk to the characters they meet. There will be text describing the scene and any characters. The player will respond with dialogue and actions. You will respond with narration and any relevant dialogue from this character.
		Character Profile:
		Name: Elara
		Age: Late 20s
		Species: Fox
		Appearance: Fox-like, Her bloated state makes her features very puffy.
		Clothing: Stretched green tunic and dark trousers, strained due to her swollen form. 
		Hobbies: Enjoys exploration, botany, and mapping new territories.

		Current Situation:
		Elara, an anthro fox adventurer, is temporarily immobilized and extremely bloated after accidentally inhaling Puff Fungus spores. Her waist is around 4 feet in circumference, and her arms and legs are so swollen she can only wiggle them slightly. She is currently laying on her inflated belly, unable to reach the ground with her feet or move at all. 
		She is constantly burping up green gas, each burp causing her to deflate slightly. 

		Dialogue Style:
		Speech Pattern: Elara's speech is frequently interrupted by loud, uncontrollable burps. 
		Tone: Friendly but frustrated and uncomfortable with her current state. 
		Responses: Should reflect her current inability to move freely, her frustration with her situation, and her knowledge of the forest and its dangers. Her belly is a constant source of discomfort, so she should frequently mention it and her attempts to relieve the pressure.


		Events:
		If the player gets too close to her face, Elara might burp the green gas onto them, causing the player to slowly bloat up until they are as big as Elara is. Elara does not know about this effect.
		"
	}
}>>


/* Register all the NPCs
/* (I don't want to have to figure out how to loop properly, so I'm going to do it with JS instead) */
<<script>>
	for (const [id, data] of Object.entries(State.temporary.baseNPCs)) {
    setup.registerNPC(id, data);
  }
<</script>>


:: pokemod core patch and update [pokemod] {"position":"7100,900","size":"100,100"}
<<if $options.pokemodCoreEnabled == true>>
	/* PATCH NPCS */
	<<run setup.registerNPC("wildlingDragon", {
		species: "whiteDragon"
	})>>
	
	<<run setup.registerNPC("cabalRogue", {
		name: "Rogue Cabal Haxorus",
		species: {
			article: "a",	
			species: "haxorus",
			plural: "haxoruses",
			angry: "roar",
			furBack: "grey", furBelly: "grey", furHead: "grey",
			foot: "foot", feet: "feet",
			hand: "claw", hands: "claws",
			fur: "scales", furred: "scaled", furry: "scaly",
			hair: "head",
			tail: "thick tail",
			teeth: "sharp teeth",
			mouth: "muzzle",
			speciesHeight: 74,
			speciesStats: [7,0,3,5,10,5],
		},
	});>>
	
	<<run setup.registerNPC("tigerBoss", {
		name: "Mountainous Incineroar Sorcerer"
	})>>
	
	/* PATCH ENEMIES */
	/* TODO - Update this if ever get around to implementing proper enemy patching */
	<<set $fatWolf.name = "fat lycanroc">>
	<<set $fatWolf.Name = "Fat lycanroc">>
	
	<<set $obeseBear.name = "obese ursaring">>
	<<set $obeseBear.Name = "Obese ursaring">>
	
	<<set $bloatedLion.name = "bloated pyroar">>
	<<set $bloatedLion.Name = "Bloated pyroar">>
	
	<<set $gorgedCheetah.name = "gorged purugly">>
	<<set $gorgedCheetah.Name = "Gorged purugly">>
	
	<<set $expandedElephant.name = "expanded copperajah">>
	<<set $expandedElephant.Name = "Expanded copperajah">>
	
	<<set $bloatBees.name = "bloat beedrills">>
	<<set $bloatBees.Name = "Bloat beedrills">>
	
	<<set $soldierAnts.name = "soldier durants">>
	<<set $soldierAnts.Name = "Soldier Durants">>
	
	<<set $feederAnt.name = "feeder durant">>
	<<set $feederAnt.Name = "Feeder Durant">>
	
	<<set $fatWyvern.name = "fat noivern">>
	<<set $fatWyvern.Name = "Fat Noivern">>
	
	<<set $royalGuardWasp.name = "royal guard combee">>
	<<set $royalGuardWasp.Name = "Royal Guard Combee">>
	
	/* (don't think the npc renames are necessary due to them being fixed NPCs, but will do them anyway) */
	<<set $mountainousTiger.name = "mountainous incineroar sorcerer">>
	<<set $mountainousTiger.Name = "Mountainous Incineroar Sorcerer">>
	
	<<set $cabalDragon.name = "rogue cabal haxorus">>
	<<set $cabalDragon.Name = "Rogue Cabal Haxorus">>
	
	<<set $hydra.name = "giant hydreigon">>
	<<set $hydra.Name = "Giant Hydreigon">>
	
	<<set $sandSnake.name = "venomous sandaconda">>
	<<set $sandSnake.Name = "Venomous Sandaconda">>
	<<set $sandSnake.species = "anacondaSpecies">> /* C'mon, how can I NOT replace the sand snake with the sand snake pokemon!? */
	
	<<set $bubbleOrca.name = "bubble wailmer">>
	<<set $bubbleOrca.Name = "Bubble Wailmer">>
	
	<<set $sphericalShark.name = "spherical sharpedo">>
	<<set $sphericalShark.Name = "Spherical Sharpedo">>
	
	<<set $anaconda.name = "massive ekans">>
	<<set $anaconda.Name = "Massive Ekans">>
	<<set $anaconda.species = "snake">>
	
	<<set $fatJaguar.name = "fat luxray">>
	<<set $fatJaguar.Name = "Fat Luxray">>
	
	<<set $anacondaBoss.name = "giant ekans">>
	<<set $anacondaBoss.Name = "Giant Ekans">>
	<<set $anacondaBoss.species = "snake">>
	
<</if>>


:: pokemod core patch core species [pokemod] {"position":"7000,1000","size":"100,100"}
/* This passage is responsible for patching the core species when Pokemod Core is selected. Other patches (like the ones to enemies and NPCs) are done elsewhere) */

<<set $options.pokemodCoreEnabled = true>>

/* PATCH THE CORE SPECIES */

/* Dolphin -> Palafin */
<<run setup.registerSpecies({
	id: "dolphin",
	species: "palafin",
	plural: "palafins",
	mname: "palafin",
	fname: "palafin",
	furBack: "blue", furBelly: "white", furHead: "blue",
	
	speciesStats: [7,5,5,5,3,3],
	
	waterType: true,
})>>

/* Orca -> Wailmer */
/* Orca is hard because the only thing based on orcas is a legendary, which I want to avoid... Going with Wailmer instead of Wailord, because Wailord would be a better fit for a whale species replacement, if one gets added. */
<<run setup.registerSpecies({ 
	id: "orca",
	article: "a",
	species: "wailmer",
	plural: "wailmers",
	mname: "wailmer",
	fname: "wailmer",
	furBack: "blue", furBelly: "yellow-white", furHead: "blue",
	
	speciesStats: [3,2,10,3,7,15],
	
	waterType: true,
})>>

/* Shark -> Sharpedo */
<<run setup.registerSpecies({
	id: "shark",
	species: "sharpedo",
	plural: "sharpedoes",
	mname: "sharpedo",
	fname: "sharpedo",
	furBack: "blue", furBelly: "white", furHead: "blue",
	
	speciesStats: [8,6,2,4,5,5],
	
	waterType: true,
	darkType: true,
})>>

/* Blue Jay -> Corvisquire */
<<run setup.registerSpecies({
	id: "blueJay",
	species: "corvisquire",
	plural: "corvisquires",
	mname: "corvisquire",
	fname: "corvisquire",
	furBack: "blue", furBelly: "light blue", furHead: "black",
	
	speciesStats: [6,4,10,5,0,0],
	
	flyingType: true,
})>>

/* Hawk -> Hawlucha */
<<run setup.registerSpecies({
	id: "hawk",
	species: "hawlucha",
	plural: "hawluchas",
	mname: "hawlucha",
	fname: "hawlucha",
	furBack: "red", furBelly: "white", furHead: "green",
	
	speciesStats: [6,9,5,5,0,0],
	
	flyingType: true,
	fightingType: true,
})>>

/* Owl -> Noctowl */
<<run setup.registerSpecies({
	id: "owl",
	article: "a",
	species: "noctowl",
	plural: "noctowls",
	mname: "noctowl",
	fname: "noctowl",
	furBack: "brown", furBelly: "light brown", furHead: "light brown",
	
	speciesStats: [4,6,7,8,0,2],
	
	normalType: true,
	flyingType: true,
})>>

/* Penguin -> Delibird */
<<run setup.registerSpecies({
	id: "penguin",
	species: "delibird",
	plural: "delibirds",
	mname: "delibird",
	fname: "delibird",
	furBack: "red", furBelly: "white", furHead: "red",
	
	speciesStats: [4,5,4,5,7,6],
	
	iceType: true,
	flyingType: true,
})>>

/* Raven -> Corviknight */
/* Ugh, gonna have to use another corvi form because it's the best fit, aren't I? */
<<run setup.registerSpecies({
	id: "raven",
	species: "corviknight",
	plural: "corviknights",
	mname: "corviknight",
	fname: "corviknight",
	furBack: "black", furBelly: "black", furHead: "black",
	
	speciesStats: [6,4,10,5,0,0], /* same stats as corvisquire because I was actually already using corviknight's stats :p */
	
	flyingType: true,
	steelType: true,
})>>

/* Robin -> Fletchling */
<<run setup.registerSpecies({
	id: "robin",
	species: "fletchling",
	plural: "fletchlings",
	mname: "fletchling",
	fname: "fletchling",
	furBack: "grey", furBelly: "grey", furHead: "red",
	
	speciesStats: [5,10,5,5,0,0],
	
	normalType: true,
	flyingType: true,
})>>

/* Magpie -> Pidgeot */
/* There are no pokemon that are close to being magpies, so here's pidgeot instead :p */
<<run setup.registerSpecies({
	id: "magpie",
	species: "pidgeot",
	plural: "pidgeots",
	mname: "pidgeot",
	fname: "pidgeot",
	furBack: "brown", furBelly: "beige", furHead: "yellow and red",
	hair: "crest",
	
	speciesStats: [6,8,6,5,0,0],
	
	normalType: true,
	flyingType: true,
})>>

/* Duck -> Ducklett */
<<run setup.registerSpecies({
	id: "duck",
	species: "ducklett",
	plural: "duckletts",
	mname: "ducklett",
	fname: "ducklett",
	furBack: "light blue", furBelly: "blue", furHead: "light blue",
	
	speciesStats: [6,8,5,6,0,0],
	
	waterType: true,
	flyingType: true,
})>>

/* coyote, dog, fox, paintedDog, wolf */

/* Coyote -> Arcanine */
/* No good pokemon substitute, so here's a popular doggo instead */
<<run setup.registerSpecies({
	id: "coyote",
	species: "arcanine",
	plural: "arcanines",
	mname: "arcanine",
	fname: "arcanine",
	furBack: "black and orange striped", furBelly: "black and orange striped", furHead: "beige",
	hair: "mane",
	
	speciesStats: [7,6,4,4,5,3],
	
	fireType: true,
})>>

/* Dog -> Boltund, I guess*/
<<run setup.registerSpecies({
	id: "dog",
	species: "boltund",
	plural: "boltunds",
	mname: "boltund",
	fname: "boltund",
	furBack: "yellow", furBelly: "black", furHead: "yellow",
	
	speciesStats: [5,8,2,5,5,8],
	
	electricType: true,
})>>

/* Fox -> Vulpix */
<<run setup.registerSpecies({
	id: "fox",
	species: "vulpix",
	plural: "vuplixes",
	mname: "vulpix",
	fname: "vulpix",
	furBack: "red", furBelly: "beige", furHead: "red",
	tail: "curled tails",
	
	speciesStats: [2,6,5,7,5,3],
	
	fireType: true,
})>>

/* Painted Dog -> Mightyena */
/* Yes, it would be much better for a hyena rather than a painted dog, but I work with what I'm given (and painted dogs are basically just hyenas anyway ;p) */
<<run setup.registerSpecies({
	id: "paintedDog",
	species: "mightyena",
	plural: "mightyenas",
	mname: "mightyena",
	fname: "mightyena",
	furBack: "black", furBelly: "grey", furHead: "black",
	
	speciesStats: [6,5,5,4,5,3],
	
	darkType: true,
})>>

/* Wolf -> Lycanroc */
<<run setup.registerSpecies({
	id: "wolf",
	species: "lycanroc",
	plural: "lycanrocs",
	mname: "lycanroc",
	fname: "lycanroc",
	furBack: "light brown", furBelly: "white", furHead: "light brown", /* going with midday form */
	
	speciesStats: [7,7,3,3,5,5],
	
	rockType: true,
})>>

/* Raptor -> Sceptile */
<<run setup.registerSpecies({
	id: "raptor",
	species: "sceptile",
	plural: "sceptiles",
	mname: "sceptile",
	fname: "sceptile",
	furBack: "green", furBelly: "green", furHead: "green",
	
	speciesStats: [2,6,2,5,10,0],
	
	grassType: true,
})>>

/* pterodactyl -> aerodactyl */
<<run setup.registerSpecies({
	id: "pterodactyl",
	species: "aerodactyl",
	plural: "aerodactyls",
	mname: "aerodactyl",
	fname: "aerodactyl",
	article: "an",
	furBack: "grey", furBelly: "grey", furHead: "grey",
	teeth: "teeth",
	
	speciesStats: [6,10,4,3,2,4],
	
	rockType: true,
	flyingType: true,
})>>

/* triceratops -> bastiodon */
<<run setup.registerSpecies({
	id: "triceratops",
	species: "bastiodon",
	plural: "bastiodons",
	mname: "bastiodon",
	fname: "bastiodon",
	furBack: "black", furBelly: "beige", furHead: "black",
	hair: "armored head",
	
	speciesStats: [5,0,10,5,5,20],
	
	rockType: true,
	steelType: true,
})>>

/* stegosaurus -> aurorus */
<<run setup.registerSpecies({
	id: "stegosaurus",
	species: "aurorus",
	plural: "auroruses",
	mname: "aurorus",
	fname: "aurorus",
	article: "an",
	furBack: "blue", furBelly: "light blue", furHead: "blue",
	tail: "thick tail",
	teeth: "teeth",
	mouth: "mouth",
	fur: "skin", furred: "skinned", furry: "skinned",
	
	speciesStats: [4,1,8,7,5,20],
	
	iceType: true,
	rockType: true,
})>>

/* apatosaurus -> Meganium */
<<run setup.registerSpecies({
	id: "apatosaurus",
	species: "meganium",
	plural: "meganiums",
	mname: "meganium",
	fname: "meganium",
	article: "a",
	furBack: "green", furBelly: "green", furHead: "green",
	tail: "short tail",
	fur: "skin", furred: "skinned", furry: "skinned",
	
	speciesStats: [4,5,6,5,5,5],
	
	grassType: true,
})>>

/* tyrannosaurus -> tyrantrum */
<<run setup.registerSpecies({
	id: "tyrannosaurus",
	species: "tyrantrum",
	plural: "tyrantrums",
	mname: "tyrantrum",
	fname: "tyrantrum",
	furBack: "red", furBelly: "grey", furHead: "red",
	
	speciesStats: [8,2,5,0,10,5],
	
	rockType: true,
	dragonType: true,
})>>

<<run setup.registerSpecies({
	id: "blackDragon",
	species: "garchomp",
	plural: "garchomps",
	mname: "garchomp",
	fname: "garchomp",
	furBack: "dark blue", furBelly: "red", furHead: "dark blue",
	flying: false,
	
	speciesStats: [7,6,2,0,10,5],
	
	dragonType: true,
	groundType: true,
})>>

<<run setup.registerSpecies({
	id: "blueDragon",
	species: "salamence",
	plural: "salamences",
	mname: "salamence",
	fname: "salamence",
	furBack: "blue", furBelly: "white", furHead: "blue",
	
	speciesStats: [7,4,1,3,10,5],
	
	dragonType: true,
	flyingType: true,
})>>

<<run setup.registerSpecies({
	id: "greenDragon",
	species: "flygon",
	mname: "flygon",
	fname: "flygon",
	plural: "flygons",
	furBack: "green", furBelly: "green", furHead: "green",
	
	speciesStats: [5,5,2,3,10,10],
	
	dragonType: true,
	groundType: true,
})>>

<<run setup.registerSpecies({
	id: "redDragon",
	species: "charizard",
	plural: "charizards",
	mname: "charizard",
	fname: "charizard",
	furBack: "red", furBelly: "cream", furHead: "red",
	tail: "flame-tipped tail",
	
	speciesStats: [2,5,2,6,10,5],
	
	fireType: true,
	flyingType: true,
	
})>>

<<run setup.registerSpecies({
	id: "whiteDragon",
	species: "dragonite",
	plural: "dragonites",
	mname: "dragonite",
	fname: "dragonite",
	furBack: "orange", furBelly: "cream", furHead: "orange",
	
	speciesStats: [6,2,3,4,10,5],
	
	dragonType: true,
	flyingType: true,
})>>

<<run setup.registerSpecies({
	id: "wyvern",
	species: "noivern",
	plural: "noiverns",
	mname: "noivern",
	fname: "noivern",
	furBack: "black", furBelly: "purple", furHead: "black",
	
	speciesStats: [3,6,2,4,10,5],
	
	flyingType: true,
	dragonType: true,
})>>


<<run setup.registerSpecies({
	id: "lion",
	species: "pyroar",
	fname: "pyroar",
	mname: "pyroar",
	plural: "pyroars",
	furBack: "dark brown", furBelly: "dark brown", furHead: "fiery red",
	
	speciesStats: [3,5,2,5,10,4],
	
	fireType: true,
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "cheetah",
	species: "purugly",
	plural: "puruglies",
	mname: "purugly",
	fname: "purugly",
	furBack: "black", furBelly: "white", furHead: "black",
	tail: "corkscrew tail",
	
	speciesStats: [3,8,2,2,10,15],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "cougar",
	species: "delcatty",
	plural: "delcatties",
	mname: "delcatty",
	fname: "delcatty",
	furBack: "cream", furBelly: "cream", furHead: "purple",
	tail: "thin tail",
	
	speciesStats: [4,6,5,3,7,3],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "leopard",
	species: "liepard",
	plural: "liepards",
	mname: "liepard",
	fname: "liepard",
	furBack: "spotted purple", furBelly: "yellow", furHead: "purple",
	
	speciesStats: [5,6,2,5,7,3],
	
	darkType: true,
})>>

<<run setup.registerSpecies({
	id: "panther",
	species: "persian",
	plural: "persians",
	mname: "persian",
	fname: "persian",
	furBack: "cream", furBelly: "cream", furHead: "cream",
	
	speciesStats: [5,6,4,3,7,3],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "tiger",
	species: "incineroar",
	plural: "incineroars",
	mname: "incineroar",
	fname: "incineroar",
	furBack: "grey", furBelly: "grey", furHead: "black and red striped",
	tail: "fluffy tail",
	
	speciesStats: [6,1,5,3,10,4],
	
	fireType: true,
	darkType: true,
})>>

<<run setup.registerSpecies({
	id: "jaguar",
	species: "luxray",
	plural: "luxrays",
	mname: "luxray",
	fname: "luxray",
	furBack: "black", furBelly: "blue", furHead: "black",
	tail: "star-pointed tail",
	
	speciesStats: [6,3,4,5,7,3],
	
	electricType: true,
})>>

<<run setup.registerSpecies({
	id: "cattle",
	species: "miltank",
	plural: "miltanks",
	furBack: "spotted pink", furBelly: "cream", furHead: "black",
	fname: "miltank",
	mname: "miltank",
	
	speciesStats: [6,6,8,0,5,25],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "deer",
	species: "sawsbuck",
	fname: "sawsbuck",
	mname: "sawsbuck",
	plural: "sawsbucks",
	furBack: "black", furBelly: "grey", furHead: "black",
	
	speciesStats: [6,6,4,4,5,10],
	
	normalType: true,
	grassType: true,
})>>

<<run setup.registerSpecies({
	id: "donkey",
	species: "mudbray",
	plural: "mudbrays",
	mname: "mudbray",
	fname: "mudbray",
	furBack: "brown", furBelly: "cream", furHead: "brown",
	
	speciesStats: [8,0,7,5,0,6],
	
	groundType: true,
})>>

<<run setup.registerSpecies({
	id: "goat",
	species: "gogoat",
	plural: "gogoats",
	mname: "gogoat",
	fname: "gogoat",
	furBack: "brown", furBelly: "light brown", furHead: "brown",
	tail: "short tail",
	
	speciesStats: [6,2,7,5,5,15],
	
	grassType: true,
})>>

<<run setup.registerSpecies({
	id: "horse",
	species: "rapidash",
	mname: "rapidash",
	fname: "rapidash",
	plural: "rapidashes",
	furBack: "cream", furBelly: "cream", furHead: "fiery red",
	
	speciesStats: [7,7,5,6,0,4],
	
	fireType: true,
})>>

<<run setup.registerSpecies({
	id: "pig",
	species: "emboar",
	plural: "emboars",
	mname: "emboar",
	fname: "emboar",
	furBack: "black", furBelly: "black", furHead: "orange",
	tail: "tail",
	
	speciesStats: [7,2,5,5,6,13],
	
	fireType: true,
	fightingType: true,
})>>

<<run setup.registerSpecies({
	id: "badger",
	species: "obstagoon",
	plural: "obstagoons",
	mname: "obstagoon",
	fname: "obstagoon",
	furBack: "black and white", furBelly: "black and white", furHead: "black and white",
	tail: "short tail",
	
	speciesStats: [5,5,6,4,5,10],
	
	darkType: true,
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "ferret",
	species: "furret",
	plural: "furrets",
	mname: "furret",
	fname: "furret",
	furBack: "brown", furBelly: "brown striped", furHead: "brown",
	tail: "striped tail",
	
	speciesStats: [5,7,5,3,0,0],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "greyKangaroo",
	species: "kangaskhan",
	plural: "kangaskhans",
	mname: "kangaskhan",
	fname: "kangaskhan",
	furBack: "light brown", furBelly: "cream", furHead: "brown",
	
	speciesStats: [6,6,7,4,2,5],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "redKangaroo",
	species: "breloom", /* look, it's the best we got */
	plural: "brelooms",
	mname: "breloom",
	fname: "breloom",
	furBack: "green", furBelly: "grey", furHead: "black",
	fur: "skin", furred: "skinned", furry: "skinned",
	hair: "head",
	
	speciesStats: [10,4,4,3,4,5],
	
	grassType: true,
	fightingType: true,
})>>

<<run setup.registerSpecies({
	id: "otter",
	species: "oshawott",
	plural: "oshawotts",
	mname: "oshawott",
	fname: "oshawott",
	furBack: "light blue", furBelly: "light blue", furHead: "white",
	
	speciesStats: [7,5,6,7,0,5],
	
	waterType: true,
})>>


<<run setup.registerSpecies({
	id: "raccoon",
	species: "zigzagoon",
	plural: "zigzagoons",
	mname: "zigzagoon",
	fname: "zigzagoon",
	furBack: "brown and white striped", furBelly: "brown and white striped", furHead: "brown",
	
	speciesStats: [5,8,5,3,4,8],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "skunk",
	species: "skuntank",
	plural: "skuntanks",
	mname: "skuntank",
	fname: "skuntank",
	furBack: "purple", furBelly: "cream", furHead: "purple",
	
	speciesStats: [6,6,7,5,1,5],
	
	posionType: true,
	darkType: true,
})>>

<<run setup.registerSpecies({
	id: "weasel",
	species: "floatzel",
	plural: "floatzels",
	mname: "floatzel",
	fname: "floatzel",
	furBack: "orange", furBelly: "cream", furHead: "orange",
	aquatic: true,
	tail: "twin tails",
	
	speciesStats: [7,8,5,5,0,0],
	
	waterType: true,
})>>

<<run setup.registerSpecies({
	id: "mouse",
	species: "pikachu",
	plural: "pikachus",
	mname: "pikachu",
	fname: "pikachu",
	furBack: "yellow", furBelly: "yellow", furHead: "yellow",
	tail: "lightning bolt tail",
	
	speciesStats: [4,7,4,7,3,2],
	
	electricType: true,
})>>

<<run setup.registerSpecies({
	id: "rabbit",
	species: "lopunny",
	plural: "lopunnies",
	mname: "lopunny",
	fname: "lopunny",
	furBack: "brown", furBelly: "brown", furHead: "brown",
	
	speciesStats: [5,7,5,4,4,5],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "rat",
	species: "rattata",
	plural: "rattatas",
	mname: "rattata",
	fname: "rattata",
	furBack: "purple", furBelly: "cream", furHead: "purple",
	
	speciesStats: [6,6,5,4,4,5],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "squirrel",
	species: "pachirisu", /* greedent's too obvious! I want a buff Snookums pachirisu ;P */
	plural: "pachirisus",
	mname: "pachirisu",
	fname: "pachirisu",
	furBack: "white", furBelly: "white", furHead: "white",
	
	speciesStats: [4,7,6,4,2,3],
	
	electricType: true,
})>>

<<run setup.registerSpecies({
	id: "bat",
	species: "zubat",
	plural: "zubats",
	mname: "zubat",
	fname: "zubat",
	furBack: "blue", furBelly: "blue", furHead: "blue",
	
	speciesStats: [5,8,5,5,2,1],
	
	poisonType: true,
	flyingType: true,
})>>

<<run setup.registerSpecies({
	id: "shrew",
	species: "shroodle",
	plural: "shroodles",
	mname: "shroodle",
	fname: "shroodle",
	furBack: "grey", furBelly: "white", furHead: "black",
	tail: "stubby tail",
	
	speciesStats: [6,7,4,5,3,2],
	
	poisonType: true,
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "gopher",
	species: "bidoof",
	plural: "bidoofs",
	mname: "bidoof",
	fname: "bidoof",
	furBack: "brown", furBelly: "cream", furHead: "brown",
	
	speciesStats: [6,5,5,5,4,5],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "blackBear",
	species: "bewear",
	plural: "bewears",
	mname: "bewear",
	fname: "bewear",
	furBack: "black", furBelly: "grey", furHead: "pink",
	
	speciesStats: [7,0,6,0,12,20],
	
	normalType: true,
	fightingType: true,
})>>

<<run setup.registerSpecies({
	id: "brownBear",
	article: "an",
	species: "ursaring",
	plural: "ursarings",
	mname: "ursaring",
	fname: "ursaring",
	furBack: "brown", furBelly: "brown", furHead: "brown",
	
	speciesStats: [7,0,4,2,12,20],
	
	normalType: true,
})>>

<<run setup.registerSpecies({
	id: "panda",
	species: "pangoro",
	plural: "pangoros",
	mname: "pangoro",
	fname: "pangoro",
	furBack: "black", furBelly: "white", furHead: "white",
	
	speciesStats: [7,0,4,2,12,20],
	
	fightingType: true,
	darkType: true,
})>>

<<run setup.registerSpecies({
	id: "polarBear",
	species: "beartic",
	plural: "beartics",
	mname: "beartic",
	fname: "beartic",
	furBack: "white", furBelly: "white", furHead: "white",
	
	speciesStats: [7,0,4,2,12,20],
	
	iceType: true,
})>>

<<run setup.registerSpecies({
	id: "bee",
	species: "beedrill",
	plural: "beedrills",
	mname: "beedrill",
	fname: "beedrill",
	furBack: "black and yellow striped", furBelly: "black and yellow striped", furHead: "yellow",
	hand: "hand stinger", hands: "hand stingers",
	
	speciesStats: [8,7,5,5,0,0],
	
	bugType: true,
	poisonType: true,
})>>

<<run setup.registerSpecies({
	id: "wasp",
	species: "combee", /* This might be a confusing choice, but in-game, it's the *wasp* enemies that seem to be in charge of making honey, not the bee enemies... */
	plural: "combees",
	mname: "combee",
	fname: "vespiquen",
	furBack: "black and yellow striped", furBelly: "black and yellow striped", furHead: "yellow",
	
	speciesStats: [8,1,8,8,0,0],
	
	bugType: true,
	flyingType: true,
})>>

<<run setup.registerSpecies({
	id: "ant",
	article: "a",
	species: "durant",
	plural: "durants",
	mname: "durant",
	fname: "durant",
	furBack: "grey", furBelly: "grey", furHead: "grey",
	
	speciesStats: [9,9,5,2,0,0],
	
	bugType: true,
	flyingType: true,
})>>

<<run setup.registerSpecies({
	id: "hydra",
	species: "hydreigon",
	plural: "hydreigons",
	mname: "hydreigon",
	fname: "hydreigon",
	furBack: "black", furBelly: "blue", furHead: "blue",
	
	speciesStats: [5,5,4,6,5,5],
	
	dragonType: true,
	darkType: true,
})>>

<<run setup.registerSpecies({
	id: "snake",
	species: "ekans",
	plural: "ekans",
	mname: "ekans",
	fname: "ekans",
	furBack: "purple", furBelly: "yellow", furHead: "purple",
	
	speciesStats: [2,1,1,1,20,0],
	
	poisonType: true,
})>>

<<run setup.registerSpecies({
	id: "lizard",
	species: "salandit", /* No good generic lizard mon, so go with something popular */
	plural: "salandits",
	furBack: "grey", furBelly: "grey", furHead: "black",
	mname: "salandit",
	fname: "salazzle",
	
	speciesStats: [3,8,3,7,4,5],
	
	poisonType: true,
	fireType: true,
})>>

<<run setup.registerSpecies({
	id: "anacondaSpecies",
	article: "a",
	species: "sandaconda",
	plural: "sandacondas",
	mname: "sandaconda",
	fname: "sandaconda",
	furBack: "brown", furBelly: "cream", furHead: "cream",
	
	speciesStats: [2,0,3,0,20,0],
	
	groundType: true,
})>>

<<run setup.registerSpecies({
	id: "rhino",
	species: "rhyhorn",
	plural: "rhyhorns",
	mname: "rhyhorn",
	fname: "rhyhorn",
	furBack: "grey", furBelly: "grey", furHead: "grey",
	
	speciesStats: [10,0,9,0,6,20],
	
	groundType: true,
	rockType: true,
})>>

<<run setup.registerSpecies({
	id: "hippo",
	species: "hippowdon",
	plural: "hippowdons",
	mname: "hippowdon",
	fname: "hippowdon",
	furBack: "black", furBelly: "brown", furHead: "black", /* male colouration */
	
	speciesStats: [7,0,7,3,8,30],
	
	groundType: true,
})>>

<<run setup.registerSpecies({
	id: "elephant",
	article: "a",
	species: "copperajah",
	plural: "copperajahs",
	mname: "copperajah",
	fname: "copperajah",
	furBack: "green", furBelly: "light green", furHead: "green",
	
	speciesStats: [8,0,5,4,8,20],
	
	steelType: true,
})>>

<<run setup.registerSpecies({
	id: "meerkat",
	species: "watchog",
	plural: "watchogs",
	mname: "watchog",
	fname: "watchog",
	furBack: "red and yellow striped", furBelly: "red and yellow striped", furHead: "red",
	
	speciesStats: [6,5,5,5,4,5],
	
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "chicken",	
	species: "torchic",
	plural: "torchics",
	mname: "torchic",
	fname: "torchic",
	angry: "caw",
	furBack: "orange", furBelly: "orange", furHead: "orange",
	foot: "claw", feet: "claws",
	hand: "wing", hands: "wings",
    
	speciesHeight: 61,
	speciesStats: [8,5,4,8,0,0],
	
	fireType: true,
})>>

<<run setup.registerSpecies({
	id: "parrot",
	article: "a",
	species: "chatot",
	plural: "chatots",
	mname: "chatot",
	fname: "chatot",
	furBack: "blue", furBelly: "green", furHead: "black",
	
	speciesStats: [3,8,5,8,1,0],
	
	flyingType: true,
})>>


/* Yeah, there's no direct replacement for a manticore, so screw trying */


:: pokemod patch and update [pokemod] {"position":"7000,900","size":"100,100"}
<<set _modVersion = 1>> 

<<if $pokemod_saveVersion < _modVersion>>
	<<set setup.modUpdated = true>> /* Flag that an update has happened */
	<<set setup.modUpdatedList.push("Pokemod")>> /* Add to list of updated mods */
	
	/* Update the recorded version in the save, so this doesn't happen again */
	<<set $pokemod_saveVersion = _modVersion>>
<</if>>

/* ALWAYS PATCH */
/* (core portion is already automatically applied) */
<<include "pokemod core patch and update">>
<<include "pokemod plus species">>


:: pokemod plus species [pokemod] {"position":"7100,1000","size":"100,100"}
<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_lucario",	
	species: "lucario",
	angry: "growl",
	furBack: "cream", furBelly: "cream", furHead: "blue",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 68,
	speciesStats: [5,5,3,5,7,5],
	adjective: "canine",
	
	carnivore: true,
	fightingType: true,
	steelType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_riolu",	
	species: "riolu",
	angry: "growl",
	furBack: "black", furBelly: "black", furHead: "blue",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 68,
	speciesStats: [5,5,3,5,7,5],
	adjective: "canine",
	
	carnivore: true,
	fightingType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_raichu",	
	species: "raichu",
	angry: "squeak",
	furBack: "yellow", furBelly: "cream", furHead: "yellow",
	tail: "lightning bolt tail",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	teeth: "teeth",
	mouth: "muzzle",
	speciesHeight: 58,
	speciesStats: [4,7,4,7,3,2],
	adjective: "rodent",
	
	herbivore: true,
	electricType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_gardevoir",	
	species: "gardevoir",
	angry: "yell",
	furBack: "white", furBelly: "white", furHead: "green",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "skin", furred: "skinned", furry: "skinned",
	hair: "hair",
	tail: "spine",
	teeth: "teeth",
	mouth: "mouth",
	speciesHeight: 63,
	speciesStats: [3,6,4,10,2,0],
	adjective: "humanoid",
	
	psychicType: true,
	fairyType: true,

	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_gallade",	
	species: "gallade",
	angry: "yell",
	furBack: "white", furBelly: "white", furHead: "green",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "skin", furred: "skinned", furry: "skinned",
	hair: "hair",
	tail: "spine",
	teeth: "teeth",
	mouth: "mouth",
	speciesHeight: 63,
	speciesStats: [8,6,6,3,2,0],
	adjective: "humanoid",
	
	psychicType: true,
	fightingType: true,

	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "an",
	id: "pokemod_eevee",	
	species: "eevee",
	angry: "bark",
	furBack: "brown", furBelly: "brown", furHead: "brown",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [5,5,5,5,5,3],
	
	adjective: "canine",
	
	carnivore: true,
	normalType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_vaporeon",	
	species: "vaporeon",
	angry: "bark",
	furBack: "brown", furBelly: "brown", furHead: "brown",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "skin", furred: "skinned", furry: "skinned",
	hair: "headfins",
	tail: "fishlike tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,3,10,8,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	aquatic: true,
	waterType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_jolteon",	
	species: "jolteon",
	angry: "bark",
	furBack: "yellow", furBelly: "yellow", furHead: "yellow",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "spiky tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,10,3,8,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	electricType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_flareon",	
	species: "flareon",
	angry: "bark",
	furBack: "red", furBelly: "red", furHead: "red",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [10,3,3,8,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "an",
	id: "pokemod_espeon",	
	species: "espeon",
	angry: "bark",
	furBack: "purple", furBelly: "purple", furHead: "purple",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "two-tipped tail",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,8,3,10,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	psychicType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "an",
	id: "pokemod_umbreon",	
	species: "umbreon",
	angry: "bark",
	furBack: "black", furBelly: "black", furHead: "black",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,3,10,8,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	darkType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_leafeon",	
	species: "leafeon",
	angry: "bark",
	furBack: "cream", furBelly: "cream", furHead: "cream",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "leafy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [10,8,3,3,1,3],
	
	adjective: "canine",
	
	grassType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_glaceon",	
	species: "glaceon",
	angry: "bark",
	furBack: "light blue", furBelly: "light blue", furHead: "light blue",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,3,8,10,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	iceType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_sylveon",	
	species: "sylveon",
	angry: "bark",
	furBack: "cream", furBelly: "cream", furHead: "pink",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,3,8,10,1,3],
	
	adjective: "canine",
	
	carnivore: true,
	fairyType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_buneary",	
	species: "buneary",
	angry: "squeak",
	furBack: "brown", furBelly: "cream", furHead: "brown",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "stubby tail",
	teeth: "long teeth",
	mouth: "muzzle",
	speciesHeight: 63,
	speciesStats: [5,7,5,4,4,5],
	adjective: "leporine",
	plural: "bunearies",
	
	herbivore: true,
	normalType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_delphox",	
	species: "delphox",
	angry: "bark",
	furBack: "red", furBelly: "white", furHead: "yellow",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,7,3,7,5,3],
	adjective: "vulpine",
	plural: "delphoxes",
	
	carnivore: true,
	fireType: true,
	psychicType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_braixen",	
	species: "braixen",
	angry: "bark",
	furBack: "yellow", furBelly: "yellow", furHead: "yellow",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,7,3,7,5,3],
	adjective: "vulpine",
	
	carnivore: true,
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_fennekin",	
	species: "fennekin",
	angry: "bark",
	furBack: "yellow", furBelly: "yellow", furHead: "yellow",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [3,7,3,7,5,3],
	adjective: "vulpine",
	
	carnivore: true,
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_zoroark",	
	species: "zoroark",
	angry: "bark",
	furBack: "black", furBelly: "black", furHead: "red",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "mane",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [6,6,2,6,5,3],
	adjective: "vulpine",
	
	carnivore: true,
	darkType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_zorua",	
	species: "zorua",
	angry: "bark",
	furBack: "black", furBelly: "black", furHead: "red",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "mane",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [6,6,2,6,5,3],
	adjective: "vulpine",
	
	carnivore: true,
	darkType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_charmeleon",	
	species: "charmeleon",
	angry: "roar",
	furBack: "red", furBelly: "cream", furHead: "red",
	foot: "foot", feet: "feet",
	hand: "claw", hands: "claws",
	fur: "scales", furred: "scaled", furry: "scaly",
	hair: "head",
	tail: "flame-tipped tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 73,
	speciesStats: [2,5,2,6,10,5],
	adjective: "reptilian",
	carnivore: true,
	
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_charmander",	
	species: "charmander",
	angry: "roar",
	furBack: "orange", furBelly: "cream", furHead: "orange",
	foot: "foot", feet: "feet",
	hand: "claw", hands: "claws",
	fur: "scales", furred: "scaled", furry: "scaly",
	hair: "head",
	tail: "flame-tipped tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 73,
	speciesStats: [2,5,2,6,10,5],
	adjective: "reptilian",
	carnivore: true,
	
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_growlithe",	
	species: "growlithe",
	angry: "bark",
	furBack: "black and orange striped", furBelly: "black and orange striped", furHead: "beige",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "mane",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 60,
	speciesStats: [7,6,4,4,5,3],
	adjective: "canine",
	carnivore: true,
	
	fireType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_rockruff",	
	species: "rockruff",
	angry: "growl",
	furBack: "light brown", furBelly: "white", furHead: "light brown",
	foot: "paw", feet: "paws",
	hand: "paw", hands: "paws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "bushy tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 68,
	speciesStats: [7,7,3,3,5,5],
	adjective: "canine",
	carnivore: true,
	
	rockType: true,

	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_blaziken",	
	species: "blaziken",
	angry: "caw",
	furBack: "red", furBelly: "red", furHead: "cream",
	foot: "claw", feet: "claws",
	hand: "claw", hands: "claws",
	fur: "feathers", furred: "feathered", furry: "feathery",
	hair: "headfeathers",
	tail: "tailfeathers",
	teeth: "beak",
	mouth: "beak",
	speciesHeight: 61,
	speciesStats: [8,5,4,8,0,0],
	adjective: "avian",
	
	fireType: true,
	fightingType: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_zangoose",	
	species: "zangoose",
	angry: "growl",
	furBack: "white", furBelly: "white", furHead: "white",
	foot: "paw", feet: "paws",
	hand: "claw", hands: "claws",
	fur: "fur", furred: "furred", furry: "furry",
	hair: "headfur",
	tail: "tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 56,
	speciesStats: [9,6,5,5,0,0],
	adjective: "musteline",
	carnivore: true,
	
	option: "pokemodPlusEnabled",
})>>

<<run setup.registerSpecies({
	article: "a",
	id: "pokemod_goodra",	
	species: "goodra",
	angry: "roar",
	furBack: "lavender", furBelly: "purple", furHead: "lavender",
	foot: "foot", feet: "feet",
	hand: "hand", hands: "hands",
	fur: "skin", furred: "skinned", furry: "skinned",
	hair: "head",
	tail: "thick tail",
	teeth: "sharp teeth",
	mouth: "muzzle",
	speciesHeight: 74,
	speciesStats: [5,2,8,5,5,5],
	adjective: "draconic",
	dragon: true,
	
	dragonType: true,
	
	option: "pokemodPlusEnabled",
})>>


:: species editor - load [fixes-and-edits] {"position":"7300,1400","size":"100,100"}
Paste a saved species here to load it:
<hr>
<<set _input = "">>

<pre><span id="speciesEditorLoadReport"></span></pre>

<<textarea "_input" "">>

<hr>
[<<link "Load">>
	<<script>>
    	try {
        	let species = JSON.parse(State.temporary.input);
            /* No sanity checks ATM - let's just go! */
            State.variables.species = species;
            Engine.play("species editor", true);
            Dialog.close();
        } catch (er) {
        	/* TODO- format error a lot better */
            document.getElementById("speciesEditorLoadReport").textContent = `Error loading species!`;
        }
    <</script>>
<</link>>]<br>
[<<link "Close">>
	<<script>>
    	Dialog.close();
    <</script>>
<</link>>]


:: species editor - save [fixes-and-edits] {"position":"7200,1400","size":"100,100"}
/* TODO - Make the formatting nicer */
/* TODO - Save to metadata? */
Save a copy of the following text in order to use your species later:
<hr>
<<set _output = JSON.stringify(_editingSpecies, null, "\t")>>

<pre><span id="speciesEditorSaveJson"></span></pre>

/* I *think* this is needed in order to output text without any substitutions going on? */
<<script>>
$(document).one(':dialogopened', function (ev) {
	document.getElementById("speciesEditorSaveJson").textContent = State.temporary.output;
});
<</script>>
<hr>
[<<link "Copy">>
	<<script>>
    	navigator.clipboard.writeText(State.temporary.output);
    <</script>>
<</link>>]<br>
[<<link "Close">>
	<<script>>
    	Dialog.close();
    <</script>>
<</link>>]


:: species editor - stats [fixes-and-edits] {"position":"7200,1300","size":"100,100"}
/* Included as part of the species editor during character generation, for editing the base stats of the species */

<b><u>Edit Base Stats</u></b><br>
Here you can edit the base stats of your species.<br>
<u>Main Stat Bonuses</u><br>
<i><b><span id="remainingPoints">Points remaining: 0</span></b></i><br>
<li><label>Strength: <<numberbox "_editingSpecies.speciesStats[0]" _editingSpecies.speciesStats[0]>></label></li>
<li><label>Agility: <<numberbox "_editingSpecies.speciesStats[1]" _editingSpecies.speciesStats[1]>></label></li>
<li><label>Endurance: <<numberbox "_editingSpecies.speciesStats[2]" _editingSpecies.speciesStats[2]>></label></li>
<li><label>Intelligence: <<numberbox "_editingSpecies.speciesStats[3]" _editingSpecies.speciesStats[3]>></label></li>
<li><label>Stomach size: <<numberbox "_editingSpecies.speciesStats[4]" _editingSpecies.speciesStats[4]>></label></li>
<u>Other Stats</u><br>
<li><label>Starting height: <<numberbox "_editingSpecies.speciesHeight" _editingSpecies.speciesHeight>> inches <span id="heightExplain">(<<sayDistance _editingSpecies.speciesHeight>>)</span></label></li>
<li><label>Extra starting fat: <<numberbox "_editingSpecies.speciesStats[5]" _editingSpecies.speciesStats[5]>></label></li>

<<script>>
const statInfo = {
	str: {statId: "str", elementId: "#numberbox--editingspeciesspeciesstats0", index: 0,},
	agi: {statId: "agi", elementId: "#numberbox--editingspeciesspeciesstats1", index: 1,},
	end: {statId: "end", elementId: "#numberbox--editingspeciesspeciesstats2", index: 2,},
	int: {statId: "int", elementId: "#numberbox--editingspeciesspeciesstats3", index: 3,},
	sto: {statId: "sto", elementId: "#numberbox--editingspeciesspeciesstats4", index: 4,},
	fat: {statId: "fat", elementId: "#numberbox--editingspeciesspeciesstats5", variable: 5,},
	height: {statId: "height", elementId: "#numberbox--editingspeciesspeciesheight", variable: "speciesHeight",},
};

const mainStats = ["str", "agi", "end", "int", "sto"];

function getPointsSpent() {
	let spentCount = 0;
	
	for (const [key, value] of Object.entries(statInfo)) {
		/* Only care about main stats */
		if ( mainStats.includes(value.statId) == false ) {
			continue;
		}
		
		spentCount += State.temporary["editingSpecies"].speciesStats[value.index]
	}
	
	return spentCount;
}

function updateRemainingPointCount() {
	$.wiki(`<<replace "#remainingPoints">>Points remaining: ${setup.tuning("speciesStatsPoints") - getPointsSpent()}<</replace>>`);
}

function updateHeightExplain(height) {
	$.wiki(`<<replace "#heightExplain">>(<<sayDistance ${height}>>)<</replace>>`);
}

function onStatChanged(stat, newValue) {
	newValue = Math.floor(newValue); /* prevent players from entering floats */
	if ( newValue < 0 ) { newValue = 0 }; /* prevent player from entering negatives */
	
	let isMainStat = mainStats.includes(stat);
	
	if ( isMainStat || stat == "fat" ) {
		if ( isMainStat ) {
			let oldValue = State.temporary["editingSpecies"].speciesStats[statInfo[stat].index] ;
			
			/* Clamp new values */
			newValue = Math.clamp(newValue, setup.tuning("speciesStartStatMin"), setup.tuning("speciesStartStatMax"));
			
			/* Can the player even afford to do this? */
			let increased = ( newValue > oldValue );
			let pointsRemaining = setup.tuning("speciesStatsPoints") - getPointsSpent();
			
			if ( increased && pointsRemaining <= 0 ) {
				/* Negate the change */
				newValue = oldValue;
			} else if ( increased ) {
				/* Cap how much can increase by based on remaining points */
				newValue = Math.clamp(newValue, setup.tuning("speciesStartStatMin"), oldValue + pointsRemaining);
			}
		} else if ( stat == "fat" ) {
			newValue = Math.clamp(newValue, setup.tuning("speciesStartFatMin"), setup.tuning("speciesStartFatMax"));
		}
		/* Update the variable manually */
		State.temporary["editingSpecies"].speciesStats[statInfo[stat].index] = newValue;
		
	} else if ( stat == "height" ) {
		newValue = Math.clamp(newValue, setup.tuning("playerHeightMin"), setup.tuning("playerHeightMax"));
		
		State.temporary.editingSpecies[statInfo.height.variable] = newValue;
		
		updateHeightExplain(newValue);
	}
	
	/* Manually update values */
	$(statInfo[stat].elementId).val(newValue);
	
	if ( isMainStat ) {
		updateRemainingPointCount();
	}
}

$(document).ready(function() {
  $('#numberbox--editingspeciesspeciesstats0').on('input', function() {
    onStatChanged("str", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesstats1').on('input', function() {
    onStatChanged("agi", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesstats2').on('input', function() {
    onStatChanged("end", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesstats3').on('input', function() {
    onStatChanged("int", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesstats4').on('input', function() {
    onStatChanged("sto", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesstats5').on('input', function() {
    onStatChanged("fat", $(this).val());
  });
	$('#numberbox--editingspeciesspeciesheight').on('input', function() {
    onStatChanged("height", $(this).val());
  });
});
<</script>>


:: species editor - terms [fixes-and-edits] {"position":"7300,1300","size":"100,100"}
/* Contains all the text boxes etc. for editing a species as part of the species editing process */
<b><u>Edit Descriptions</u></b><br>
You can use the text boxes below to change your descriptions. Or just leave them as is.<br><br>

What you are: <br>
<<textbox "_editingSpecies.article" _editingSpecies.article>>
<<textbox "_editingSpecies.species" _editingSpecies.species>>
<br>Plural form of your species:  <br>
<<textbox "_editingSpecies.plural" _editingSpecies.plural>>

<br>Masculine name of your species (if there's a difference):  <br>
<<textbox "_editingSpecies.mname" _editingSpecies.mname>>

<br>Feminine name of your species (if there's a difference):  <br>
<<textbox "_editingSpecies.fname" _editingSpecies.fname>>

<br>Adjective to describe your species (like "feline"):  <br>
<<textbox "_editingSpecies.adjective" _editingSpecies.adjective>>

<br>How you yell:<br>
<<textbox "_editingSpecies.angry" _editingSpecies.angry>>

<br>The things you walk around on (singular/plural):<br>
<<textbox "_editingSpecies.foot" _editingSpecies.foot>>
<<textbox "_editingSpecies.feet" _editingSpecies.feet>>

<br>The things you grab stuff with (singular/plural):<br>
<<textbox "_editingSpecies.hand" _editingSpecies.hand>>
<<textbox "_editingSpecies.hands" _editingSpecies.hands>>

<br>The stuff you're covered in (different adjective forms):<br>
<<textbox "_editingSpecies.fur" _editingSpecies.fur>>
<<textbox "_editingSpecies.furred" _editingSpecies.furred>>
<<textbox "_editingSpecies.furry" _editingSpecies.furry>>

<br>The color of your back:<br>
<<textbox "_editingSpecies.furBack" _editingSpecies.furBack>>

<br>The color of your belly:<br>
<<textbox "_editingSpecies.furBelly" _editingSpecies.furBelly>>

<br>The color of your head:<br>
<<textbox "_editingSpecies.furHead" _editingSpecies.furHead>>

<br>The stuff you've got on top of your head:<br>
<<textbox "_editingSpecies.hair" _editingSpecies.hair>>

<br>The thing you use to talk:<br>
<<textbox "_editingSpecies.mouth" _editingSpecies.mouth>>

<br>What you chew stuff with:<br>
<<textbox "_editingSpecies.teeth" _editingSpecies.teeth>>

<br>What kind of tail you may or may not have:<br>
<<textbox "_editingSpecies.tail" _editingSpecies.tail>>


:: temp test {"position":"6600,1300","size":"100,100"}
/*<script>
	$.wiki("<<damage 1>>")
</script>*/

/*<<run console.log(JSON.stringify(State.variables.spells))>>*/
/*<<run console.log(JSON.stringify(setup.getSpell("heal1")))>>*/

<<run console.log(`p.height = ${variables().p.height}`)>>
<<run console.log(`bheight = ${variables().bheight}`)>>

<<run console.log(`Player spells = ${JSON.stringify(variables().spells)}`)>>

/*<<run
	for ( const [id, spell] of Object.entries(setup.spells) ) {
		if ( spell.core ) {
			console.log(JSON.stringify(State.variables[id]));
		}
	}>>*/


